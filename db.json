{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/cactus/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon-192x192.png","path":"images/favicon-192x192.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/css/rtl.styl","path":"css/rtl.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","path":"lib/vazir-font/Vazir-Black.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","path":"lib/vazir-font/Vazir-Black.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","path":"lib/vazir-font/Vazir-Bold.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","path":"lib/vazir-font/Vazir-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","path":"lib/vazir-font/Vazir-Light.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","path":"lib/vazir-font/Vazir-Light.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","path":"lib/vazir-font/Vazir-Medium.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","path":"lib/vazir-font/Vazir-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","path":"lib/vazir-font/Vazir-Thin.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","path":"lib/vazir-font/Vazir-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","path":"lib/vazir-font/Vazir.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","path":"lib/vazir-font/Vazir.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","path":"lib/vazir-font/font-face.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","path":"lib/vazir-font/Vazir-Black.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","path":"lib/vazir-font/Vazir-Black.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","path":"lib/vazir-font/Vazir-Bold.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","path":"lib/vazir-font/Vazir-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","path":"lib/vazir-font/Vazir-Light.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","path":"lib/vazir-font/Vazir-Light.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","path":"lib/vazir-font/Vazir-Medium.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","path":"lib/vazir-font/Vazir-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","path":"lib/vazir-font/Vazir-Thin.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","path":"lib/vazir-font/Vazir-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","path":"lib/vazir-font/Vazir.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","path":"lib/vazir-font/Vazir.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","path":"lib/font-awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","path":"lib/font-awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","path":"lib/justified-gallery/css/justifiedGallery.min.css","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","path":"lib/justified-gallery/js/jquery.justifiedGallery.min.js","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","path":"lib/font-awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","path":"lib/font-awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","path":"lib/font-awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","path":"lib/font-awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","path":"lib/font-awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGL-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGM-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","path":"lib/meslo-LG/MesloLGS-BoldItalic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","path":"lib/meslo-LG/MesloLGL-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","path":"lib/meslo-LG/MesloLGM-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","path":"lib/meslo-LG/MesloLGS-Italic.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","path":"lib/meslo-LG/MesloLGL-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","path":"lib/meslo-LG/MesloLGL-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","path":"lib/meslo-LG/MesloLGM-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","path":"lib/meslo-LG/MesloLGM-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","path":"lib/meslo-LG/MesloLGS-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","path":"lib/meslo-LG/MesloLGS-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","path":"lib/font-awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","path":"lib/font-awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/cactus/.gitignore","hash":"c5345a2c5fa6c136dbe2020a405e541b4755a259","modified":1536852184531},{"_id":"themes/cactus/.jshintrc","hash":"2548bd6ce44422edc7e6f9f68061ab47f26c4f57","modified":1536852184531},{"_id":"themes/cactus/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1536852184531},{"_id":"themes/cactus/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1536852184531},{"_id":"themes/cactus/README.md","hash":"d8689ab1b782a59f726dfa5dc72ff06777c541f6","modified":1536852184531},{"_id":"themes/cactus/_config.yml","hash":"047df2bb05059b48bd899bfe77e8e66a315a7bbe","modified":1539589823593},{"_id":"themes/cactus/gulpfile.js","hash":"2bae290993507026a509665ee5a5326b616f8d68","modified":1536852184531},{"_id":"themes/cactus/package.json","hash":"5bbdbc429e9d46acf97baf7ac5654edde0781064","modified":1536852184535},{"_id":"source/_data/projects.json","hash":"f4fc68303ba50d62e9db9ccaa0c4733d7c1329e7","modified":1537365249151},{"_id":"source/_posts/20170404-python多版本开发.md","hash":"e1d7e068067bfdc8a0d53d4b07b69842e6c5440c","modified":1536891493119},{"_id":"source/_posts/20170427-字符串验证码的识别与破解.md","hash":"e6db6abdf21c169675567fa453f5843e4705fd7c","modified":1536891537943},{"_id":"source/_posts/20170629-请求伪造.md","hash":"efb60f8c0c186133526471eecec4bdeea61f33a0","modified":1536891557112},{"_id":"source/_posts/20170707-mysql配置与安装.md","hash":"27af6e42f83192e7bb2e7cecfcb60cb02b2d7d16","modified":1536891481427},{"_id":"source/_posts/20180319-python的一些小问题.md","hash":"0360a28137645d9e743f17e7456d8d49b2cb66ff","modified":1552965218109},{"_id":"source/_posts/20180403-数据库设计.md","hash":"50fe0855c16f9cb89bede6e3efc20edd2aa3a2cd","modified":1536891550091},{"_id":"source/_posts/20180514-flume的安装与使用.md","hash":"60e5632f5b619a3ad24c3780ed5af9b21820e9aa","modified":1538296592016},{"_id":"source/_posts/20180524-grpc的部署与使用.md","hash":"a8565cca5ad601a8c7c1873703778fb17221b025","modified":1538293831398},{"_id":"source/_posts/20180528-splash快速开始.md","hash":"848e3ee0afad76f8e6cb43c4c12c9e50b3b6cb0d","modified":1536891527303},{"_id":"source/_posts/20180710-git提交规范.md","hash":"cdcf9c6dd59d982c32fa7b59d6a96d10d3e85cb4","modified":1536892231136},{"_id":"source/_posts/20180914-Arcanist快速开始.md","hash":"5a715ee671484571d40e891ab696331a6a7b7343","modified":1536891303721},{"_id":"source/_posts/20180927-Python的实用的小技巧.md","hash":"7e63379099f7262aba28d1b2c279e1b3ed73ebfe","modified":1538300512815},{"_id":"source/_posts/20180930-chrome插件.md","hash":"1f1a01ae263811e38b8b88aa5b6709bd9e4c1d17","modified":1544066345220},{"_id":"source/_posts/20180930-关于高效使用python字典的清单.md","hash":"49d57aff86ae66dba2992543cf470fd9b6bc07d1","modified":1538295611226},{"_id":"source/_posts/20181015-机器学习优化问题－风险.md","hash":"6a8b8ed9072ef3671fbfbd7e4a20adfa6e49be9e","modified":1543413280801},{"_id":"source/_posts/20181016-CNN总结.md","hash":"9bb559e8dfc3bdebcdc64020036ab325de0bc2be","modified":1543999461018},{"_id":"source/_posts/20181031-vim笔记.md","hash":"10b2646d529ff6d9d272cc070ffafb67da7a4b5e","modified":1541081216912},{"_id":"source/_posts/20181101-git学习笔记.md","hash":"8c069116524705f5592277734a869a4604df92ec","modified":1541381418606},{"_id":"source/_posts/20181102-git提交规范.md","hash":"fd4470043cbfaca484b64e8005f30ab14fb02db3","modified":1541380265512},{"_id":"source/_posts/20181127-tesseract使用介绍.md","hash":"73fadb9d62aa4635412def33599a42cda7b47e0b","modified":1543398037345},{"_id":"source/_posts/20181203-文件格式的转换.md","hash":"71c3cc6f934d145aa1d97d37220d5d73a2bfb178","modified":1546851495904},{"_id":"source/_posts/20190123-docker基本命令.md","hash":"7f8c7c301501d5642523c45d8352f04854748fb7","modified":1552272843791},{"_id":"source/_posts/20190226-机器license控制.md","hash":"17bd6f3ebf6e7acd73c854ffd3f35010a5b325e1","modified":1551161589686},{"_id":"source/about/index.md","hash":"7179d47c76ef895d29f9ffc01b382d49d954be19","modified":1548226510383},{"_id":"source/resume/index.md","hash":"f951b101989b2c3b7471710b4e78fc4dbdfa0ca6","modified":1537407885070},{"_id":"themes/cactus/languages/ca.yml","hash":"b79dd2c21dc6697c635e92db1f661a4b8d5d2305","modified":1536852184531},{"_id":"themes/cactus/languages/default.yml","hash":"36e90b8405bbf08c68005573bfd6aed68ee47692","modified":1536892573685},{"_id":"themes/cactus/languages/en.yml","hash":"36e90b8405bbf08c68005573bfd6aed68ee47692","modified":1536892573685},{"_id":"themes/cactus/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1536852184531},{"_id":"themes/cactus/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1536852184531},{"_id":"themes/cactus/languages/fr.yml","hash":"4fea266d3c522903f3eee4fffee6e66c44775005","modified":1536852184531},{"_id":"themes/cactus/languages/it.yml","hash":"62800bcae1f2d2454f87f4bcf4d7593848424f61","modified":1536852184531},{"_id":"themes/cactus/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1536852184531},{"_id":"themes/cactus/languages/pt-br.yml","hash":"4859aba788a050c2d5d0b997693b0c8c24b349f7","modified":1536852184531},{"_id":"themes/cactus/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1536852184531},{"_id":"themes/cactus/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1536852184531},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"142004800bd580f8ee2f0eba7345c1725a5e2e5e","modified":1536852184531},{"_id":"themes/cactus/layout/archive.ejs","hash":"b5e70bd2780d044b94e22ce8af0afb114c2a6eae","modified":1536852184531},{"_id":"themes/cactus/layout/index.ejs","hash":"195a03a0003078454524b42c0b559bfae900964e","modified":1536892056030},{"_id":"themes/cactus/layout/layout.ejs","hash":"c041a48afff29e62b61d4539f8c492aee5cc3905","modified":1536852184535},{"_id":"themes/cactus/layout/page.ejs","hash":"d14964cac07f5db45d83af682a7924413f7dd3b6","modified":1536852184535},{"_id":"themes/cactus/layout/post.ejs","hash":"2731e597b5d1714a6f5a775c432e99785f02a3e3","modified":1536852184535},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1536852184535},{"_id":"source/_posts/20181119-线性与非线性总结.md","hash":"2d14e431558f9c3debc61219d93abce64a065120","modified":1543307237983},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1536852184535},{"_id":"themes/cactus/scripts/meta.js","hash":"fa6055a39851c9953d033e70c1614547b94dce60","modified":1536852184535},{"_id":"source/_posts/20180927-Python的实用的小技巧/f16935ad62e7db9560a61f4242ca212f.jpeg","hash":"35e17b1d45ea0857488d12c60a22a21f430c0af1","modified":1538295937284},{"_id":"source/_posts/20181101-git学习笔记/0.jpeg","hash":"9452cdd7f9ebbf71739bfdaeb562c7301f4379c0","modified":1541125103091},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"4cf8d0059e5f8bc8ae1dd1a426293583fd398052","modified":1536852184531},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"c3a80e347cb11022baf5e65fb4d0209b8d205693","modified":1536852184531},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"370bde5b6aa535da48f7a8d0753e9df0cc06b7c3","modified":1536852184531},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"9b2b7d6e9ab514107adf408c7ec8530fd612b3d5","modified":1536852184531},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1536852184531},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"5edc3296ccfed7f6eee2bba5acf772c964afb199","modified":1536852184531},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1536852184531},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"be1b54388eb02176dd4722285dda19e3dce2e62e","modified":1536852184531},{"_id":"themes/cactus/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1536852184539},{"_id":"themes/cactus/source/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1536852184539},{"_id":"themes/cactus/source/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1536852184539},{"_id":"themes/cactus/source/js/main.js","hash":"4659a6f4e3b988034c984cf81d16623d68624118","modified":1536852184543},{"_id":"themes/cactus/source/js/search.js","hash":"a74d0c601f820160825a2e4ad13618074d714933","modified":1536852184543},{"_id":"themes/cactus/source/css/_extend.styl","hash":"2ff73bd3dbdb58fa69cbadb2a1c0ed966812ce88","modified":1536852184535},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1536852184535},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1536852184539},{"_id":"themes/cactus/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1536852184539},{"_id":"themes/cactus/source/css/_variables.styl","hash":"02079fb71b7d1c01d15fa512a1948ad4cbb416b5","modified":1536852184539},{"_id":"themes/cactus/source/css/rtl.styl","hash":"98355abe9ef3a398a5b4cb40d3d33bf86ac8d1d4","modified":1536852184539},{"_id":"themes/cactus/source/css/style.styl","hash":"8bd2d082c13efd27fd5e4f4fe7d364ac8ef5cfe2","modified":1536852184539},{"_id":"source/_posts/20181031-vim笔记/4","hash":"f98c465e9c35b0a67882ab882c039ad6f6513bad","modified":1540969219018},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"38aadd1ed890303dde582b722486138afee09b0a","modified":1536852184531},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"79b234ff3c264e66b2e71c819228e62bf92b48e4","modified":1536852184531},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"12a4a7ba6334e3e5c03d9a9601d7779a27c2e082","modified":1536852184531},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1536852184531},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"847a400e79b775246ca9067e40c3f104d571413d","modified":1536852184531},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"e08fae30da060f49c087f6c121868b08eb55c795","modified":1536852184531},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1536852184531},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"37443d0040f0d7af381c955e4c15919a15d0349e","modified":1536852184587},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"0a257c8b60e0f20802c1dc8daeed2d3cb0d44f17","modified":1536852184587},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"df15fd1e74b6f4a50bea57e2b44d9627f38495b5","modified":1536852184591},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"62447a951d48b21c4696ae72df4bc4adef636e26","modified":1536852184591},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"32ae5c0d1d5943c8bb8e0f6ab07c3269c6f8b8a8","modified":1536852184591},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"ef07a250766fea840c1049e67c0405d9216ee0a8","modified":1536852184591},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"f5653059b2a5929516e4aab02329a978600b9b67","modified":1536852184595},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"668400ae92700965f03f2371faaee0ab8c8347c3","modified":1536852184595},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"ad4d46a99a1daf6353c86c79ac3a2b030213859c","modified":1536852184595},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"c3be79b553ec394db71268d604b1d29183b867dc","modified":1536852184595},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","hash":"bbee70033f0f5882e9869e417b69c6a38f56f187","modified":1536852184599},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","hash":"30ce165216db078951a690a6ad665b9b78f5dd81","modified":1536852184599},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","hash":"8f2bf6b59ae1f2ed4c2fead6cea4b8314fcf62e5","modified":1536852184599},{"_id":"source/_posts/20181031-vim笔记/3","hash":"c336241fe2705f1f50110e91cf5f032be23c30a4","modified":1540969224562},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"0f0ec41a4165814ce69688425d5ac4d701b7cc70","modified":1536852184535},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"9c9655b42b85f754b8a573a1d4634c23c680e1bf","modified":1536852184535},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"d09f781cb02394850737b3a9efc6693307d5bf09","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"4e7b6b046b8575ac749f6aec4e953a62ada27a36","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1536852184539},{"_id":"themes/cactus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1536852184539},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1536852184539},{"_id":"themes/cactus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1536852184539},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1536852184539},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1536852184539},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1536852184539},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1536852184539},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1536852184539},{"_id":"themes/cactus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1536852184539},{"_id":"themes/cactus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1536852184539},{"_id":"themes/cactus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1536852184539},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1536852184539},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"ef8fc52337c4c7b010cad7c427cb78009b30f9d8","modified":1536852184539},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"2c0569b6ba624160701e69688ca02ecdf24c2ac6","modified":1536852184539},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1536852184539},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"06ba26c13e6ab64de9d35a4470e543a7510042a7","modified":1536852184539},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"02fa5242f6d55b73b68992da585d801dceacbde3","modified":1536852184539},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"59c99f4ea3a73bf47ce030df166c5e33d5de31fb","modified":1536852184539},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1536852184539},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1536852184539},{"_id":"themes/cactus/source/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1536852184543},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1536852184535},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1536852184535},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"2b25ad24573bded8b42f9d80112eab9fadbed1a5","modified":1536852184535},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1536852184571},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"13d026ff857c853cbd0dc519b6e58669db309441","modified":1536852184587},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"594dc3344ad14903c247615427d1009709f0f5a4","modified":1536852184587},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"f76ec625e15522ff60d21f7a9a3b71c65bc27556","modified":1536852184591},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"2e6c9df9f775373fb1988ae8529aa8f05313dae6","modified":1536852184591},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"3edffd7bb61eee8cd46b57225f9f9e5264e3362b","modified":1536852184591},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"9f1e2934098a6a4a7c5584c8f3fa24a707070da3","modified":1536852184591},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"1f5a73db7947ef22c8a2bb19d6449b80496c03c4","modified":1536852184595},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"295f7e02c9b157e7ea63ad09613b00ceab85c5cd","modified":1536852184595},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"08e1503d1181188690fd9c81860d6c890c1465f6","modified":1536852184595},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"a6aa450ee6e0f85786474ca6b04827ef97e81af4","modified":1536852184595},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","hash":"31a9219c25fe1991fb745ec8dbbcf45c6094a702","modified":1536852184599},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","hash":"f22b219824026e490a581ddb3b36b07997dff0e3","modified":1536852184599},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","hash":"cf1a3fd771900af34f2af22142beecfb47367548","modified":1536852184543},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"d902f8db3e021155f177f698a252fb98d6e61768","modified":1536852184559},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"42ff503f20e97503cef8e5b2ec10ae07699d7c01","modified":1536852184559},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"c140085833a38abec6b7df99d4ccac93eb266031","modified":1536852184559},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"7b3f44b4d3028f3c87ddf0f4bd62511c9bf4a87e","modified":1536852184559},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"9784edb76f8a2ed595ea4bf74d46cda4eff3b303","modified":1536852184559},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"92da6e3c7121e21cdfde25ef08797a3937a683e1","modified":1536852184571},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1536852184571},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1536852184571},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"68a1f6b560a59cd375703d4ecfddac41c723a39f","modified":1536852184539},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1536852184539},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"644ece8263d2f96b087eebf7f6d4e309e5898eb5","modified":1536852184547},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"19e302760e39e25a5f8d90d6cd0164ef6cd74f8c","modified":1536852184555},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"f9d835a0f9248b1bb33d66968e87c4a50103ed8d","modified":1536852184559},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"80d33a73cbb60e206ef6f5c898988641576c7dda","modified":1536852184571},{"_id":"source/_posts/20181031-vim笔记/2","hash":"26901c65ddc4c975278446309b6be6395bc3d0eb","modified":1540969221754},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"33e86c0ad6fb9c5c0c8c2af4cb2d790c6b14a8aa","modified":1536852184559},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"10740942ec6b3f4985529d343402d0bf32f9f847","modified":1536852184563},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"c445864a9646948e0d7ff44930ad732ee61427d8","modified":1536852184571},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1536852184579},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1536852184583},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1536852184587},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1536852184583},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1536852184587},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1536852184587},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1536852184579},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1536852184583},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1536852184583},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1536852184587},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1536852184587},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1536852184587},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"b0bb9e6ac7709206b9510f1718516d89aead5b21","modified":1536852184555},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"ed6c1ed8f24df909f40fe5e5c652d7ff9570c821","modified":1536852184567},{"_id":"source/_posts/20181031-vim笔记/1","hash":"071b3258e5dde28cf50b30b280b5f3bec15061a4","modified":1540969187157}],"Category":[],"Data":[{"_id":"projects","data":[{"name":"extract_news","url":"https://github.com/hee0624/extract_news","desc":"Python package to parse news from various news website"}]}],"Page":[{"title":"About Me","date":"2017-03-15T15:36:05.000Z","type":"about","_content":"\nHi, I'm Chen He(陈贺) from [中科院软件研究所](https://www.iscas.ac.cn).\n你可以联系我通过 [Email](mailto:hee0624@163.com) or [Github](https://github.com/hee0624).\n\n## IT技能\n- 网络爬虫\n    1. 爬虫工具——Scrapy采集框架,requests,urllib数据采集\n    2. 爬虫策略——Ip轮训，User-Agent切换，Referer伪装\n    3. 异步加载——Spalsh/Selenium/Phantomjs渲染,用户点选拖拽交互\n    4. 抓包分析——BurpSuite渗透性工具,chrome开发者工具,EditThisCookie工具\n    5. 验证码识别——滑块验证码,字符验证码\n    6. APP爬虫——ADB,安卓模拟器,uiautomator2\n- 数据库\n    1. Elasticsearch–建立倒排索引,Ik分词,n-gram分词;Nested数组查询,短语搜索等\n    2. Mongodb\n    3. MySql–主从分离(基于MyCat)\n    4. hdfs–flum,kafka,hdfs\n- 机器学习/深度学习\n    1. 基于聚类技术自动化抽取资讯正文,避免了不同网站写不同的抽取模板。\n    2. 基于分类技术自动化识别资讯链接，加快了资讯采集速度。\n- 前端/后端/运维\n    1. Vue/Javascript/css–爬虫工程师往往都是一个前端工程师\n    2. Flask–独立开发了一个内部资讯管理系统\n    3. 熟悉docker应用部署\n\n\n## 个人简历\n\n我的简历:[个人简历](/resume/)\n​    <iframe src=\"https://hee0624.github.io/donate-page/simple/\" style=\"overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;\" frameborder=\"0\" scrolling=\"no\"></iframe>\n\n","source":"about/index.md","raw":"---\ntitle: About Me\ndate: 2017-03-15 23:36:05\ntype: \"about\"\n---\n\nHi, I'm Chen He(陈贺) from [中科院软件研究所](https://www.iscas.ac.cn).\n你可以联系我通过 [Email](mailto:hee0624@163.com) or [Github](https://github.com/hee0624).\n\n## IT技能\n- 网络爬虫\n    1. 爬虫工具——Scrapy采集框架,requests,urllib数据采集\n    2. 爬虫策略——Ip轮训，User-Agent切换，Referer伪装\n    3. 异步加载——Spalsh/Selenium/Phantomjs渲染,用户点选拖拽交互\n    4. 抓包分析——BurpSuite渗透性工具,chrome开发者工具,EditThisCookie工具\n    5. 验证码识别——滑块验证码,字符验证码\n    6. APP爬虫——ADB,安卓模拟器,uiautomator2\n- 数据库\n    1. Elasticsearch–建立倒排索引,Ik分词,n-gram分词;Nested数组查询,短语搜索等\n    2. Mongodb\n    3. MySql–主从分离(基于MyCat)\n    4. hdfs–flum,kafka,hdfs\n- 机器学习/深度学习\n    1. 基于聚类技术自动化抽取资讯正文,避免了不同网站写不同的抽取模板。\n    2. 基于分类技术自动化识别资讯链接，加快了资讯采集速度。\n- 前端/后端/运维\n    1. Vue/Javascript/css–爬虫工程师往往都是一个前端工程师\n    2. Flask–独立开发了一个内部资讯管理系统\n    3. 熟悉docker应用部署\n\n\n## 个人简历\n\n我的简历:[个人简历](/resume/)\n​    <iframe src=\"https://hee0624.github.io/donate-page/simple/\" style=\"overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;\" frameborder=\"0\" scrolling=\"no\"></iframe>\n\n","updated":"2019-01-23T06:55:10.383Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjttrlg9n000xow6x5ty3wbcn","content":"<p>Hi, I’m Chen He(陈贺) from <a href=\"https://www.iscas.ac.cn\" target=\"_blank\" rel=\"noopener\">中科院软件研究所</a>.<br>你可以联系我通过 <a href=\"mailto:hee0624@163.com\" target=\"_blank\" rel=\"noopener\">Email</a> or <a href=\"https://github.com/hee0624\" target=\"_blank\" rel=\"noopener\">Github</a>.</p>\n<h2 id=\"IT技能\"><a href=\"#IT技能\" class=\"headerlink\" title=\"IT技能\"></a>IT技能</h2><ul>\n<li>网络爬虫<ol>\n<li>爬虫工具——Scrapy采集框架,requests,urllib数据采集</li>\n<li>爬虫策略——Ip轮训，User-Agent切换，Referer伪装</li>\n<li>异步加载——Spalsh/Selenium/Phantomjs渲染,用户点选拖拽交互</li>\n<li>抓包分析——BurpSuite渗透性工具,chrome开发者工具,EditThisCookie工具</li>\n<li>验证码识别——滑块验证码,字符验证码</li>\n<li>APP爬虫——ADB,安卓模拟器,uiautomator2</li>\n</ol>\n</li>\n<li>数据库<ol>\n<li>Elasticsearch–建立倒排索引,Ik分词,n-gram分词;Nested数组查询,短语搜索等</li>\n<li>Mongodb</li>\n<li>MySql–主从分离(基于MyCat)</li>\n<li>hdfs–flum,kafka,hdfs</li>\n</ol>\n</li>\n<li>机器学习/深度学习<ol>\n<li>基于聚类技术自动化抽取资讯正文,避免了不同网站写不同的抽取模板。</li>\n<li>基于分类技术自动化识别资讯链接，加快了资讯采集速度。</li>\n</ol>\n</li>\n<li>前端/后端/运维<ol>\n<li>Vue/Javascript/css–爬虫工程师往往都是一个前端工程师</li>\n<li>Flask–独立开发了一个内部资讯管理系统</li>\n<li>熟悉docker应用部署</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"个人简历\"><a href=\"#个人简历\" class=\"headerlink\" title=\"个人简历\"></a>个人简历</h2><p>我的简历:<a href=\"/resume/\">个人简历</a><br>​    <iframe src=\"https://hee0624.github.io/donate-page/simple/\" style=\"overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;\" frameborder=\"0\" scrolling=\"no\"></iframe></p>\n","site":{"data":{"projects":[{"name":"extract_news","url":"https://github.com/hee0624/extract_news","desc":"Python package to parse news from various news website"}]}},"excerpt":"","more":"<p>Hi, I’m Chen He(陈贺) from <a href=\"https://www.iscas.ac.cn\" target=\"_blank\" rel=\"noopener\">中科院软件研究所</a>.<br>你可以联系我通过 <a href=\"mailto:hee0624@163.com\" target=\"_blank\" rel=\"noopener\">Email</a> or <a href=\"https://github.com/hee0624\" target=\"_blank\" rel=\"noopener\">Github</a>.</p>\n<h2 id=\"IT技能\"><a href=\"#IT技能\" class=\"headerlink\" title=\"IT技能\"></a>IT技能</h2><ul>\n<li>网络爬虫<ol>\n<li>爬虫工具——Scrapy采集框架,requests,urllib数据采集</li>\n<li>爬虫策略——Ip轮训，User-Agent切换，Referer伪装</li>\n<li>异步加载——Spalsh/Selenium/Phantomjs渲染,用户点选拖拽交互</li>\n<li>抓包分析——BurpSuite渗透性工具,chrome开发者工具,EditThisCookie工具</li>\n<li>验证码识别——滑块验证码,字符验证码</li>\n<li>APP爬虫——ADB,安卓模拟器,uiautomator2</li>\n</ol>\n</li>\n<li>数据库<ol>\n<li>Elasticsearch–建立倒排索引,Ik分词,n-gram分词;Nested数组查询,短语搜索等</li>\n<li>Mongodb</li>\n<li>MySql–主从分离(基于MyCat)</li>\n<li>hdfs–flum,kafka,hdfs</li>\n</ol>\n</li>\n<li>机器学习/深度学习<ol>\n<li>基于聚类技术自动化抽取资讯正文,避免了不同网站写不同的抽取模板。</li>\n<li>基于分类技术自动化识别资讯链接，加快了资讯采集速度。</li>\n</ol>\n</li>\n<li>前端/后端/运维<ol>\n<li>Vue/Javascript/css–爬虫工程师往往都是一个前端工程师</li>\n<li>Flask–独立开发了一个内部资讯管理系统</li>\n<li>熟悉docker应用部署</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"个人简历\"><a href=\"#个人简历\" class=\"headerlink\" title=\"个人简历\"></a>个人简历</h2><p>我的简历:<a href=\"/resume/\">个人简历</a><br>​    <iframe src=\"https://hee0624.github.io/donate-page/simple/\" style=\"overflow-x:hidden;overflow-y:hidden; border:0xp none #fff; min-height:240px; width:100%;\" frameborder=\"0\" scrolling=\"no\"></iframe></p>\n"},{"_content":"hello world!\n","source":"resume/index.md","raw":"hello world!\n","date":"2018-10-15T09:52:53.652Z","updated":"2018-09-20T01:44:45.070Z","path":"resume/index.html","title":"","comments":1,"layout":"page","_id":"cjttrlg9q000zow6xpvgxr15b","content":"<p>hello world!</p>\n","site":{"data":{"projects":[{"name":"extract_news","url":"https://github.com/hee0624/extract_news","desc":"Python package to parse news from various news website"}]}},"excerpt":"","more":"<p>hello world!</p>\n"}],"Post":[{"title":"python多版本开发","date":"2017-04-04T01:30:40.000Z","_content":"&emsp;&emsp;virtualenv用于创建独立的Python环境，多个Python相互独立，互不影响，它能够： \n\n1. 在没有权限的情况下安装新套件\n2. 不同应用可以使用不同的套件版本\n3. 套件升级不影响其他应用\n\n#### linux\n\n0. 安装virtualenv\n\n`sudo apt-get install python-virtualenv`\n\n1. 创建虚拟包\n\n\n\n```\n\nvirtualenv dir-name\n\nvirtualenv --python=/usr/bin/python2 dir-name\n\nvirtualenv --python=/usr/bin/python3 dir-name\n\n```\n\nvirtualenv --no-site-packages dir-name 不会复制第三方包\n\n\n\n2. 进入虚拟环境\n\n```\n\n$cd dir-name/bin\n\n$source activate\n\n```\n\n\n\n3. 退出虚拟环境\n\n```delactivate```\n\n\n\n4. 安装virtualenvwrapper\n\n\n\n>Virtaulenvwrapper是virtualenv的扩展包，用于更方便管理虚拟环境，它可以做：\n\n1. 将所有虚拟环境整合在一个目录下\n\n2. 管理（新增，删除，复制）虚拟环境\n\n3. 切换虚拟环境\n\n4. ...\n\n\n\n`sudo pip install virtualenvwrapper`\n\n\n\n&emsp;&emsp;此时还不能使用virtualenvwrapper，默认virtualenvwrapper安装在/usr/local/bin下面，实际上你需要运行virtualenvwrapper.sh文件才行，先别急，打开这个文件看看,里面有安装步骤，我们照着操作把环境设置好。\n\n\n\n创建目录用来存放虚拟环境\n\n\n\n```\n\nmkdir $HOME/.virtualenvs\n\n在~/.bashrc中添加行： export WORKON_HOME=$HOME/.virtualenvs\n\n在~/.bashrc中添加行：source /usr/local/bin/virtualenvwrapper.sh#(备注virtualenvwrapper.sh)\n\n运行： source ~/.bashrc\n\n```\n\n5. virtualenvwrapper 使用方法\n\n\n\n* 列出虚拟环境列表：`workon`或者`lsvirtualenv`\n\n* 新建虚拟环境：`mkvirtualenv [虚拟环境名称]`\n\n* 启动/切换虚拟环境：`workon [虚拟环境名称]`\n\n* 删除虚拟环境：`rmvirtualenv [虚拟环境名称]`\n\n* 离开虚拟环境：`deactivate`\n\n\n\n##### windows\n\n\n\n0. 安装virtualenv\n\n\n\npip install virtualenv\n\n\n\n1. 创建虚拟包\n\n```\n\nvirtualenv [dir-name]\n\nvirtualenv --python='D:\\Program Files\\python2.7\\python.exe' [dir-name]\n\nvirtualenv --python='D:\\Program Files\\python3.6\\python.exe' [dir-name]\n\n```\n\nvirtualenv --no-site-packages [dir-name] 不会复制第三方包\n\n\n\n2. 进入虚拟环境\n\n\n\n```\n\ncd dir-name/Scripts\n\n$activate.bat\n\n```\n\n\n\n3. 退出虚拟环境\n\n` deactivate` \n\n\n\n4. 安装virtualenvwrapper\n\n`pip install virtualenvwrapper-win`\n\n\n\n设置WORK_HOME环境变量\n\n\n\n![环境变量](pg\\20170404-1.png)\n\n\n\n5. virtualenvwrapper 使用方法\n\n\n\n* 列出虚拟环境列表：`workon`或者`lsvirtualenv`\n\n* 新建虚拟环境：`mkvirtualenv [虚拟环境名称]`\n\n* 启动/切换虚拟环境：`workon [虚拟环境名称]`\n\n* 删除虚拟环境：`rmvirtualenv [虚拟环境名称]`\n\n* 离开虚拟环境：`deactivate`\n","source":"_posts/20170404-python多版本开发.md","raw":"---\ntitle: python多版本开发\ndate: 2017-04-04 09:30:40\ntags: python 环境配置\n---\n&emsp;&emsp;virtualenv用于创建独立的Python环境，多个Python相互独立，互不影响，它能够： \n\n1. 在没有权限的情况下安装新套件\n2. 不同应用可以使用不同的套件版本\n3. 套件升级不影响其他应用\n\n#### linux\n\n0. 安装virtualenv\n\n`sudo apt-get install python-virtualenv`\n\n1. 创建虚拟包\n\n\n\n```\n\nvirtualenv dir-name\n\nvirtualenv --python=/usr/bin/python2 dir-name\n\nvirtualenv --python=/usr/bin/python3 dir-name\n\n```\n\nvirtualenv --no-site-packages dir-name 不会复制第三方包\n\n\n\n2. 进入虚拟环境\n\n```\n\n$cd dir-name/bin\n\n$source activate\n\n```\n\n\n\n3. 退出虚拟环境\n\n```delactivate```\n\n\n\n4. 安装virtualenvwrapper\n\n\n\n>Virtaulenvwrapper是virtualenv的扩展包，用于更方便管理虚拟环境，它可以做：\n\n1. 将所有虚拟环境整合在一个目录下\n\n2. 管理（新增，删除，复制）虚拟环境\n\n3. 切换虚拟环境\n\n4. ...\n\n\n\n`sudo pip install virtualenvwrapper`\n\n\n\n&emsp;&emsp;此时还不能使用virtualenvwrapper，默认virtualenvwrapper安装在/usr/local/bin下面，实际上你需要运行virtualenvwrapper.sh文件才行，先别急，打开这个文件看看,里面有安装步骤，我们照着操作把环境设置好。\n\n\n\n创建目录用来存放虚拟环境\n\n\n\n```\n\nmkdir $HOME/.virtualenvs\n\n在~/.bashrc中添加行： export WORKON_HOME=$HOME/.virtualenvs\n\n在~/.bashrc中添加行：source /usr/local/bin/virtualenvwrapper.sh#(备注virtualenvwrapper.sh)\n\n运行： source ~/.bashrc\n\n```\n\n5. virtualenvwrapper 使用方法\n\n\n\n* 列出虚拟环境列表：`workon`或者`lsvirtualenv`\n\n* 新建虚拟环境：`mkvirtualenv [虚拟环境名称]`\n\n* 启动/切换虚拟环境：`workon [虚拟环境名称]`\n\n* 删除虚拟环境：`rmvirtualenv [虚拟环境名称]`\n\n* 离开虚拟环境：`deactivate`\n\n\n\n##### windows\n\n\n\n0. 安装virtualenv\n\n\n\npip install virtualenv\n\n\n\n1. 创建虚拟包\n\n```\n\nvirtualenv [dir-name]\n\nvirtualenv --python='D:\\Program Files\\python2.7\\python.exe' [dir-name]\n\nvirtualenv --python='D:\\Program Files\\python3.6\\python.exe' [dir-name]\n\n```\n\nvirtualenv --no-site-packages [dir-name] 不会复制第三方包\n\n\n\n2. 进入虚拟环境\n\n\n\n```\n\ncd dir-name/Scripts\n\n$activate.bat\n\n```\n\n\n\n3. 退出虚拟环境\n\n` deactivate` \n\n\n\n4. 安装virtualenvwrapper\n\n`pip install virtualenvwrapper-win`\n\n\n\n设置WORK_HOME环境变量\n\n\n\n![环境变量](pg\\20170404-1.png)\n\n\n\n5. virtualenvwrapper 使用方法\n\n\n\n* 列出虚拟环境列表：`workon`或者`lsvirtualenv`\n\n* 新建虚拟环境：`mkvirtualenv [虚拟环境名称]`\n\n* 启动/切换虚拟环境：`workon [虚拟环境名称]`\n\n* 删除虚拟环境：`rmvirtualenv [虚拟环境名称]`\n\n* 离开虚拟环境：`deactivate`\n","slug":"20170404-python多版本开发","published":1,"updated":"2018-09-14T02:18:13.119Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjttrlg7m0000ow6x2y1598ev","content":"<p>&emsp;&emsp;virtualenv用于创建独立的Python环境，多个Python相互独立，互不影响，它能够： </p>\n<ol>\n<li>在没有权限的情况下安装新套件</li>\n<li>不同应用可以使用不同的套件版本</li>\n<li>套件升级不影响其他应用</li>\n</ol>\n<h4 id=\"linux\"><a href=\"#linux\" class=\"headerlink\" title=\"linux\"></a>linux</h4><ol>\n<li>安装virtualenv</li>\n</ol>\n<p><code>sudo apt-get install python-virtualenv</code></p>\n<ol>\n<li>创建虚拟包</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">virtualenv dir-name</span><br><span class=\"line\"></span><br><span class=\"line\">virtualenv --python=/usr/bin/python2 dir-name</span><br><span class=\"line\"></span><br><span class=\"line\">virtualenv --python=/usr/bin/python3 dir-name</span><br></pre></td></tr></table></figure>\n<p>virtualenv —no-site-packages dir-name 不会复制第三方包</p>\n<ol>\n<li>进入虚拟环境</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$cd dir-name/bin</span><br><span class=\"line\"></span><br><span class=\"line\">$source activate</span><br></pre></td></tr></table></figure>\n<ol>\n<li>退出虚拟环境</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">4. 安装virtualenvwrapper</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&gt;Virtaulenvwrapper是virtualenv的扩展包，用于更方便管理虚拟环境，它可以做：</span><br><span class=\"line\"></span><br><span class=\"line\">1. 将所有虚拟环境整合在一个目录下</span><br><span class=\"line\"></span><br><span class=\"line\">2. 管理（新增，删除，复制）虚拟环境</span><br><span class=\"line\"></span><br><span class=\"line\">3. 切换虚拟环境</span><br><span class=\"line\"></span><br><span class=\"line\">4. ...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">`sudo pip install virtualenvwrapper`</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&amp;emsp;&amp;emsp;此时还不能使用virtualenvwrapper，默认virtualenvwrapper安装在/usr/local/bin下面，实际上你需要运行virtualenvwrapper.sh文件才行，先别急，打开这个文件看看,里面有安装步骤，我们照着操作把环境设置好。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">创建目录用来存放虚拟环境</span><br></pre></td></tr></table></figure>\n<p>mkdir $HOME/.virtualenvs</p>\n<p>在~/.bashrc中添加行： export WORKON_HOME=$HOME/.virtualenvs</p>\n<p>在~/.bashrc中添加行：source /usr/local/bin/virtualenvwrapper.sh#(备注virtualenvwrapper.sh)</p>\n<p>运行： source ~/.bashrc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">5. virtualenvwrapper 使用方法</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">* 列出虚拟环境列表：`workon`或者`lsvirtualenv`</span><br><span class=\"line\"></span><br><span class=\"line\">* 新建虚拟环境：`mkvirtualenv [虚拟环境名称]`</span><br><span class=\"line\"></span><br><span class=\"line\">* 启动/切换虚拟环境：`workon [虚拟环境名称]`</span><br><span class=\"line\"></span><br><span class=\"line\">* 删除虚拟环境：`rmvirtualenv [虚拟环境名称]`</span><br><span class=\"line\"></span><br><span class=\"line\">* 离开虚拟环境：`deactivate`</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">##### windows</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">0. 安装virtualenv</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">pip install virtualenv</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">1. 创建虚拟包</span><br></pre></td></tr></table></figure>\n<p>virtualenv [dir-name]</p>\n<p>virtualenv —python=’D:\\Program Files\\python2.7\\python.exe’ [dir-name]</p>\n<p>virtualenv —python=’D:\\Program Files\\python3.6\\python.exe’ [dir-name]</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">virtualenv --no-site-packages [dir-name] 不会复制第三方包</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">2. 进入虚拟环境</span><br></pre></td></tr></table></figure>\n<p>cd dir-name/Scripts</p>\n<p>$activate.bat</p>\n<p>```</p>\n<ol>\n<li>退出虚拟环境</li>\n</ol>\n<p><code>deactivate</code> </p>\n<ol>\n<li>安装virtualenvwrapper</li>\n</ol>\n<p><code>pip install virtualenvwrapper-win</code></p>\n<p>设置WORK_HOME环境变量</p>\n<p><img src=\"/2017/04/04/20170404-python多版本开发/pg/20170404-1.png\" alt=\"环境变量\"></p>\n<ol>\n<li>virtualenvwrapper 使用方法</li>\n</ol>\n<ul>\n<li><p>列出虚拟环境列表：<code>workon</code>或者<code>lsvirtualenv</code></p>\n</li>\n<li><p>新建虚拟环境：<code>mkvirtualenv [虚拟环境名称]</code></p>\n</li>\n<li><p>启动/切换虚拟环境：<code>workon [虚拟环境名称]</code></p>\n</li>\n<li><p>删除虚拟环境：<code>rmvirtualenv [虚拟环境名称]</code></p>\n</li>\n<li><p>离开虚拟环境：<code>deactivate</code></p>\n</li>\n</ul>\n","site":{"data":{"projects":[{"name":"extract_news","url":"https://github.com/hee0624/extract_news","desc":"Python package to parse news from various news website"}]}},"excerpt":"","more":"<p>&emsp;&emsp;virtualenv用于创建独立的Python环境，多个Python相互独立，互不影响，它能够： </p>\n<ol>\n<li>在没有权限的情况下安装新套件</li>\n<li>不同应用可以使用不同的套件版本</li>\n<li>套件升级不影响其他应用</li>\n</ol>\n<h4 id=\"linux\"><a href=\"#linux\" class=\"headerlink\" title=\"linux\"></a>linux</h4><ol>\n<li>安装virtualenv</li>\n</ol>\n<p><code>sudo apt-get install python-virtualenv</code></p>\n<ol>\n<li>创建虚拟包</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">virtualenv dir-name</span><br><span class=\"line\"></span><br><span class=\"line\">virtualenv --python=/usr/bin/python2 dir-name</span><br><span class=\"line\"></span><br><span class=\"line\">virtualenv --python=/usr/bin/python3 dir-name</span><br></pre></td></tr></table></figure>\n<p>virtualenv —no-site-packages dir-name 不会复制第三方包</p>\n<ol>\n<li>进入虚拟环境</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$cd dir-name/bin</span><br><span class=\"line\"></span><br><span class=\"line\">$source activate</span><br></pre></td></tr></table></figure>\n<ol>\n<li>退出虚拟环境</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">4. 安装virtualenvwrapper</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&gt;Virtaulenvwrapper是virtualenv的扩展包，用于更方便管理虚拟环境，它可以做：</span><br><span class=\"line\"></span><br><span class=\"line\">1. 将所有虚拟环境整合在一个目录下</span><br><span class=\"line\"></span><br><span class=\"line\">2. 管理（新增，删除，复制）虚拟环境</span><br><span class=\"line\"></span><br><span class=\"line\">3. 切换虚拟环境</span><br><span class=\"line\"></span><br><span class=\"line\">4. ...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">`sudo pip install virtualenvwrapper`</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&amp;emsp;&amp;emsp;此时还不能使用virtualenvwrapper，默认virtualenvwrapper安装在/usr/local/bin下面，实际上你需要运行virtualenvwrapper.sh文件才行，先别急，打开这个文件看看,里面有安装步骤，我们照着操作把环境设置好。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">创建目录用来存放虚拟环境</span><br></pre></td></tr></table></figure>\n<p>mkdir $HOME/.virtualenvs</p>\n<p>在~/.bashrc中添加行： export WORKON_HOME=$HOME/.virtualenvs</p>\n<p>在~/.bashrc中添加行：source /usr/local/bin/virtualenvwrapper.sh#(备注virtualenvwrapper.sh)</p>\n<p>运行： source ~/.bashrc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">5. virtualenvwrapper 使用方法</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">* 列出虚拟环境列表：`workon`或者`lsvirtualenv`</span><br><span class=\"line\"></span><br><span class=\"line\">* 新建虚拟环境：`mkvirtualenv [虚拟环境名称]`</span><br><span class=\"line\"></span><br><span class=\"line\">* 启动/切换虚拟环境：`workon [虚拟环境名称]`</span><br><span class=\"line\"></span><br><span class=\"line\">* 删除虚拟环境：`rmvirtualenv [虚拟环境名称]`</span><br><span class=\"line\"></span><br><span class=\"line\">* 离开虚拟环境：`deactivate`</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">##### windows</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">0. 安装virtualenv</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">pip install virtualenv</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">1. 创建虚拟包</span><br></pre></td></tr></table></figure>\n<p>virtualenv [dir-name]</p>\n<p>virtualenv —python=’D:\\Program Files\\python2.7\\python.exe’ [dir-name]</p>\n<p>virtualenv —python=’D:\\Program Files\\python3.6\\python.exe’ [dir-name]</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">virtualenv --no-site-packages [dir-name] 不会复制第三方包</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">2. 进入虚拟环境</span><br></pre></td></tr></table></figure>\n<p>cd dir-name/Scripts</p>\n<p>$activate.bat</p>\n<p>```</p>\n<ol>\n<li>退出虚拟环境</li>\n</ol>\n<p><code>deactivate</code> </p>\n<ol>\n<li>安装virtualenvwrapper</li>\n</ol>\n<p><code>pip install virtualenvwrapper-win</code></p>\n<p>设置WORK_HOME环境变量</p>\n<p><img src=\"/2017/04/04/20170404-python多版本开发/pg/20170404-1.png\" alt=\"环境变量\"></p>\n<ol>\n<li>virtualenvwrapper 使用方法</li>\n</ol>\n<ul>\n<li><p>列出虚拟环境列表：<code>workon</code>或者<code>lsvirtualenv</code></p>\n</li>\n<li><p>新建虚拟环境：<code>mkvirtualenv [虚拟环境名称]</code></p>\n</li>\n<li><p>启动/切换虚拟环境：<code>workon [虚拟环境名称]</code></p>\n</li>\n<li><p>删除虚拟环境：<code>rmvirtualenv [虚拟环境名称]</code></p>\n</li>\n<li><p>离开虚拟环境：<code>deactivate</code></p>\n</li>\n</ul>\n"},{"title":"字符串验证码的识别与破解","date":"2017-04-27T01:19:36.000Z","_content":"&emsp;&emsp;字符串验证码是指包含有一串数字或其它字符的一幅图片，图片里加上一些干扰项。字符串验证码的破解主要分为以下几步：**图像分割**，**去除噪点**，**分割字符串**，**识别字符**\n\n##### step1:图像分割\n&emsp;&emsp;将验证码的目标从背景中分离出来。图像阈值化分割是一种常见的分割算法，其基本原理是通过设定不同的特征阈值，把图像像素点分成若干个类。（图像二值化）\n&emsp;&emsp;**阈值分割算法：**\n\n- 分位数法\n- 最大类间方差法二值化\n- 最小误差阈值二值化\n- 熵方法\n- 最小偏态法\n- 矩量保持法\n\n##### step2:去除噪点\n&emsp;&emsp;阈值二值化之后，有些验证码还有噪点，需要处理掉这些噪点。\n&emsp;&emsp;**去除噪点算法**\n\n- 去除孤立点(dotNeighbors一般设定5左右）\n（1）遍历图片，当遇到黑色像素时，检查黑色像素周围8个联通区域的白色像素点的个数count。\n（2）如果白色像素点的个数count>=阈值，则将黑色像素点改成白色像素点。\n```python\nfor w in range(p.Width):\n\tfor h in range(p.Height):\n    \tcount = 0\n        if p.getpixel(w, h) == 0: # 黑白二值化后，黑色为0，白色为1\n        \tfow x in [-1, 0, 1]:\n            \tfor y in [-1, 0, 1]:\n                \t# 如果是边界\n                \tif w+x<0 or h+y<0 or w+x>=p.Width or h+y>=p.Height:\n                    \tcount += 1\n                    else: \n                    \tif p.getpixel(w+x,h+y) == 1:\n                        \tcount += 1\n        if count>= dotNeighbors:\n        \tp.setpixel(w,h,255)\n```\n\n- 膨胀与腐蚀\n&emsp;&emsp;区域边界点是它的一个领域中既有对象点，又有背景点。内边界点是本点为对象点，但领域中有背景点。外边界点是本点为背景点，但领域中有对象点。内边界点与外边界点是紧挨在一起的两层像素，它们总和称为形态学边界。腐蚀运算是把区域的内边界点变成背景，使区域缩小一圈；膨胀运算是将区域的外边界变成对象点，使区域扩大一圈。腐蚀运算施行于对象像素，膨胀运算施行于背景像素。可以使用4联通或者8联通边界腐蚀去燥。\n4联通边界\n\n| |+| |\n|-|-|-|\n|+| |+|\n| |+| |\n8连通边界\n\n|+|+|+|\n|-|-|-|\n|+| |+|\n|+|+|+|\n\n- 中值滤波\n- 连通去噪\n\n##### step3:分割字符串\n&emsp;&emsp;字符串分割是是获得较高字符串识别率的条件之一。\n&emsp;&emsp;**分割字符串算法**\n（1）垂直投影字符分割算法\n（2）上下边界投影法\n（3）模板匹配字符分割算法\n（4）聚类分析字符分割法\n（5）联通切割法\n（6）笔段组合法\n（7）基于颜色空间的分割\n##### step4:识别字符\nknn算法\n","source":"_posts/20170427-字符串验证码的识别与破解.md","raw":"---\ntitle: 字符串验证码的识别与破解\ndate: 2017-04-27 09:19:36\ntags: 验证码\n---\n&emsp;&emsp;字符串验证码是指包含有一串数字或其它字符的一幅图片，图片里加上一些干扰项。字符串验证码的破解主要分为以下几步：**图像分割**，**去除噪点**，**分割字符串**，**识别字符**\n\n##### step1:图像分割\n&emsp;&emsp;将验证码的目标从背景中分离出来。图像阈值化分割是一种常见的分割算法，其基本原理是通过设定不同的特征阈值，把图像像素点分成若干个类。（图像二值化）\n&emsp;&emsp;**阈值分割算法：**\n\n- 分位数法\n- 最大类间方差法二值化\n- 最小误差阈值二值化\n- 熵方法\n- 最小偏态法\n- 矩量保持法\n\n##### step2:去除噪点\n&emsp;&emsp;阈值二值化之后，有些验证码还有噪点，需要处理掉这些噪点。\n&emsp;&emsp;**去除噪点算法**\n\n- 去除孤立点(dotNeighbors一般设定5左右）\n（1）遍历图片，当遇到黑色像素时，检查黑色像素周围8个联通区域的白色像素点的个数count。\n（2）如果白色像素点的个数count>=阈值，则将黑色像素点改成白色像素点。\n```python\nfor w in range(p.Width):\n\tfor h in range(p.Height):\n    \tcount = 0\n        if p.getpixel(w, h) == 0: # 黑白二值化后，黑色为0，白色为1\n        \tfow x in [-1, 0, 1]:\n            \tfor y in [-1, 0, 1]:\n                \t# 如果是边界\n                \tif w+x<0 or h+y<0 or w+x>=p.Width or h+y>=p.Height:\n                    \tcount += 1\n                    else: \n                    \tif p.getpixel(w+x,h+y) == 1:\n                        \tcount += 1\n        if count>= dotNeighbors:\n        \tp.setpixel(w,h,255)\n```\n\n- 膨胀与腐蚀\n&emsp;&emsp;区域边界点是它的一个领域中既有对象点，又有背景点。内边界点是本点为对象点，但领域中有背景点。外边界点是本点为背景点，但领域中有对象点。内边界点与外边界点是紧挨在一起的两层像素，它们总和称为形态学边界。腐蚀运算是把区域的内边界点变成背景，使区域缩小一圈；膨胀运算是将区域的外边界变成对象点，使区域扩大一圈。腐蚀运算施行于对象像素，膨胀运算施行于背景像素。可以使用4联通或者8联通边界腐蚀去燥。\n4联通边界\n\n| |+| |\n|-|-|-|\n|+| |+|\n| |+| |\n8连通边界\n\n|+|+|+|\n|-|-|-|\n|+| |+|\n|+|+|+|\n\n- 中值滤波\n- 连通去噪\n\n##### step3:分割字符串\n&emsp;&emsp;字符串分割是是获得较高字符串识别率的条件之一。\n&emsp;&emsp;**分割字符串算法**\n（1）垂直投影字符分割算法\n（2）上下边界投影法\n（3）模板匹配字符分割算法\n（4）聚类分析字符分割法\n（5）联通切割法\n（6）笔段组合法\n（7）基于颜色空间的分割\n##### step4:识别字符\nknn算法\n","slug":"20170427-字符串验证码的识别与破解","published":1,"updated":"2018-09-14T02:18:57.943Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjttrlg7t0001ow6x73i2jh6r","content":"<p>&emsp;&emsp;字符串验证码是指包含有一串数字或其它字符的一幅图片，图片里加上一些干扰项。字符串验证码的破解主要分为以下几步：<strong>图像分割</strong>，<strong>去除噪点</strong>，<strong>分割字符串</strong>，<strong>识别字符</strong></p>\n<h5 id=\"step1-图像分割\"><a href=\"#step1-图像分割\" class=\"headerlink\" title=\"step1:图像分割\"></a>step1:图像分割</h5><p>&emsp;&emsp;将验证码的目标从背景中分离出来。图像阈值化分割是一种常见的分割算法，其基本原理是通过设定不同的特征阈值，把图像像素点分成若干个类。（图像二值化）<br>&emsp;&emsp;<strong>阈值分割算法：</strong></p>\n<ul>\n<li>分位数法</li>\n<li>最大类间方差法二值化</li>\n<li>最小误差阈值二值化</li>\n<li>熵方法</li>\n<li>最小偏态法</li>\n<li>矩量保持法</li>\n</ul>\n<h5 id=\"step2-去除噪点\"><a href=\"#step2-去除噪点\" class=\"headerlink\" title=\"step2:去除噪点\"></a>step2:去除噪点</h5><p>&emsp;&emsp;阈值二值化之后，有些验证码还有噪点，需要处理掉这些噪点。<br>&emsp;&emsp;<strong>去除噪点算法</strong></p>\n<ul>\n<li><p>去除孤立点(dotNeighbors一般设定5左右）<br>（1）遍历图片，当遇到黑色像素时，检查黑色像素周围8个联通区域的白色像素点的个数count。<br>（2）如果白色像素点的个数count&gt;=阈值，则将黑色像素点改成白色像素点。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> range(p.Width):</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> h <span class=\"keyword\">in</span> range(p.Height):</span><br><span class=\"line\">    \tcount = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> p.getpixel(w, h) == <span class=\"number\">0</span>: <span class=\"comment\"># 黑白二值化后，黑色为0，白色为1</span></span><br><span class=\"line\">        \tfow x <span class=\"keyword\">in</span> [<span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]:</span><br><span class=\"line\">            \t<span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> [<span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]:</span><br><span class=\"line\">                \t<span class=\"comment\"># 如果是边界</span></span><br><span class=\"line\">                \t<span class=\"keyword\">if</span> w+x&lt;<span class=\"number\">0</span> <span class=\"keyword\">or</span> h+y&lt;<span class=\"number\">0</span> <span class=\"keyword\">or</span> w+x&gt;=p.Width <span class=\"keyword\">or</span> h+y&gt;=p.Height:</span><br><span class=\"line\">                    \tcount += <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span>: </span><br><span class=\"line\">                    \t<span class=\"keyword\">if</span> p.getpixel(w+x,h+y) == <span class=\"number\">1</span>:</span><br><span class=\"line\">                        \tcount += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> count&gt;= dotNeighbors:</span><br><span class=\"line\">        \tp.setpixel(w,h,<span class=\"number\">255</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>膨胀与腐蚀<br>&emsp;&emsp;区域边界点是它的一个领域中既有对象点，又有背景点。内边界点是本点为对象点，但领域中有背景点。外边界点是本点为背景点，但领域中有对象点。内边界点与外边界点是紧挨在一起的两层像素，它们总和称为形态学边界。腐蚀运算是把区域的内边界点变成背景，使区域缩小一圈；膨胀运算是将区域的外边界变成对象点，使区域扩大一圈。腐蚀运算施行于对象像素，膨胀运算施行于背景像素。可以使用4联通或者8联通边界腐蚀去燥。<br>4联通边界</p>\n</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>+</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td></td>\n<td>+</td>\n</tr>\n<tr>\n<td></td>\n<td>+</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>8连通边界</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>+</th>\n<th>+</th>\n<th>+</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td></td>\n<td>+</td>\n</tr>\n<tr>\n<td>+</td>\n<td>+</td>\n<td>+</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li>中值滤波</li>\n<li>连通去噪</li>\n</ul>\n<h5 id=\"step3-分割字符串\"><a href=\"#step3-分割字符串\" class=\"headerlink\" title=\"step3:分割字符串\"></a>step3:分割字符串</h5><p>&emsp;&emsp;字符串分割是是获得较高字符串识别率的条件之一。<br>&emsp;&emsp;<strong>分割字符串算法</strong><br>（1）垂直投影字符分割算法<br>（2）上下边界投影法<br>（3）模板匹配字符分割算法<br>（4）聚类分析字符分割法<br>（5）联通切割法<br>（6）笔段组合法<br>（7）基于颜色空间的分割</p>\n<h5 id=\"step4-识别字符\"><a href=\"#step4-识别字符\" class=\"headerlink\" title=\"step4:识别字符\"></a>step4:识别字符</h5><p>knn算法</p>\n","site":{"data":{"projects":[{"name":"extract_news","url":"https://github.com/hee0624/extract_news","desc":"Python package to parse news from various news website"}]}},"excerpt":"","more":"<p>&emsp;&emsp;字符串验证码是指包含有一串数字或其它字符的一幅图片，图片里加上一些干扰项。字符串验证码的破解主要分为以下几步：<strong>图像分割</strong>，<strong>去除噪点</strong>，<strong>分割字符串</strong>，<strong>识别字符</strong></p>\n<h5 id=\"step1-图像分割\"><a href=\"#step1-图像分割\" class=\"headerlink\" title=\"step1:图像分割\"></a>step1:图像分割</h5><p>&emsp;&emsp;将验证码的目标从背景中分离出来。图像阈值化分割是一种常见的分割算法，其基本原理是通过设定不同的特征阈值，把图像像素点分成若干个类。（图像二值化）<br>&emsp;&emsp;<strong>阈值分割算法：</strong></p>\n<ul>\n<li>分位数法</li>\n<li>最大类间方差法二值化</li>\n<li>最小误差阈值二值化</li>\n<li>熵方法</li>\n<li>最小偏态法</li>\n<li>矩量保持法</li>\n</ul>\n<h5 id=\"step2-去除噪点\"><a href=\"#step2-去除噪点\" class=\"headerlink\" title=\"step2:去除噪点\"></a>step2:去除噪点</h5><p>&emsp;&emsp;阈值二值化之后，有些验证码还有噪点，需要处理掉这些噪点。<br>&emsp;&emsp;<strong>去除噪点算法</strong></p>\n<ul>\n<li><p>去除孤立点(dotNeighbors一般设定5左右）<br>（1）遍历图片，当遇到黑色像素时，检查黑色像素周围8个联通区域的白色像素点的个数count。<br>（2）如果白色像素点的个数count&gt;=阈值，则将黑色像素点改成白色像素点。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> range(p.Width):</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> h <span class=\"keyword\">in</span> range(p.Height):</span><br><span class=\"line\">    \tcount = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> p.getpixel(w, h) == <span class=\"number\">0</span>: <span class=\"comment\"># 黑白二值化后，黑色为0，白色为1</span></span><br><span class=\"line\">        \tfow x <span class=\"keyword\">in</span> [<span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]:</span><br><span class=\"line\">            \t<span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> [<span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]:</span><br><span class=\"line\">                \t<span class=\"comment\"># 如果是边界</span></span><br><span class=\"line\">                \t<span class=\"keyword\">if</span> w+x&lt;<span class=\"number\">0</span> <span class=\"keyword\">or</span> h+y&lt;<span class=\"number\">0</span> <span class=\"keyword\">or</span> w+x&gt;=p.Width <span class=\"keyword\">or</span> h+y&gt;=p.Height:</span><br><span class=\"line\">                    \tcount += <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">else</span>: </span><br><span class=\"line\">                    \t<span class=\"keyword\">if</span> p.getpixel(w+x,h+y) == <span class=\"number\">1</span>:</span><br><span class=\"line\">                        \tcount += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> count&gt;= dotNeighbors:</span><br><span class=\"line\">        \tp.setpixel(w,h,<span class=\"number\">255</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>膨胀与腐蚀<br>&emsp;&emsp;区域边界点是它的一个领域中既有对象点，又有背景点。内边界点是本点为对象点，但领域中有背景点。外边界点是本点为背景点，但领域中有对象点。内边界点与外边界点是紧挨在一起的两层像素，它们总和称为形态学边界。腐蚀运算是把区域的内边界点变成背景，使区域缩小一圈；膨胀运算是将区域的外边界变成对象点，使区域扩大一圈。腐蚀运算施行于对象像素，膨胀运算施行于背景像素。可以使用4联通或者8联通边界腐蚀去燥。<br>4联通边界</p>\n</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>+</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td></td>\n<td>+</td>\n</tr>\n<tr>\n<td></td>\n<td>+</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>8连通边界</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>+</th>\n<th>+</th>\n<th>+</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td></td>\n<td>+</td>\n</tr>\n<tr>\n<td>+</td>\n<td>+</td>\n<td>+</td>\n</tr>\n</tbody>\n</table>\n</div>\n<ul>\n<li>中值滤波</li>\n<li>连通去噪</li>\n</ul>\n<h5 id=\"step3-分割字符串\"><a href=\"#step3-分割字符串\" class=\"headerlink\" title=\"step3:分割字符串\"></a>step3:分割字符串</h5><p>&emsp;&emsp;字符串分割是是获得较高字符串识别率的条件之一。<br>&emsp;&emsp;<strong>分割字符串算法</strong><br>（1）垂直投影字符分割算法<br>（2）上下边界投影法<br>（3）模板匹配字符分割算法<br>（4）聚类分析字符分割法<br>（5）联通切割法<br>（6）笔段组合法<br>（7）基于颜色空间的分割</p>\n<h5 id=\"step4-识别字符\"><a href=\"#step4-识别字符\" class=\"headerlink\" title=\"step4:识别字符\"></a>step4:识别字符</h5><p>knn算法</p>\n"},{"title":"请求伪造","date":"2017-06-29T01:04:52.000Z","_content":"&emsp;&emsp;爬虫蜘蛛请求web网页时，一般Nginx,Apache等web服务器的日志会有请求信息User-Agent、Referer,Ip等信息。为了防止禁掉爬虫，我们可以通过伪造User-Agent、Referer、ip等来实现反爬功能。（下文作者将通过实例来说明）\n\n\n\n_ _ _\n\n\n\n```python\n\n#coding:utf-8\n\nimport requests\n\nimport sys\n\nreload(sys)\n\nsys.setdefaultencoding(\"utf-8\")\n\nresponse = requests.get(url=\"http://www.xiujinniu.com\")\n\n```\n\n当运行时，web日志会显示如下：（爬虫的IP和python脚本执行的请求）\n\n```nginx\n\n124.16.136.100 - - [01/Apr/2017:13:02:21 +0800] \"GET / HTTP/1.1\" 200 381 \"-\" \"python-requests/2.12.4\"\n\n```\n\n\n\n##### 伪造 User-Agent\n\nUser Agent中文名为用户代理，简称 UA，它是一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。一些网站常常通过判断 UA 来给不同的操作系统、不同的浏览器发送不同的页面，因此可能造成某些页面无法在某个浏览器中正常显示，但通过伪装 UA 可以绕过检测。\n\n```python\n\nheaders = {\n\n    \"User-Agent\":\"Mozilla/4.0 (compatible; MSIE 6.0; AOL 9.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2)\"\n\n}\n\nresponse = requests.get(url=\"http://www.xiujinniu.com\",headers=headers)\n\n```\n\nweb日志显示\n\n```nginx\n\n124.16.136.100 - - [01/Apr/2017:13:10:26 +0800] \"GET / HTTP/1.1\" 200 381 \"-\" \"Mozilla/4.0 (compatible; MSIE 6.0; AOL 9.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2)\"\n\n```\n\n##### 伪造 Referer\n\nHTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的，服务器藉此可以获得一些信息用于处理。比如从我主页上链接到一个朋友那里，他的服务器就能够从HTTP Referer中统计出每天有多少用户点击我主页上的链接访问他的网站。\n\n```python\n\nheaders = {\n\n    \"Referer\":\"https://www.baidu.com\"\n\n}\n\nresponse = requests.get(url=\"http://www.xiujinniu.com\",headers=headers)\n\n```\n\nweb日志显示\n\n```nginx\n\n124.16.136.100 - - [01/Apr/2017:13:14:35 +0800] \"GET / HTTP/1.1\" 200 381 \"https://www.baidu.com\" \"python-requests/2.12.4\"\n\n```\n\n##### 伪造 IP\n\n当爬虫蜘蛛请求web时，web服务器会显示发送请求的原始IP，我们可以将挂代理来防止本地IP被禁。\n\n```python\n\nproxies = {\n\n    \"http\": \"http://124.88.67.32:81\",\n\n    \"https\": \"http://124.88.67.32:81\"\n\n}\n\nresponse = requests.get(url=\"http://www.xiujinniu.com\",proxies=proxies)\n\n```\n\nweb日志显示\n\n```nginx\n\n124.88.67.32 - - [01/Apr/2017:13:16:25 +0800] \"GET http://www.xiujinniu.com/ HTTP/1.1\" 200 381 \"-\" \"python-requests/2.12.4\"\n\n```\n\n### 总结\n\n为了防止爬虫被禁可以将ip,referer,user-agent同时写入爬虫，这样web就无法判断该请求是否是爬虫发起。\n","source":"_posts/20170629-请求伪造.md","raw":"---\ntitle: 请求伪造\ndate: 2017-06-29 09:04:52\ntags: 爬虫\n---\n&emsp;&emsp;爬虫蜘蛛请求web网页时，一般Nginx,Apache等web服务器的日志会有请求信息User-Agent、Referer,Ip等信息。为了防止禁掉爬虫，我们可以通过伪造User-Agent、Referer、ip等来实现反爬功能。（下文作者将通过实例来说明）\n\n\n\n_ _ _\n\n\n\n```python\n\n#coding:utf-8\n\nimport requests\n\nimport sys\n\nreload(sys)\n\nsys.setdefaultencoding(\"utf-8\")\n\nresponse = requests.get(url=\"http://www.xiujinniu.com\")\n\n```\n\n当运行时，web日志会显示如下：（爬虫的IP和python脚本执行的请求）\n\n```nginx\n\n124.16.136.100 - - [01/Apr/2017:13:02:21 +0800] \"GET / HTTP/1.1\" 200 381 \"-\" \"python-requests/2.12.4\"\n\n```\n\n\n\n##### 伪造 User-Agent\n\nUser Agent中文名为用户代理，简称 UA，它是一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。一些网站常常通过判断 UA 来给不同的操作系统、不同的浏览器发送不同的页面，因此可能造成某些页面无法在某个浏览器中正常显示，但通过伪装 UA 可以绕过检测。\n\n```python\n\nheaders = {\n\n    \"User-Agent\":\"Mozilla/4.0 (compatible; MSIE 6.0; AOL 9.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2)\"\n\n}\n\nresponse = requests.get(url=\"http://www.xiujinniu.com\",headers=headers)\n\n```\n\nweb日志显示\n\n```nginx\n\n124.16.136.100 - - [01/Apr/2017:13:10:26 +0800] \"GET / HTTP/1.1\" 200 381 \"-\" \"Mozilla/4.0 (compatible; MSIE 6.0; AOL 9.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2)\"\n\n```\n\n##### 伪造 Referer\n\nHTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的，服务器藉此可以获得一些信息用于处理。比如从我主页上链接到一个朋友那里，他的服务器就能够从HTTP Referer中统计出每天有多少用户点击我主页上的链接访问他的网站。\n\n```python\n\nheaders = {\n\n    \"Referer\":\"https://www.baidu.com\"\n\n}\n\nresponse = requests.get(url=\"http://www.xiujinniu.com\",headers=headers)\n\n```\n\nweb日志显示\n\n```nginx\n\n124.16.136.100 - - [01/Apr/2017:13:14:35 +0800] \"GET / HTTP/1.1\" 200 381 \"https://www.baidu.com\" \"python-requests/2.12.4\"\n\n```\n\n##### 伪造 IP\n\n当爬虫蜘蛛请求web时，web服务器会显示发送请求的原始IP，我们可以将挂代理来防止本地IP被禁。\n\n```python\n\nproxies = {\n\n    \"http\": \"http://124.88.67.32:81\",\n\n    \"https\": \"http://124.88.67.32:81\"\n\n}\n\nresponse = requests.get(url=\"http://www.xiujinniu.com\",proxies=proxies)\n\n```\n\nweb日志显示\n\n```nginx\n\n124.88.67.32 - - [01/Apr/2017:13:16:25 +0800] \"GET http://www.xiujinniu.com/ HTTP/1.1\" 200 381 \"-\" \"python-requests/2.12.4\"\n\n```\n\n### 总结\n\n为了防止爬虫被禁可以将ip,referer,user-agent同时写入爬虫，这样web就无法判断该请求是否是爬虫发起。\n","slug":"20170629-请求伪造","published":1,"updated":"2018-09-14T02:19:17.112Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjttrlg800003ow6xll3hel2q","content":"<p>&emsp;&emsp;爬虫蜘蛛请求web网页时，一般Nginx,Apache等web服务器的日志会有请求信息User-Agent、Referer,Ip等信息。为了防止禁掉爬虫，我们可以通过伪造User-Agent、Referer、ip等来实现反爬功能。（下文作者将通过实例来说明）</p>\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\">reload(sys)</span><br><span class=\"line\"></span><br><span class=\"line\">sys.setdefaultencoding(<span class=\"string\">\"utf-8\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">response = requests.get(url=<span class=\"string\">\"http://www.xiujinniu.com\"</span>)</span><br></pre></td></tr></table></figure>\n<p>当运行时，web日志会显示如下：（爬虫的IP和python脚本执行的请求）</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">124.16.136.100 - - [01/Apr/2017:13:02:21 +0800] \"GET / HTTP/1.1\" 200 381 \"-\" \"python-requests/2.12.4\"</span><br></pre></td></tr></table></figure>\n<h5 id=\"伪造-User-Agent\"><a href=\"#伪造-User-Agent\" class=\"headerlink\" title=\"伪造 User-Agent\"></a>伪造 User-Agent</h5><p>User Agent中文名为用户代理，简称 UA，它是一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。一些网站常常通过判断 UA 来给不同的操作系统、不同的浏览器发送不同的页面，因此可能造成某些页面无法在某个浏览器中正常显示，但通过伪装 UA 可以绕过检测。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"User-Agent\"</span>:<span class=\"string\">\"Mozilla/4.0 (compatible; MSIE 6.0; AOL 9.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2)\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">response = requests.get(url=<span class=\"string\">\"http://www.xiujinniu.com\"</span>,headers=headers)</span><br></pre></td></tr></table></figure>\n<p>web日志显示</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">124.16.136.100 - - [01/Apr/2017:13:10:26 +0800] \"GET / HTTP/1.1\" 200 381 \"-\" \"Mozilla/4.0 (compatible; MSIE 6.0; AOL 9.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2)\"</span><br></pre></td></tr></table></figure>\n<h5 id=\"伪造-Referer\"><a href=\"#伪造-Referer\" class=\"headerlink\" title=\"伪造 Referer\"></a>伪造 Referer</h5><p>HTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的，服务器藉此可以获得一些信息用于处理。比如从我主页上链接到一个朋友那里，他的服务器就能够从HTTP Referer中统计出每天有多少用户点击我主页上的链接访问他的网站。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"Referer\"</span>:<span class=\"string\">\"https://www.baidu.com\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">response = requests.get(url=<span class=\"string\">\"http://www.xiujinniu.com\"</span>,headers=headers)</span><br></pre></td></tr></table></figure>\n<p>web日志显示</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">124.16.136.100 - - [01/Apr/2017:13:14:35 +0800] \"GET / HTTP/1.1\" 200 381 \"https://www.baidu.com\" \"python-requests/2.12.4\"</span><br></pre></td></tr></table></figure>\n<h5 id=\"伪造-IP\"><a href=\"#伪造-IP\" class=\"headerlink\" title=\"伪造 IP\"></a>伪造 IP</h5><p>当爬虫蜘蛛请求web时，web服务器会显示发送请求的原始IP，我们可以将挂代理来防止本地IP被禁。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">proxies = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"http\"</span>: <span class=\"string\">\"http://124.88.67.32:81\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"https\"</span>: <span class=\"string\">\"http://124.88.67.32:81\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">response = requests.get(url=<span class=\"string\">\"http://www.xiujinniu.com\"</span>,proxies=proxies)</span><br></pre></td></tr></table></figure>\n<p>web日志显示</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">124.88.67.32 - - [01/Apr/2017:13:16:25 +0800] \"GET http://www.xiujinniu.com/ HTTP/1.1\" 200 381 \"-\" \"python-requests/2.12.4\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>为了防止爬虫被禁可以将ip,referer,user-agent同时写入爬虫，这样web就无法判断该请求是否是爬虫发起。</p>\n","site":{"data":{"projects":[{"name":"extract_news","url":"https://github.com/hee0624/extract_news","desc":"Python package to parse news from various news website"}]}},"excerpt":"","more":"<p>&emsp;&emsp;爬虫蜘蛛请求web网页时，一般Nginx,Apache等web服务器的日志会有请求信息User-Agent、Referer,Ip等信息。为了防止禁掉爬虫，我们可以通过伪造User-Agent、Referer、ip等来实现反爬功能。（下文作者将通过实例来说明）</p>\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#coding:utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\">reload(sys)</span><br><span class=\"line\"></span><br><span class=\"line\">sys.setdefaultencoding(<span class=\"string\">\"utf-8\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">response = requests.get(url=<span class=\"string\">\"http://www.xiujinniu.com\"</span>)</span><br></pre></td></tr></table></figure>\n<p>当运行时，web日志会显示如下：（爬虫的IP和python脚本执行的请求）</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">124.16.136.100 - - [01/Apr/2017:13:02:21 +0800] \"GET / HTTP/1.1\" 200 381 \"-\" \"python-requests/2.12.4\"</span><br></pre></td></tr></table></figure>\n<h5 id=\"伪造-User-Agent\"><a href=\"#伪造-User-Agent\" class=\"headerlink\" title=\"伪造 User-Agent\"></a>伪造 User-Agent</h5><p>User Agent中文名为用户代理，简称 UA，它是一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。一些网站常常通过判断 UA 来给不同的操作系统、不同的浏览器发送不同的页面，因此可能造成某些页面无法在某个浏览器中正常显示，但通过伪装 UA 可以绕过检测。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"User-Agent\"</span>:<span class=\"string\">\"Mozilla/4.0 (compatible; MSIE 6.0; AOL 9.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2)\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">response = requests.get(url=<span class=\"string\">\"http://www.xiujinniu.com\"</span>,headers=headers)</span><br></pre></td></tr></table></figure>\n<p>web日志显示</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">124.16.136.100 - - [01/Apr/2017:13:10:26 +0800] \"GET / HTTP/1.1\" 200 381 \"-\" \"Mozilla/4.0 (compatible; MSIE 6.0; AOL 9.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2)\"</span><br></pre></td></tr></table></figure>\n<h5 id=\"伪造-Referer\"><a href=\"#伪造-Referer\" class=\"headerlink\" title=\"伪造 Referer\"></a>伪造 Referer</h5><p>HTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的，服务器藉此可以获得一些信息用于处理。比如从我主页上链接到一个朋友那里，他的服务器就能够从HTTP Referer中统计出每天有多少用户点击我主页上的链接访问他的网站。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"Referer\"</span>:<span class=\"string\">\"https://www.baidu.com\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">response = requests.get(url=<span class=\"string\">\"http://www.xiujinniu.com\"</span>,headers=headers)</span><br></pre></td></tr></table></figure>\n<p>web日志显示</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">124.16.136.100 - - [01/Apr/2017:13:14:35 +0800] \"GET / HTTP/1.1\" 200 381 \"https://www.baidu.com\" \"python-requests/2.12.4\"</span><br></pre></td></tr></table></figure>\n<h5 id=\"伪造-IP\"><a href=\"#伪造-IP\" class=\"headerlink\" title=\"伪造 IP\"></a>伪造 IP</h5><p>当爬虫蜘蛛请求web时，web服务器会显示发送请求的原始IP，我们可以将挂代理来防止本地IP被禁。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">proxies = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"http\"</span>: <span class=\"string\">\"http://124.88.67.32:81\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"https\"</span>: <span class=\"string\">\"http://124.88.67.32:81\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">response = requests.get(url=<span class=\"string\">\"http://www.xiujinniu.com\"</span>,proxies=proxies)</span><br></pre></td></tr></table></figure>\n<p>web日志显示</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">124.88.67.32 - - [01/Apr/2017:13:16:25 +0800] \"GET http://www.xiujinniu.com/ HTTP/1.1\" 200 381 \"-\" \"python-requests/2.12.4\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>为了防止爬虫被禁可以将ip,referer,user-agent同时写入爬虫，这样web就无法判断该请求是否是爬虫发起。</p>\n"},{"title":"mysql安装与主从配置","date":"2017-07-07T06:52:10.000Z","_content":"&emsp;&emsp;本文主要介绍了ubuntu14.04环境下，mysql的安装与配置。 \n\n\n环境：ubuntu14.04(两台机器)\nPC1（master）：192.168.80.130\nPC2（slave）：192.168.80.131\n#### mysql的安装\n```\nsudo apt-get update\nsudo apt-get install mysql-server mysql-client\n```\n#### mysql的基本配置\n&emsp;&emsp;在更改mysql配置之前，先停止mysql服务。`sudo /etc/init.d/mysql stop`\n1. mysql的远程访问\n修改配置文件中的bind-address 0.0.0.0\n`vim /etc/mysql/my.conf`\n2. mysql的存储地址变更\nsudo cp -R -p /var/lib/mysql /newpath\n`sudo vim /etc/apparmor.d/usr.sbin.mysqld`\n修改配置文件中datadir = /newpath\n重新载入apparmor服务`sudo /etc/init.d/apparmor reload`\n重启mysql`sudo /etc/init.d/mysql start`\n#### mysql的远程连接配置\n报错原因：\nERROR 1130 (HY000): Host '192.168.80.130' is not allowed to connect to this MySQL server\n解决方案：\n例如，你想myuser使用mypassword从任何主机连接到mysql服务器的话。\n`GRANT ALL PRIVILEGES ON *.* TO 'myuser'@'%' IDENTIFIED BY 'mypassword' WITH GRANT OPTION;`\n如果你想允许用户myuser从ip为192.168.1.3的主机连接到mysql服务器，并使用mypassword作为密码。\n`GRANT ALL PRIVILEGES ON *.* TO 'root'@'192.168.1.3' IDENTIFIED BY 'mypassword' WITH GRANT OPTION;`\n#### mysql的主从复制\nPC1（master）：192.168.80.131\nPC2（slave）：192.168.80.130\n\n\n- 主服务器操作\n-\n1. 配置主服务器 `vim /etc/mysql/my.conf`\n```\n[mysqld]\n1 server-id=1   //给数据库服务的唯一标识，一般为大家设置服务器Ip的末尾号\n2 log-bin=master-bin\n3 log-bin-index=master-bin.index\n```\n2. 启动mysql服务 \n```\n1 mysql>create user repl; //创建新用户\n2 //repl用户必须具有REPLICATION SLAVE权限，除此之外没有必要添加不必要的权限，密码为mysql。说明一下192.168.0.%，这个配置是指明repl用户所在服务器，这里%是通配符，表示192.168.0.0-192.168.0.255的Server都可以以repl用户登陆主服务器。当然你也可以指定固定Ip。\n3 mysql> GRANT REPLICATION SLAVE ON *.* TO 'repl'@'192.168.0.%' IDENTIFIED BY 'mysql';\n```\n3. 查看日志\n`mysql>  SHOW MASTER STATUS;`\n- 从服务器操作\n-\n1. 配置从服务器\n```\n1 [mysqld]\n2 server-id=2\n3 relay-log-index=slave-relay-bin.index\n4 relay-log=slave-relay-bin \n```\n2. 重启mysql\n3. 连接master\n```\nchange master to master_host='192.168.0.104', //Master 服务器Ip\nmaster_port=3306,\nmaster_user='repl',\nmaster_password='mysql', \nmaster_log_file='master-bin.000001',//Master服务器产生的日志\nmaster_log_pos=0;\n```\n4. 启动slave\n```start slave;```\n","source":"_posts/20170707-mysql配置与安装.md","raw":"---\ntitle: mysql安装与主从配置\ndate: 2017-07-07 14:52:10\ntags: mysql database\n---\n&emsp;&emsp;本文主要介绍了ubuntu14.04环境下，mysql的安装与配置。 \n\n\n环境：ubuntu14.04(两台机器)\nPC1（master）：192.168.80.130\nPC2（slave）：192.168.80.131\n#### mysql的安装\n```\nsudo apt-get update\nsudo apt-get install mysql-server mysql-client\n```\n#### mysql的基本配置\n&emsp;&emsp;在更改mysql配置之前，先停止mysql服务。`sudo /etc/init.d/mysql stop`\n1. mysql的远程访问\n修改配置文件中的bind-address 0.0.0.0\n`vim /etc/mysql/my.conf`\n2. mysql的存储地址变更\nsudo cp -R -p /var/lib/mysql /newpath\n`sudo vim /etc/apparmor.d/usr.sbin.mysqld`\n修改配置文件中datadir = /newpath\n重新载入apparmor服务`sudo /etc/init.d/apparmor reload`\n重启mysql`sudo /etc/init.d/mysql start`\n#### mysql的远程连接配置\n报错原因：\nERROR 1130 (HY000): Host '192.168.80.130' is not allowed to connect to this MySQL server\n解决方案：\n例如，你想myuser使用mypassword从任何主机连接到mysql服务器的话。\n`GRANT ALL PRIVILEGES ON *.* TO 'myuser'@'%' IDENTIFIED BY 'mypassword' WITH GRANT OPTION;`\n如果你想允许用户myuser从ip为192.168.1.3的主机连接到mysql服务器，并使用mypassword作为密码。\n`GRANT ALL PRIVILEGES ON *.* TO 'root'@'192.168.1.3' IDENTIFIED BY 'mypassword' WITH GRANT OPTION;`\n#### mysql的主从复制\nPC1（master）：192.168.80.131\nPC2（slave）：192.168.80.130\n\n\n- 主服务器操作\n-\n1. 配置主服务器 `vim /etc/mysql/my.conf`\n```\n[mysqld]\n1 server-id=1   //给数据库服务的唯一标识，一般为大家设置服务器Ip的末尾号\n2 log-bin=master-bin\n3 log-bin-index=master-bin.index\n```\n2. 启动mysql服务 \n```\n1 mysql>create user repl; //创建新用户\n2 //repl用户必须具有REPLICATION SLAVE权限，除此之外没有必要添加不必要的权限，密码为mysql。说明一下192.168.0.%，这个配置是指明repl用户所在服务器，这里%是通配符，表示192.168.0.0-192.168.0.255的Server都可以以repl用户登陆主服务器。当然你也可以指定固定Ip。\n3 mysql> GRANT REPLICATION SLAVE ON *.* TO 'repl'@'192.168.0.%' IDENTIFIED BY 'mysql';\n```\n3. 查看日志\n`mysql>  SHOW MASTER STATUS;`\n- 从服务器操作\n-\n1. 配置从服务器\n```\n1 [mysqld]\n2 server-id=2\n3 relay-log-index=slave-relay-bin.index\n4 relay-log=slave-relay-bin \n```\n2. 重启mysql\n3. 连接master\n```\nchange master to master_host='192.168.0.104', //Master 服务器Ip\nmaster_port=3306,\nmaster_user='repl',\nmaster_password='mysql', \nmaster_log_file='master-bin.000001',//Master服务器产生的日志\nmaster_log_pos=0;\n```\n4. 启动slave\n```start slave;```\n","slug":"20170707-mysql配置与安装","published":1,"updated":"2018-09-14T02:18:01.427Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjttrlg820004ow6xw4mjab20","content":"<p>&emsp;&emsp;本文主要介绍了ubuntu14.04环境下，mysql的安装与配置。 </p>\n<p>环境：ubuntu14.04(两台机器)<br>PC1（master）：192.168.80.130<br>PC2（slave）：192.168.80.131</p>\n<h4 id=\"mysql的安装\"><a href=\"#mysql的安装\" class=\"headerlink\" title=\"mysql的安装\"></a>mysql的安装</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install mysql-server mysql-client</span><br></pre></td></tr></table></figure>\n<h4 id=\"mysql的基本配置\"><a href=\"#mysql的基本配置\" class=\"headerlink\" title=\"mysql的基本配置\"></a>mysql的基本配置</h4><p>&emsp;&emsp;在更改mysql配置之前，先停止mysql服务。<code>sudo /etc/init.d/mysql stop</code></p>\n<ol>\n<li>mysql的远程访问<br>修改配置文件中的bind-address 0.0.0.0<br><code>vim /etc/mysql/my.conf</code></li>\n<li>mysql的存储地址变更<br>sudo cp -R -p /var/lib/mysql /newpath<br><code>sudo vim /etc/apparmor.d/usr.sbin.mysqld</code><br>修改配置文件中datadir = /newpath<br>重新载入apparmor服务<code>sudo /etc/init.d/apparmor reload</code><br>重启mysql<code>sudo /etc/init.d/mysql start</code><h4 id=\"mysql的远程连接配置\"><a href=\"#mysql的远程连接配置\" class=\"headerlink\" title=\"mysql的远程连接配置\"></a>mysql的远程连接配置</h4>报错原因：<br>ERROR 1130 (HY000): Host ‘192.168.80.130’ is not allowed to connect to this MySQL server<br>解决方案：<br>例如，你想myuser使用mypassword从任何主机连接到mysql服务器的话。<br><code>GRANT ALL PRIVILEGES ON *.* TO &#39;myuser&#39;@&#39;%&#39; IDENTIFIED BY &#39;mypassword&#39; WITH GRANT OPTION;</code><br>如果你想允许用户myuser从ip为192.168.1.3的主机连接到mysql服务器，并使用mypassword作为密码。<br><code>GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;192.168.1.3&#39; IDENTIFIED BY &#39;mypassword&#39; WITH GRANT OPTION;</code><h4 id=\"mysql的主从复制\"><a href=\"#mysql的主从复制\" class=\"headerlink\" title=\"mysql的主从复制\"></a>mysql的主从复制</h4>PC1（master）：192.168.80.131<br>PC2（slave）：192.168.80.130</li>\n</ol>\n<ul>\n<li>主服务器操作<br>-</li>\n</ul>\n<ol>\n<li><p>配置主服务器 <code>vim /etc/mysql/my.conf</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">1 server-id=1   //给数据库服务的唯一标识，一般为大家设置服务器Ip的末尾号</span><br><span class=\"line\">2 log-bin=master-bin</span><br><span class=\"line\">3 log-bin-index=master-bin.index</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动mysql服务 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 mysql&gt;create user repl; //创建新用户</span><br><span class=\"line\">2 //repl用户必须具有REPLICATION SLAVE权限，除此之外没有必要添加不必要的权限，密码为mysql。说明一下192.168.0.%，这个配置是指明repl用户所在服务器，这里%是通配符，表示192.168.0.0-192.168.0.255的Server都可以以repl用户登陆主服务器。当然你也可以指定固定Ip。</span><br><span class=\"line\">3 mysql&gt; GRANT REPLICATION SLAVE ON *.* TO &apos;repl&apos;@&apos;192.168.0.%&apos; IDENTIFIED BY &apos;mysql&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看日志<br><code>mysql&gt;  SHOW MASTER STATUS;</code></p>\n</li>\n</ol>\n<ul>\n<li>从服务器操作<br>-</li>\n</ul>\n<ol>\n<li><p>配置从服务器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 [mysqld]</span><br><span class=\"line\">2 server-id=2</span><br><span class=\"line\">3 relay-log-index=slave-relay-bin.index</span><br><span class=\"line\">4 relay-log=slave-relay-bin</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启mysql</p>\n</li>\n<li><p>连接master</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">change master to master_host=&apos;192.168.0.104&apos;, //Master 服务器Ip</span><br><span class=\"line\">master_port=3306,</span><br><span class=\"line\">master_user=&apos;repl&apos;,</span><br><span class=\"line\">master_password=&apos;mysql&apos;, </span><br><span class=\"line\">master_log_file=&apos;master-bin.000001&apos;,//Master服务器产生的日志</span><br><span class=\"line\">master_log_pos=0;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动slave<br><code>start slave;</code></p>\n</li>\n</ol>\n","site":{"data":{"projects":[{"name":"extract_news","url":"https://github.com/hee0624/extract_news","desc":"Python package to parse news from various news website"}]}},"excerpt":"","more":"<p>&emsp;&emsp;本文主要介绍了ubuntu14.04环境下，mysql的安装与配置。 </p>\n<p>环境：ubuntu14.04(两台机器)<br>PC1（master）：192.168.80.130<br>PC2（slave）：192.168.80.131</p>\n<h4 id=\"mysql的安装\"><a href=\"#mysql的安装\" class=\"headerlink\" title=\"mysql的安装\"></a>mysql的安装</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install mysql-server mysql-client</span><br></pre></td></tr></table></figure>\n<h4 id=\"mysql的基本配置\"><a href=\"#mysql的基本配置\" class=\"headerlink\" title=\"mysql的基本配置\"></a>mysql的基本配置</h4><p>&emsp;&emsp;在更改mysql配置之前，先停止mysql服务。<code>sudo /etc/init.d/mysql stop</code></p>\n<ol>\n<li>mysql的远程访问<br>修改配置文件中的bind-address 0.0.0.0<br><code>vim /etc/mysql/my.conf</code></li>\n<li>mysql的存储地址变更<br>sudo cp -R -p /var/lib/mysql /newpath<br><code>sudo vim /etc/apparmor.d/usr.sbin.mysqld</code><br>修改配置文件中datadir = /newpath<br>重新载入apparmor服务<code>sudo /etc/init.d/apparmor reload</code><br>重启mysql<code>sudo /etc/init.d/mysql start</code><h4 id=\"mysql的远程连接配置\"><a href=\"#mysql的远程连接配置\" class=\"headerlink\" title=\"mysql的远程连接配置\"></a>mysql的远程连接配置</h4>报错原因：<br>ERROR 1130 (HY000): Host ‘192.168.80.130’ is not allowed to connect to this MySQL server<br>解决方案：<br>例如，你想myuser使用mypassword从任何主机连接到mysql服务器的话。<br><code>GRANT ALL PRIVILEGES ON *.* TO &#39;myuser&#39;@&#39;%&#39; IDENTIFIED BY &#39;mypassword&#39; WITH GRANT OPTION;</code><br>如果你想允许用户myuser从ip为192.168.1.3的主机连接到mysql服务器，并使用mypassword作为密码。<br><code>GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;192.168.1.3&#39; IDENTIFIED BY &#39;mypassword&#39; WITH GRANT OPTION;</code><h4 id=\"mysql的主从复制\"><a href=\"#mysql的主从复制\" class=\"headerlink\" title=\"mysql的主从复制\"></a>mysql的主从复制</h4>PC1（master）：192.168.80.131<br>PC2（slave）：192.168.80.130</li>\n</ol>\n<ul>\n<li>主服务器操作<br>-</li>\n</ul>\n<ol>\n<li><p>配置主服务器 <code>vim /etc/mysql/my.conf</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">1 server-id=1   //给数据库服务的唯一标识，一般为大家设置服务器Ip的末尾号</span><br><span class=\"line\">2 log-bin=master-bin</span><br><span class=\"line\">3 log-bin-index=master-bin.index</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动mysql服务 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 mysql&gt;create user repl; //创建新用户</span><br><span class=\"line\">2 //repl用户必须具有REPLICATION SLAVE权限，除此之外没有必要添加不必要的权限，密码为mysql。说明一下192.168.0.%，这个配置是指明repl用户所在服务器，这里%是通配符，表示192.168.0.0-192.168.0.255的Server都可以以repl用户登陆主服务器。当然你也可以指定固定Ip。</span><br><span class=\"line\">3 mysql&gt; GRANT REPLICATION SLAVE ON *.* TO &apos;repl&apos;@&apos;192.168.0.%&apos; IDENTIFIED BY &apos;mysql&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看日志<br><code>mysql&gt;  SHOW MASTER STATUS;</code></p>\n</li>\n</ol>\n<ul>\n<li>从服务器操作<br>-</li>\n</ul>\n<ol>\n<li><p>配置从服务器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 [mysqld]</span><br><span class=\"line\">2 server-id=2</span><br><span class=\"line\">3 relay-log-index=slave-relay-bin.index</span><br><span class=\"line\">4 relay-log=slave-relay-bin</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启mysql</p>\n</li>\n<li><p>连接master</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">change master to master_host=&apos;192.168.0.104&apos;, //Master 服务器Ip</span><br><span class=\"line\">master_port=3306,</span><br><span class=\"line\">master_user=&apos;repl&apos;,</span><br><span class=\"line\">master_password=&apos;mysql&apos;, </span><br><span class=\"line\">master_log_file=&apos;master-bin.000001&apos;,//Master服务器产生的日志</span><br><span class=\"line\">master_log_pos=0;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动slave<br><code>start slave;</code></p>\n</li>\n</ol>\n"},{"title":"python的一些小问题","date":"2019-03-19T01:43:08.000Z","_content":"\n### 1. 如何动态生成变量名？\n**Q:**lst = ['A', 'B', 'C', 'D'] , 如何才能得到以 list 中元素命名的新列表 A = [], B = [], C = [], D = []呢?\n- 方法一： 动态进行变量赋值，通过修改命名空间植入变量\n```python\n>>> for i in lst:\n>>>     globals()[i] = [] \n```\n- 方法二：动态执行代码\n```python\n>>>for i in lst:\n>>>    exec(f\"{i}=[]\")\n```\n**备注:**locals（）实际上没有返回局部名字空间，它返回的是一个拷贝。所以对它进行修改，修改的是拷贝，而对实际的局部名字空间中的变量值并无影响。\n### 2. 命名空间\n**Q:**from module import 和 import module 之间的不同？\n使用 import module，模块自身被导入，但是它保持着自已的名字空间，这就是为什么您需要使用模块名来访问它的函数或属性: module.function 的原因。但是使用 from module import，实际上是从另一个模块中将指定的函数和属性导入到您自己的名字空间，\n","source":"_posts/20180319-python的一些小问题.md","raw":"---\ntitle: python的一些小问题\ndate: 2019-03-19 09:43:08\ntags: python \n---\n\n### 1. 如何动态生成变量名？\n**Q:**lst = ['A', 'B', 'C', 'D'] , 如何才能得到以 list 中元素命名的新列表 A = [], B = [], C = [], D = []呢?\n- 方法一： 动态进行变量赋值，通过修改命名空间植入变量\n```python\n>>> for i in lst:\n>>>     globals()[i] = [] \n```\n- 方法二：动态执行代码\n```python\n>>>for i in lst:\n>>>    exec(f\"{i}=[]\")\n```\n**备注:**locals（）实际上没有返回局部名字空间，它返回的是一个拷贝。所以对它进行修改，修改的是拷贝，而对实际的局部名字空间中的变量值并无影响。\n### 2. 命名空间\n**Q:**from module import 和 import module 之间的不同？\n使用 import module，模块自身被导入，但是它保持着自已的名字空间，这就是为什么您需要使用模块名来访问它的函数或属性: module.function 的原因。但是使用 from module import，实际上是从另一个模块中将指定的函数和属性导入到您自己的名字空间，\n","slug":"20180319-python的一些小问题","published":1,"updated":"2019-03-19T03:13:38.109Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjttrlg870005ow6xk1kpl315","content":"<h3 id=\"1-如何动态生成变量名？\"><a href=\"#1-如何动态生成变量名？\" class=\"headerlink\" title=\"1. 如何动态生成变量名？\"></a>1. 如何动态生成变量名？</h3><p><strong>Q:</strong>lst = [‘A’, ‘B’, ‘C’, ‘D’] , 如何才能得到以 list 中元素命名的新列表 A = [], B = [], C = [], D = []呢?</p>\n<ul>\n<li><p>方法一： 动态进行变量赋值，通过修改命名空间植入变量</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> lst:</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>    globals()[i] = []</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方法二：动态执行代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> lst:</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>   exec(<span class=\"string\">f\"<span class=\"subst\">&#123;i&#125;</span>=[]\"</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>备注:</strong>locals（）实际上没有返回局部名字空间，它返回的是一个拷贝。所以对它进行修改，修改的是拷贝，而对实际的局部名字空间中的变量值并无影响。</p>\n<h3 id=\"2-命名空间\"><a href=\"#2-命名空间\" class=\"headerlink\" title=\"2. 命名空间\"></a>2. 命名空间</h3><p><strong>Q:</strong>from module import 和 import module 之间的不同？<br>使用 import module，模块自身被导入，但是它保持着自已的名字空间，这就是为什么您需要使用模块名来访问它的函数或属性: module.function 的原因。但是使用 from module import，实际上是从另一个模块中将指定的函数和属性导入到您自己的名字空间，</p>\n","site":{"data":{"projects":[{"name":"extract_news","url":"https://github.com/hee0624/extract_news","desc":"Python package to parse news from various news website"}]}},"excerpt":"","more":"<h3 id=\"1-如何动态生成变量名？\"><a href=\"#1-如何动态生成变量名？\" class=\"headerlink\" title=\"1. 如何动态生成变量名？\"></a>1. 如何动态生成变量名？</h3><p><strong>Q:</strong>lst = [‘A’, ‘B’, ‘C’, ‘D’] , 如何才能得到以 list 中元素命名的新列表 A = [], B = [], C = [], D = []呢?</p>\n<ul>\n<li><p>方法一： 动态进行变量赋值，通过修改命名空间植入变量</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> lst:</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>    globals()[i] = []</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方法二：动态执行代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> lst:</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>   exec(<span class=\"string\">f\"<span class=\"subst\">&#123;i&#125;</span>=[]\"</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>备注:</strong>locals（）实际上没有返回局部名字空间，它返回的是一个拷贝。所以对它进行修改，修改的是拷贝，而对实际的局部名字空间中的变量值并无影响。</p>\n<h3 id=\"2-命名空间\"><a href=\"#2-命名空间\" class=\"headerlink\" title=\"2. 命名空间\"></a>2. 命名空间</h3><p><strong>Q:</strong>from module import 和 import module 之间的不同？<br>使用 import module，模块自身被导入，但是它保持着自已的名字空间，这就是为什么您需要使用模块名来访问它的函数或属性: module.function 的原因。但是使用 from module import，实际上是从另一个模块中将指定的函数和属性导入到您自己的名字空间，</p>\n"},{"title":"数据库设计","date":"2018-04-03T02:20:00.000Z","_content":"## 一、基础规范\n表存储引擎必须使用InnoDB\n \n表字符集默认使用utf8，必要时候使用utf8mb4\n解读：\n\n1. 通用，无乱码风险，汉字3字节，英文1字节\n2. utf8mb4是utf8的超集，有存储4字节例如表情符号时，使用它\n \n禁止使用存储过程，视图，触发器，Event\n解读：\n\n1. 对数据库性能影响较大，互联网业务，能让站点层和服务层干的事情，不要交到数据库层\n2. 调试，排错，迁移都比较困难，扩展性较差\n \n禁止在数据库中存储大文件，例如照片，可以将大文件存储在对象存储系统，数据库中存储路径\n禁止在线上环境做数据库压力测试\n测试，开发，线上数据库环境必须隔离\n \n## 二、命名规范\n库名，表名，列名必须用小写，采用下划线分隔\n解读：abc，Abc，ABC都是给自己埋坑\n \n库名，表名，列名必须见名知义，长度不要超过32字符\n解读：tmp，wushan谁TM知道这些库是干嘛的\n \n库备份必须以bak为前缀，以日期为后缀\n从库必须以-s为后缀\n备库必须以-ss为后缀\n \n## 三、表设计规范\n单实例表个数必须控制在2000个以内\n单表分表个数必须控制在1024个以内\n表必须有主键，推荐使用UNSIGNED整数为主键\n潜在坑：删除无主键的表，如果是row模式的主从架构，从库会挂住\n \n禁止使用外键，如果要保证完整性，应由应用程式实现\n解读：外键使得表之间相互耦合，影响update/delete等SQL性能，有可能造成死锁，高并发情况下容易成为数据库瓶颈\n \n建议将大字段，访问频度低的字段拆分到单独的表中存储，分离冷热数据\n解读：具体参加《如何实施数据库垂直拆分》\n \n## 四、列设计规范\n根据业务区分使用tinyint/int/bigint，分别会占用1/4/8字节\n根据业务区分使用char/varchar\n解读：\n\n1. 字段长度固定，或者长度近似的业务场景，适合使用char，能够减少碎片，查询性能高\n2. 字段长度相差较大，或者更新较少的业务场景，适合使用varchar，能够减少空间\n \n根据业务区分使用datetime/timestamp\n解读：前者占用5个字节，后者占用4个字节，存储年使用YEAR，存储日期使用DATE，存储时间使用datetime\n \n必须把字段定义为NOT NULL并设默认值\n解读：\n\n1. NULL的列使用索引，索引统计，值都更加复杂，MySQL更难优化\n2. NULL需要更多的存储空间\n3. NULL只能采用IS NULL或者IS NOT NULL，而在=/!=/in/not in时有大坑\n \n使用INT UNSIGNED存储IPv4，不要用char(15)\n \n使用varchar(20)存储手机号，不要使用整数\n解读：\n\n1. 牵扯到国家代号，可能出现+/-/()等字符，例如+86\n2. 手机号不会用来做数学运算\n3. varchar可以模糊查询，例如like ‘138%’\n \n使用TINYINT来代替ENUM\n解读：ENUM增加新值要进行DDL操作\n \n## 五、索引规范\n唯一索引使用uniq_[字段名]来命名\n非唯一索引使用idx_[字段名]来命名\n单张表索引数量建议控制在5个以内\n解读：\n\n1. 互联网高并发业务，太多索引会影响写性能\n2. 生成执行计划时，如果索引太多，会降低性能，并可能导致MySQL选择不到最优索引\n3. 异常复杂的查询需求，可以选择ES等更为适合的方式存储\n \n组合索引字段数不建议超过5个\n解读：如果5个字段还不能极大缩小row范围，八成是设计有问题\n \n不建议在频繁更新的字段上建立索引\n非必要不要进行JOIN查询，如果要进行JOIN查询，被JOIN的字段必须类型相同，并建立索引\n解读：踩过因为JOIN字段类型不一致，而导致全表扫描的坑么？\n \n理解组合索引最左前缀原则，避免重复建设索引，如果建立了(a,b,c)，相当于建立了(a), (a,b), (a,b,c)\n \n## 六、SQL规范\n禁止使用select *，只获取必要字段\n解读：\n\n1. select *会增加cpu/io/内存/带宽的消耗\n2. 指定字段能有效利用索引覆盖\n3. 指定字段查询，在表结构变更时，能保证对应用程序无影响\n \ninsert必须指定字段，禁止使用insert into T values()\n解读：指定字段插入，在表结构变更时，能保证对应用程序无影响\n \n隐式类型转换会使索引失效，导致全表扫描\n \n禁止在where条件列使用函数或者表达式\n解读：导致不能命中索引，全表扫描\n \n禁止负向查询以及%开头的模糊查询\n解读：导致不能命中索引，全表扫描\n \n禁止大表JOIN和子查询\n同一个字段上的OR必须改写问IN，IN的值必须少于50个\n应用程序必须捕获SQL异常\n","source":"_posts/20180403-数据库设计.md","raw":"---\ntitle: 数据库设计\ndate: 2018-04-03 10:20\ntags: database\n---\n## 一、基础规范\n表存储引擎必须使用InnoDB\n \n表字符集默认使用utf8，必要时候使用utf8mb4\n解读：\n\n1. 通用，无乱码风险，汉字3字节，英文1字节\n2. utf8mb4是utf8的超集，有存储4字节例如表情符号时，使用它\n \n禁止使用存储过程，视图，触发器，Event\n解读：\n\n1. 对数据库性能影响较大，互联网业务，能让站点层和服务层干的事情，不要交到数据库层\n2. 调试，排错，迁移都比较困难，扩展性较差\n \n禁止在数据库中存储大文件，例如照片，可以将大文件存储在对象存储系统，数据库中存储路径\n禁止在线上环境做数据库压力测试\n测试，开发，线上数据库环境必须隔离\n \n## 二、命名规范\n库名，表名，列名必须用小写，采用下划线分隔\n解读：abc，Abc，ABC都是给自己埋坑\n \n库名，表名，列名必须见名知义，长度不要超过32字符\n解读：tmp，wushan谁TM知道这些库是干嘛的\n \n库备份必须以bak为前缀，以日期为后缀\n从库必须以-s为后缀\n备库必须以-ss为后缀\n \n## 三、表设计规范\n单实例表个数必须控制在2000个以内\n单表分表个数必须控制在1024个以内\n表必须有主键，推荐使用UNSIGNED整数为主键\n潜在坑：删除无主键的表，如果是row模式的主从架构，从库会挂住\n \n禁止使用外键，如果要保证完整性，应由应用程式实现\n解读：外键使得表之间相互耦合，影响update/delete等SQL性能，有可能造成死锁，高并发情况下容易成为数据库瓶颈\n \n建议将大字段，访问频度低的字段拆分到单独的表中存储，分离冷热数据\n解读：具体参加《如何实施数据库垂直拆分》\n \n## 四、列设计规范\n根据业务区分使用tinyint/int/bigint，分别会占用1/4/8字节\n根据业务区分使用char/varchar\n解读：\n\n1. 字段长度固定，或者长度近似的业务场景，适合使用char，能够减少碎片，查询性能高\n2. 字段长度相差较大，或者更新较少的业务场景，适合使用varchar，能够减少空间\n \n根据业务区分使用datetime/timestamp\n解读：前者占用5个字节，后者占用4个字节，存储年使用YEAR，存储日期使用DATE，存储时间使用datetime\n \n必须把字段定义为NOT NULL并设默认值\n解读：\n\n1. NULL的列使用索引，索引统计，值都更加复杂，MySQL更难优化\n2. NULL需要更多的存储空间\n3. NULL只能采用IS NULL或者IS NOT NULL，而在=/!=/in/not in时有大坑\n \n使用INT UNSIGNED存储IPv4，不要用char(15)\n \n使用varchar(20)存储手机号，不要使用整数\n解读：\n\n1. 牵扯到国家代号，可能出现+/-/()等字符，例如+86\n2. 手机号不会用来做数学运算\n3. varchar可以模糊查询，例如like ‘138%’\n \n使用TINYINT来代替ENUM\n解读：ENUM增加新值要进行DDL操作\n \n## 五、索引规范\n唯一索引使用uniq_[字段名]来命名\n非唯一索引使用idx_[字段名]来命名\n单张表索引数量建议控制在5个以内\n解读：\n\n1. 互联网高并发业务，太多索引会影响写性能\n2. 生成执行计划时，如果索引太多，会降低性能，并可能导致MySQL选择不到最优索引\n3. 异常复杂的查询需求，可以选择ES等更为适合的方式存储\n \n组合索引字段数不建议超过5个\n解读：如果5个字段还不能极大缩小row范围，八成是设计有问题\n \n不建议在频繁更新的字段上建立索引\n非必要不要进行JOIN查询，如果要进行JOIN查询，被JOIN的字段必须类型相同，并建立索引\n解读：踩过因为JOIN字段类型不一致，而导致全表扫描的坑么？\n \n理解组合索引最左前缀原则，避免重复建设索引，如果建立了(a,b,c)，相当于建立了(a), (a,b), (a,b,c)\n \n## 六、SQL规范\n禁止使用select *，只获取必要字段\n解读：\n\n1. select *会增加cpu/io/内存/带宽的消耗\n2. 指定字段能有效利用索引覆盖\n3. 指定字段查询，在表结构变更时，能保证对应用程序无影响\n \ninsert必须指定字段，禁止使用insert into T values()\n解读：指定字段插入，在表结构变更时，能保证对应用程序无影响\n \n隐式类型转换会使索引失效，导致全表扫描\n \n禁止在where条件列使用函数或者表达式\n解读：导致不能命中索引，全表扫描\n \n禁止负向查询以及%开头的模糊查询\n解读：导致不能命中索引，全表扫描\n \n禁止大表JOIN和子查询\n同一个字段上的OR必须改写问IN，IN的值必须少于50个\n应用程序必须捕获SQL异常\n","slug":"20180403-数据库设计","published":1,"updated":"2018-09-14T02:19:10.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjttrlg8b0008ow6xd0plugam","content":"<h2 id=\"一、基础规范\"><a href=\"#一、基础规范\" class=\"headerlink\" title=\"一、基础规范\"></a>一、基础规范</h2><p>表存储引擎必须使用InnoDB</p>\n<p>表字符集默认使用utf8，必要时候使用utf8mb4<br>解读：</p>\n<ol>\n<li>通用，无乱码风险，汉字3字节，英文1字节</li>\n<li>utf8mb4是utf8的超集，有存储4字节例如表情符号时，使用它</li>\n</ol>\n<p>禁止使用存储过程，视图，触发器，Event<br>解读：</p>\n<ol>\n<li>对数据库性能影响较大，互联网业务，能让站点层和服务层干的事情，不要交到数据库层</li>\n<li>调试，排错，迁移都比较困难，扩展性较差</li>\n</ol>\n<p>禁止在数据库中存储大文件，例如照片，可以将大文件存储在对象存储系统，数据库中存储路径<br>禁止在线上环境做数据库压力测试<br>测试，开发，线上数据库环境必须隔离</p>\n<h2 id=\"二、命名规范\"><a href=\"#二、命名规范\" class=\"headerlink\" title=\"二、命名规范\"></a>二、命名规范</h2><p>库名，表名，列名必须用小写，采用下划线分隔<br>解读：abc，Abc，ABC都是给自己埋坑</p>\n<p>库名，表名，列名必须见名知义，长度不要超过32字符<br>解读：tmp，wushan谁TM知道这些库是干嘛的</p>\n<p>库备份必须以bak为前缀，以日期为后缀<br>从库必须以-s为后缀<br>备库必须以-ss为后缀</p>\n<h2 id=\"三、表设计规范\"><a href=\"#三、表设计规范\" class=\"headerlink\" title=\"三、表设计规范\"></a>三、表设计规范</h2><p>单实例表个数必须控制在2000个以内<br>单表分表个数必须控制在1024个以内<br>表必须有主键，推荐使用UNSIGNED整数为主键<br>潜在坑：删除无主键的表，如果是row模式的主从架构，从库会挂住</p>\n<p>禁止使用外键，如果要保证完整性，应由应用程式实现<br>解读：外键使得表之间相互耦合，影响update/delete等SQL性能，有可能造成死锁，高并发情况下容易成为数据库瓶颈</p>\n<p>建议将大字段，访问频度低的字段拆分到单独的表中存储，分离冷热数据<br>解读：具体参加《如何实施数据库垂直拆分》</p>\n<h2 id=\"四、列设计规范\"><a href=\"#四、列设计规范\" class=\"headerlink\" title=\"四、列设计规范\"></a>四、列设计规范</h2><p>根据业务区分使用tinyint/int/bigint，分别会占用1/4/8字节<br>根据业务区分使用char/varchar<br>解读：</p>\n<ol>\n<li>字段长度固定，或者长度近似的业务场景，适合使用char，能够减少碎片，查询性能高</li>\n<li>字段长度相差较大，或者更新较少的业务场景，适合使用varchar，能够减少空间</li>\n</ol>\n<p>根据业务区分使用datetime/timestamp<br>解读：前者占用5个字节，后者占用4个字节，存储年使用YEAR，存储日期使用DATE，存储时间使用datetime</p>\n<p>必须把字段定义为NOT NULL并设默认值<br>解读：</p>\n<ol>\n<li>NULL的列使用索引，索引统计，值都更加复杂，MySQL更难优化</li>\n<li>NULL需要更多的存储空间</li>\n<li>NULL只能采用IS NULL或者IS NOT NULL，而在=/!=/in/not in时有大坑</li>\n</ol>\n<p>使用INT UNSIGNED存储IPv4，不要用char(15)</p>\n<p>使用varchar(20)存储手机号，不要使用整数<br>解读：</p>\n<ol>\n<li>牵扯到国家代号，可能出现+/-/()等字符，例如+86</li>\n<li>手机号不会用来做数学运算</li>\n<li>varchar可以模糊查询，例如like ‘138%’</li>\n</ol>\n<p>使用TINYINT来代替ENUM<br>解读：ENUM增加新值要进行DDL操作</p>\n<h2 id=\"五、索引规范\"><a href=\"#五、索引规范\" class=\"headerlink\" title=\"五、索引规范\"></a>五、索引规范</h2><p>唯一索引使用uniq_[字段名]来命名<br>非唯一索引使用idx_[字段名]来命名<br>单张表索引数量建议控制在5个以内<br>解读：</p>\n<ol>\n<li>互联网高并发业务，太多索引会影响写性能</li>\n<li>生成执行计划时，如果索引太多，会降低性能，并可能导致MySQL选择不到最优索引</li>\n<li>异常复杂的查询需求，可以选择ES等更为适合的方式存储</li>\n</ol>\n<p>组合索引字段数不建议超过5个<br>解读：如果5个字段还不能极大缩小row范围，八成是设计有问题</p>\n<p>不建议在频繁更新的字段上建立索引<br>非必要不要进行JOIN查询，如果要进行JOIN查询，被JOIN的字段必须类型相同，并建立索引<br>解读：踩过因为JOIN字段类型不一致，而导致全表扫描的坑么？</p>\n<p>理解组合索引最左前缀原则，避免重复建设索引，如果建立了(a,b,c)，相当于建立了(a), (a,b), (a,b,c)</p>\n<h2 id=\"六、SQL规范\"><a href=\"#六、SQL规范\" class=\"headerlink\" title=\"六、SQL规范\"></a>六、SQL规范</h2><p>禁止使用select *，只获取必要字段<br>解读：</p>\n<ol>\n<li>select *会增加cpu/io/内存/带宽的消耗</li>\n<li>指定字段能有效利用索引覆盖</li>\n<li>指定字段查询，在表结构变更时，能保证对应用程序无影响</li>\n</ol>\n<p>insert必须指定字段，禁止使用insert into T values()<br>解读：指定字段插入，在表结构变更时，能保证对应用程序无影响</p>\n<p>隐式类型转换会使索引失效，导致全表扫描</p>\n<p>禁止在where条件列使用函数或者表达式<br>解读：导致不能命中索引，全表扫描</p>\n<p>禁止负向查询以及%开头的模糊查询<br>解读：导致不能命中索引，全表扫描</p>\n<p>禁止大表JOIN和子查询<br>同一个字段上的OR必须改写问IN，IN的值必须少于50个<br>应用程序必须捕获SQL异常</p>\n","site":{"data":{"projects":[{"name":"extract_news","url":"https://github.com/hee0624/extract_news","desc":"Python package to parse news from various news website"}]}},"excerpt":"","more":"<h2 id=\"一、基础规范\"><a href=\"#一、基础规范\" class=\"headerlink\" title=\"一、基础规范\"></a>一、基础规范</h2><p>表存储引擎必须使用InnoDB</p>\n<p>表字符集默认使用utf8，必要时候使用utf8mb4<br>解读：</p>\n<ol>\n<li>通用，无乱码风险，汉字3字节，英文1字节</li>\n<li>utf8mb4是utf8的超集，有存储4字节例如表情符号时，使用它</li>\n</ol>\n<p>禁止使用存储过程，视图，触发器，Event<br>解读：</p>\n<ol>\n<li>对数据库性能影响较大，互联网业务，能让站点层和服务层干的事情，不要交到数据库层</li>\n<li>调试，排错，迁移都比较困难，扩展性较差</li>\n</ol>\n<p>禁止在数据库中存储大文件，例如照片，可以将大文件存储在对象存储系统，数据库中存储路径<br>禁止在线上环境做数据库压力测试<br>测试，开发，线上数据库环境必须隔离</p>\n<h2 id=\"二、命名规范\"><a href=\"#二、命名规范\" class=\"headerlink\" title=\"二、命名规范\"></a>二、命名规范</h2><p>库名，表名，列名必须用小写，采用下划线分隔<br>解读：abc，Abc，ABC都是给自己埋坑</p>\n<p>库名，表名，列名必须见名知义，长度不要超过32字符<br>解读：tmp，wushan谁TM知道这些库是干嘛的</p>\n<p>库备份必须以bak为前缀，以日期为后缀<br>从库必须以-s为后缀<br>备库必须以-ss为后缀</p>\n<h2 id=\"三、表设计规范\"><a href=\"#三、表设计规范\" class=\"headerlink\" title=\"三、表设计规范\"></a>三、表设计规范</h2><p>单实例表个数必须控制在2000个以内<br>单表分表个数必须控制在1024个以内<br>表必须有主键，推荐使用UNSIGNED整数为主键<br>潜在坑：删除无主键的表，如果是row模式的主从架构，从库会挂住</p>\n<p>禁止使用外键，如果要保证完整性，应由应用程式实现<br>解读：外键使得表之间相互耦合，影响update/delete等SQL性能，有可能造成死锁，高并发情况下容易成为数据库瓶颈</p>\n<p>建议将大字段，访问频度低的字段拆分到单独的表中存储，分离冷热数据<br>解读：具体参加《如何实施数据库垂直拆分》</p>\n<h2 id=\"四、列设计规范\"><a href=\"#四、列设计规范\" class=\"headerlink\" title=\"四、列设计规范\"></a>四、列设计规范</h2><p>根据业务区分使用tinyint/int/bigint，分别会占用1/4/8字节<br>根据业务区分使用char/varchar<br>解读：</p>\n<ol>\n<li>字段长度固定，或者长度近似的业务场景，适合使用char，能够减少碎片，查询性能高</li>\n<li>字段长度相差较大，或者更新较少的业务场景，适合使用varchar，能够减少空间</li>\n</ol>\n<p>根据业务区分使用datetime/timestamp<br>解读：前者占用5个字节，后者占用4个字节，存储年使用YEAR，存储日期使用DATE，存储时间使用datetime</p>\n<p>必须把字段定义为NOT NULL并设默认值<br>解读：</p>\n<ol>\n<li>NULL的列使用索引，索引统计，值都更加复杂，MySQL更难优化</li>\n<li>NULL需要更多的存储空间</li>\n<li>NULL只能采用IS NULL或者IS NOT NULL，而在=/!=/in/not in时有大坑</li>\n</ol>\n<p>使用INT UNSIGNED存储IPv4，不要用char(15)</p>\n<p>使用varchar(20)存储手机号，不要使用整数<br>解读：</p>\n<ol>\n<li>牵扯到国家代号，可能出现+/-/()等字符，例如+86</li>\n<li>手机号不会用来做数学运算</li>\n<li>varchar可以模糊查询，例如like ‘138%’</li>\n</ol>\n<p>使用TINYINT来代替ENUM<br>解读：ENUM增加新值要进行DDL操作</p>\n<h2 id=\"五、索引规范\"><a href=\"#五、索引规范\" class=\"headerlink\" title=\"五、索引规范\"></a>五、索引规范</h2><p>唯一索引使用uniq_[字段名]来命名<br>非唯一索引使用idx_[字段名]来命名<br>单张表索引数量建议控制在5个以内<br>解读：</p>\n<ol>\n<li>互联网高并发业务，太多索引会影响写性能</li>\n<li>生成执行计划时，如果索引太多，会降低性能，并可能导致MySQL选择不到最优索引</li>\n<li>异常复杂的查询需求，可以选择ES等更为适合的方式存储</li>\n</ol>\n<p>组合索引字段数不建议超过5个<br>解读：如果5个字段还不能极大缩小row范围，八成是设计有问题</p>\n<p>不建议在频繁更新的字段上建立索引<br>非必要不要进行JOIN查询，如果要进行JOIN查询，被JOIN的字段必须类型相同，并建立索引<br>解读：踩过因为JOIN字段类型不一致，而导致全表扫描的坑么？</p>\n<p>理解组合索引最左前缀原则，避免重复建设索引，如果建立了(a,b,c)，相当于建立了(a), (a,b), (a,b,c)</p>\n<h2 id=\"六、SQL规范\"><a href=\"#六、SQL规范\" class=\"headerlink\" title=\"六、SQL规范\"></a>六、SQL规范</h2><p>禁止使用select *，只获取必要字段<br>解读：</p>\n<ol>\n<li>select *会增加cpu/io/内存/带宽的消耗</li>\n<li>指定字段能有效利用索引覆盖</li>\n<li>指定字段查询，在表结构变更时，能保证对应用程序无影响</li>\n</ol>\n<p>insert必须指定字段，禁止使用insert into T values()<br>解读：指定字段插入，在表结构变更时，能保证对应用程序无影响</p>\n<p>隐式类型转换会使索引失效，导致全表扫描</p>\n<p>禁止在where条件列使用函数或者表达式<br>解读：导致不能命中索引，全表扫描</p>\n<p>禁止负向查询以及%开头的模糊查询<br>解读：导致不能命中索引，全表扫描</p>\n<p>禁止大表JOIN和子查询<br>同一个字段上的OR必须改写问IN，IN的值必须少于50个<br>应用程序必须捕获SQL异常</p>\n"},{"title":"flume的安装与使用","date":"2018-05-14T02:11:05.000Z","_content":"### 1.flume 介绍\n----------------\n    收集、移动、聚合大量日志数据的服务。\n    基于流数据的架构，用于在线日志分析。\n    基于事件，每行是一个事件。\n    在生产和消费者之间启动协调作用。\n    提供了事务保证，确保消息一定被分发。\nSource介绍\n\n    接受数据，类型有多种。\n\n\nChannel\n\n    临时存放地，对Source中来的数据进行缓冲，直到sink消费掉。\n\nSink\n\n    从channel提取数据存放到中央化存储(hadoop / hbase)，类型多种。\n### 2.安装flume\n-------------\n\n0. 依赖java环境\n1. 下载\n2. tar\n3. 环境变量\n4. 验证flume是否成功\n $flume-ng version          //next generation.下一代.\n\n\n**install_flume.sh shell文件**\n\n```shell\nmkdir -p /mnt/server/flume\nwget http://mirror.bit.edu.cn/apache/flume/1.8.0/apache-flume-1.8.0-bin.tar.gz\ntar -xzvf  apache-flume-1.8.0-bin.tar.gz\nmv apache-flume-1.8.0-bin/*  /mnt/server/flume\nrm -rf apache-flume-1.8.0-bin\ncat > /etc/profile.d/flume.sh << END\nFLUME_HOME=\"/mnt/server/flume\"\nPATH=$PATH:/mnt/server/flume/bin\nEND\n```\n\n**flume-conf shell文件**\n\n```shell\na1.sources=r1\na1.sinks=avroSink\na1.channels=c1\n\na1.sources.r1.type = taildir\na1.sources.r1.positionFile = /*****/taildir_position.json\na1.sources.r1.filegroups = f1\na1.sources.r1.filegroups.f1 = /********\na1.sources.r1.headers.f1.app = /********\na1.sources.r1.fileHeader = true\na1.sources.r1.channels=c1\n\na1.channels.c1.type = memory\na1.channels.c1.capacity=1000\na1.channels.c1.transactionCapacity = 100\n\na1.sinks.avroSink.type=avro\na1.sinks.avroSink.channel=c1\na1.sinks.avroSink.hostname=101.201.143.100\na1.sinks.avroSink.port=44444\n```\n\n### flume启动\nflume-ng agent -c conf -f flume-conf -n a1 -Dflume.root.logger=INFO,console\n","source":"_posts/20180514-flume的安装与使用.md","raw":"---\ntitle: flume的安装与使用\ndate: 2018-05-14 10:11:05\ntags: flume\n---\n### 1.flume 介绍\n----------------\n    收集、移动、聚合大量日志数据的服务。\n    基于流数据的架构，用于在线日志分析。\n    基于事件，每行是一个事件。\n    在生产和消费者之间启动协调作用。\n    提供了事务保证，确保消息一定被分发。\nSource介绍\n\n    接受数据，类型有多种。\n\n\nChannel\n\n    临时存放地，对Source中来的数据进行缓冲，直到sink消费掉。\n\nSink\n\n    从channel提取数据存放到中央化存储(hadoop / hbase)，类型多种。\n### 2.安装flume\n-------------\n\n0. 依赖java环境\n1. 下载\n2. tar\n3. 环境变量\n4. 验证flume是否成功\n $flume-ng version          //next generation.下一代.\n\n\n**install_flume.sh shell文件**\n\n```shell\nmkdir -p /mnt/server/flume\nwget http://mirror.bit.edu.cn/apache/flume/1.8.0/apache-flume-1.8.0-bin.tar.gz\ntar -xzvf  apache-flume-1.8.0-bin.tar.gz\nmv apache-flume-1.8.0-bin/*  /mnt/server/flume\nrm -rf apache-flume-1.8.0-bin\ncat > /etc/profile.d/flume.sh << END\nFLUME_HOME=\"/mnt/server/flume\"\nPATH=$PATH:/mnt/server/flume/bin\nEND\n```\n\n**flume-conf shell文件**\n\n```shell\na1.sources=r1\na1.sinks=avroSink\na1.channels=c1\n\na1.sources.r1.type = taildir\na1.sources.r1.positionFile = /*****/taildir_position.json\na1.sources.r1.filegroups = f1\na1.sources.r1.filegroups.f1 = /********\na1.sources.r1.headers.f1.app = /********\na1.sources.r1.fileHeader = true\na1.sources.r1.channels=c1\n\na1.channels.c1.type = memory\na1.channels.c1.capacity=1000\na1.channels.c1.transactionCapacity = 100\n\na1.sinks.avroSink.type=avro\na1.sinks.avroSink.channel=c1\na1.sinks.avroSink.hostname=101.201.143.100\na1.sinks.avroSink.port=44444\n```\n\n### flume启动\nflume-ng agent -c conf -f flume-conf -n a1 -Dflume.root.logger=INFO,console\n","slug":"20180514-flume的安装与使用","published":1,"updated":"2018-09-30T08:36:32.016Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjttrlg8d0009ow6x4ikbz80q","content":"<h3 id=\"1-flume-介绍\"><a href=\"#1-flume-介绍\" class=\"headerlink\" title=\"1.flume 介绍\"></a>1.flume 介绍</h3><hr>\n<pre><code>收集、移动、聚合大量日志数据的服务。\n基于流数据的架构，用于在线日志分析。\n基于事件，每行是一个事件。\n在生产和消费者之间启动协调作用。\n提供了事务保证，确保消息一定被分发。\n</code></pre><p>Source介绍</p>\n<pre><code>接受数据，类型有多种。\n</code></pre><p>Channel</p>\n<pre><code>临时存放地，对Source中来的数据进行缓冲，直到sink消费掉。\n</code></pre><p>Sink</p>\n<pre><code>从channel提取数据存放到中央化存储(hadoop / hbase)，类型多种。\n</code></pre><h3 id=\"2-安装flume\"><a href=\"#2-安装flume\" class=\"headerlink\" title=\"2.安装flume\"></a>2.安装flume</h3><hr>\n<ol>\n<li>依赖java环境</li>\n<li>下载</li>\n<li>tar</li>\n<li>环境变量</li>\n<li>验证flume是否成功<br>$flume-ng version          //next generation.下一代.</li>\n</ol>\n<p><strong>install_flume.sh shell文件</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /mnt/server/flume</span><br><span class=\"line\">wget http://mirror.bit.edu.cn/apache/flume/1.8.0/apache-flume-1.8.0-bin.tar.gz</span><br><span class=\"line\">tar -xzvf  apache-flume-1.8.0-bin.tar.gz</span><br><span class=\"line\">mv apache-flume-1.8.0-bin/*  /mnt/server/flume</span><br><span class=\"line\">rm -rf apache-flume-1.8.0-bin</span><br><span class=\"line\">cat &gt; /etc/profile.d/flume.sh &lt;&lt; END</span><br><span class=\"line\">FLUME_HOME=\"/mnt/server/flume\"</span><br><span class=\"line\">PATH=$PATH:/mnt/server/flume/bin</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<p><strong>flume-conf shell文件</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a1.sources=r1</span><br><span class=\"line\">a1.sinks=avroSink</span><br><span class=\"line\">a1.channels=c1</span><br><span class=\"line\"></span><br><span class=\"line\">a1.sources.r1.type = taildir</span><br><span class=\"line\">a1.sources.r1.positionFile = /*****/taildir_position.json</span><br><span class=\"line\">a1.sources.r1.filegroups = f1</span><br><span class=\"line\">a1.sources.r1.filegroups.f1 = /********</span><br><span class=\"line\">a1.sources.r1.headers.f1.app = /********</span><br><span class=\"line\">a1.sources.r1.fileHeader = true</span><br><span class=\"line\">a1.sources.r1.channels=c1</span><br><span class=\"line\"></span><br><span class=\"line\">a1.channels.c1.type = memory</span><br><span class=\"line\">a1.channels.c1.capacity=1000</span><br><span class=\"line\">a1.channels.c1.transactionCapacity = 100</span><br><span class=\"line\"></span><br><span class=\"line\">a1.sinks.avroSink.type=avro</span><br><span class=\"line\">a1.sinks.avroSink.channel=c1</span><br><span class=\"line\">a1.sinks.avroSink.hostname=101.201.143.100</span><br><span class=\"line\">a1.sinks.avroSink.port=44444</span><br></pre></td></tr></table></figure>\n<h3 id=\"flume启动\"><a href=\"#flume启动\" class=\"headerlink\" title=\"flume启动\"></a>flume启动</h3><p>flume-ng agent -c conf -f flume-conf -n a1 -Dflume.root.logger=INFO,console</p>\n","site":{"data":{"projects":[{"name":"extract_news","url":"https://github.com/hee0624/extract_news","desc":"Python package to parse news from various news website"}]}},"excerpt":"","more":"<h3 id=\"1-flume-介绍\"><a href=\"#1-flume-介绍\" class=\"headerlink\" title=\"1.flume 介绍\"></a>1.flume 介绍</h3><hr>\n<pre><code>收集、移动、聚合大量日志数据的服务。\n基于流数据的架构，用于在线日志分析。\n基于事件，每行是一个事件。\n在生产和消费者之间启动协调作用。\n提供了事务保证，确保消息一定被分发。\n</code></pre><p>Source介绍</p>\n<pre><code>接受数据，类型有多种。\n</code></pre><p>Channel</p>\n<pre><code>临时存放地，对Source中来的数据进行缓冲，直到sink消费掉。\n</code></pre><p>Sink</p>\n<pre><code>从channel提取数据存放到中央化存储(hadoop / hbase)，类型多种。\n</code></pre><h3 id=\"2-安装flume\"><a href=\"#2-安装flume\" class=\"headerlink\" title=\"2.安装flume\"></a>2.安装flume</h3><hr>\n<ol>\n<li>依赖java环境</li>\n<li>下载</li>\n<li>tar</li>\n<li>环境变量</li>\n<li>验证flume是否成功<br>$flume-ng version          //next generation.下一代.</li>\n</ol>\n<p><strong>install_flume.sh shell文件</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /mnt/server/flume</span><br><span class=\"line\">wget http://mirror.bit.edu.cn/apache/flume/1.8.0/apache-flume-1.8.0-bin.tar.gz</span><br><span class=\"line\">tar -xzvf  apache-flume-1.8.0-bin.tar.gz</span><br><span class=\"line\">mv apache-flume-1.8.0-bin/*  /mnt/server/flume</span><br><span class=\"line\">rm -rf apache-flume-1.8.0-bin</span><br><span class=\"line\">cat &gt; /etc/profile.d/flume.sh &lt;&lt; END</span><br><span class=\"line\">FLUME_HOME=\"/mnt/server/flume\"</span><br><span class=\"line\">PATH=$PATH:/mnt/server/flume/bin</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<p><strong>flume-conf shell文件</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a1.sources=r1</span><br><span class=\"line\">a1.sinks=avroSink</span><br><span class=\"line\">a1.channels=c1</span><br><span class=\"line\"></span><br><span class=\"line\">a1.sources.r1.type = taildir</span><br><span class=\"line\">a1.sources.r1.positionFile = /*****/taildir_position.json</span><br><span class=\"line\">a1.sources.r1.filegroups = f1</span><br><span class=\"line\">a1.sources.r1.filegroups.f1 = /********</span><br><span class=\"line\">a1.sources.r1.headers.f1.app = /********</span><br><span class=\"line\">a1.sources.r1.fileHeader = true</span><br><span class=\"line\">a1.sources.r1.channels=c1</span><br><span class=\"line\"></span><br><span class=\"line\">a1.channels.c1.type = memory</span><br><span class=\"line\">a1.channels.c1.capacity=1000</span><br><span class=\"line\">a1.channels.c1.transactionCapacity = 100</span><br><span class=\"line\"></span><br><span class=\"line\">a1.sinks.avroSink.type=avro</span><br><span class=\"line\">a1.sinks.avroSink.channel=c1</span><br><span class=\"line\">a1.sinks.avroSink.hostname=101.201.143.100</span><br><span class=\"line\">a1.sinks.avroSink.port=44444</span><br></pre></td></tr></table></figure>\n<h3 id=\"flume启动\"><a href=\"#flume启动\" class=\"headerlink\" title=\"flume启动\"></a>flume启动</h3><p>flume-ng agent -c conf -f flume-conf -n a1 -Dflume.root.logger=INFO,console</p>\n"},{"title":"grpc的部署与使用","date":"2018-05-24T02:11:05.000Z","_content":"\n\n### 1. grpc介绍\n\n&nbsp;&nbsp;在 gRPC 里客户端应用可以像调用本地对象一样直接调用另一台不同的机器上服务端应用的方法，使得您能够更容易地创建分布式应用和服务。与许多 RPC 系统类似，gRPC 也是基于以下理念：定义一个服务，指定其能够被远程调用的方法（包含参数和返回类型）。在服务端实现这个接口，并运行一个 gRPC 服务器来处理客户端调用。在客户端拥有一个存根能够像服务端一样的方法。（客户端：语言不限；服务端：语言不限）\n\n\n\n### 2. grep安装\n\n```\n\npip install grpcio\n\npip install grpcio-tools\n\n```\n\n### 3. grep使用\n\n- proto文件\n\n\n\n```shell\n\nsyntax = \"proto3\";\n\n// The greeting service definition.\n\nservice Greeter {\n\n  // Sends a greeting\n\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n\n  // Sends another greeting\n\n  rpc SayHelloAgain (HelloRequest) returns (HelloReply) {}\n\n}\n\n\n\n// The request message containing the user's name.\n\nmessage HelloRequest {\n\n  string name = 1;\n\n}\n\n\n\n// The response message containing the greetings\n\nmessage HelloReply {\n\n  string message = 1;\n\n}\n\n```\n\n\n\n```\n\npython -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. ./helloworld.proto \n\n```\n\n\n\n- server.py\n\n\n\n```python\n\nfrom concurrent import futures\n\nimport time\n\n\n\nimport grpc\n\n\n\nimport helloworld_pb2\n\nimport helloworld_pb2_grpc\n\n\n\n_ONE_DAY_IN_SECONDS = 60 * 60 * 24\n\n\n\n\n\nclass Greeter(helloworld_pb2_grpc.GreeterServicer):\n\n\n\n    def SayHello(self, request, context):\n\n        return helloworld_pb2.HelloReply(message='Hello, %s!' % request.name)\n\n\n\n\n\ndef serve():\n\n    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n\n    helloworld_pb2_grpc.add_GreeterServicer_to_server(Greeter(), server)\n\n    server.add_insecure_port('[::]:50051')\n\n    server.start()\n\n    try:\n\n        while True:\n\n            time.sleep(_ONE_DAY_IN_SECONDS)\n\n    except KeyboardInterrupt:\n\n        server.stop(0)\n\n\n\n\n\nif __name__ == '__main__':\n\n    serve()\n\n```\n\n- client.py\n\n\n\n```python\n\nfrom __future__ import print_function\n\n\n\nimport grpc\n\n\n\nimport helloworld_pb2\n\nimport helloworld_pb2_grpc\n\n\n\n\n\ndef run():\n\n    channel = grpc.insecure_channel('localhost:50051')\n\n    stub = helloworld_pb2_grpc.GreeterStub(channel)\n\n    response = stub.SayHello(helloworld_pb2.HelloRequest(name='you'))\n\n    print(\"Greeter client received: \" + response.message)\n\n\n\n\n\nif __name__ == '__main__':\n\n    run()\n\n```\n\n","source":"_posts/20180524-grpc的部署与使用.md","raw":"---\ntitle: grpc的部署与使用\ndate: 2018-05-24 10:11:05\ntags: rpc\n---\n\n\n### 1. grpc介绍\n\n&nbsp;&nbsp;在 gRPC 里客户端应用可以像调用本地对象一样直接调用另一台不同的机器上服务端应用的方法，使得您能够更容易地创建分布式应用和服务。与许多 RPC 系统类似，gRPC 也是基于以下理念：定义一个服务，指定其能够被远程调用的方法（包含参数和返回类型）。在服务端实现这个接口，并运行一个 gRPC 服务器来处理客户端调用。在客户端拥有一个存根能够像服务端一样的方法。（客户端：语言不限；服务端：语言不限）\n\n\n\n### 2. grep安装\n\n```\n\npip install grpcio\n\npip install grpcio-tools\n\n```\n\n### 3. grep使用\n\n- proto文件\n\n\n\n```shell\n\nsyntax = \"proto3\";\n\n// The greeting service definition.\n\nservice Greeter {\n\n  // Sends a greeting\n\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n\n  // Sends another greeting\n\n  rpc SayHelloAgain (HelloRequest) returns (HelloReply) {}\n\n}\n\n\n\n// The request message containing the user's name.\n\nmessage HelloRequest {\n\n  string name = 1;\n\n}\n\n\n\n// The response message containing the greetings\n\nmessage HelloReply {\n\n  string message = 1;\n\n}\n\n```\n\n\n\n```\n\npython -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. ./helloworld.proto \n\n```\n\n\n\n- server.py\n\n\n\n```python\n\nfrom concurrent import futures\n\nimport time\n\n\n\nimport grpc\n\n\n\nimport helloworld_pb2\n\nimport helloworld_pb2_grpc\n\n\n\n_ONE_DAY_IN_SECONDS = 60 * 60 * 24\n\n\n\n\n\nclass Greeter(helloworld_pb2_grpc.GreeterServicer):\n\n\n\n    def SayHello(self, request, context):\n\n        return helloworld_pb2.HelloReply(message='Hello, %s!' % request.name)\n\n\n\n\n\ndef serve():\n\n    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\n\n    helloworld_pb2_grpc.add_GreeterServicer_to_server(Greeter(), server)\n\n    server.add_insecure_port('[::]:50051')\n\n    server.start()\n\n    try:\n\n        while True:\n\n            time.sleep(_ONE_DAY_IN_SECONDS)\n\n    except KeyboardInterrupt:\n\n        server.stop(0)\n\n\n\n\n\nif __name__ == '__main__':\n\n    serve()\n\n```\n\n- client.py\n\n\n\n```python\n\nfrom __future__ import print_function\n\n\n\nimport grpc\n\n\n\nimport helloworld_pb2\n\nimport helloworld_pb2_grpc\n\n\n\n\n\ndef run():\n\n    channel = grpc.insecure_channel('localhost:50051')\n\n    stub = helloworld_pb2_grpc.GreeterStub(channel)\n\n    response = stub.SayHello(helloworld_pb2.HelloRequest(name='you'))\n\n    print(\"Greeter client received: \" + response.message)\n\n\n\n\n\nif __name__ == '__main__':\n\n    run()\n\n```\n\n","slug":"20180524-grpc的部署与使用","published":1,"updated":"2018-09-30T07:50:31.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjttrlg8g000bow6xxe1p0pzy","content":"<h3 id=\"1-grpc介绍\"><a href=\"#1-grpc介绍\" class=\"headerlink\" title=\"1. grpc介绍\"></a>1. grpc介绍</h3><p>&nbsp;&nbsp;在 gRPC 里客户端应用可以像调用本地对象一样直接调用另一台不同的机器上服务端应用的方法，使得您能够更容易地创建分布式应用和服务。与许多 RPC 系统类似，gRPC 也是基于以下理念：定义一个服务，指定其能够被远程调用的方法（包含参数和返回类型）。在服务端实现这个接口，并运行一个 gRPC 服务器来处理客户端调用。在客户端拥有一个存根能够像服务端一样的方法。（客户端：语言不限；服务端：语言不限）</p>\n<h3 id=\"2-grep安装\"><a href=\"#2-grep安装\" class=\"headerlink\" title=\"2. grep安装\"></a>2. grep安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pip install grpcio</span><br><span class=\"line\"></span><br><span class=\"line\">pip install grpcio-tools</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-grep使用\"><a href=\"#3-grep使用\" class=\"headerlink\" title=\"3. grep使用\"></a>3. grep使用</h3><ul>\n<li>proto文件</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">syntax = \"proto3\";</span><br><span class=\"line\"></span><br><span class=\"line\">// The greeting service definition.</span><br><span class=\"line\"></span><br><span class=\"line\">service Greeter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  // Sends a greeting</span><br><span class=\"line\"></span><br><span class=\"line\">  rpc SayHello (HelloRequest) returns (HelloReply) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // Sends another greeting</span><br><span class=\"line\"></span><br><span class=\"line\">  rpc SayHelloAgain (HelloRequest) returns (HelloReply) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// The request message containing the user's name.</span><br><span class=\"line\"></span><br><span class=\"line\">message HelloRequest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  string name = 1;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// The response message containing the greetings</span><br><span class=\"line\"></span><br><span class=\"line\">message HelloReply &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  string message = 1;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. ./helloworld.proto</span><br></pre></td></tr></table></figure>\n<ul>\n<li>server.py</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> concurrent <span class=\"keyword\">import</span> futures</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> grpc</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> helloworld_pb2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> helloworld_pb2_grpc</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">_ONE_DAY_IN_SECONDS = <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeter</span><span class=\"params\">(helloworld_pb2_grpc.GreeterServicer)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">SayHello</span><span class=\"params\">(self, request, context)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> helloworld_pb2.HelloReply(message=<span class=\"string\">'Hello, %s!'</span> % request.name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">serve</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    server = grpc.server(futures.ThreadPoolExecutor(max_workers=<span class=\"number\">10</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    helloworld_pb2_grpc.add_GreeterServicer_to_server(Greeter(), server)</span><br><span class=\"line\"></span><br><span class=\"line\">    server.add_insecure_port(<span class=\"string\">'[::]:50051'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    server.start()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">            time.sleep(_ONE_DAY_IN_SECONDS)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">except</span> KeyboardInterrupt:</span><br><span class=\"line\"></span><br><span class=\"line\">        server.stop(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    serve()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>client.py</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> print_function</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> grpc</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> helloworld_pb2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> helloworld_pb2_grpc</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    channel = grpc.insecure_channel(<span class=\"string\">'localhost:50051'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    stub = helloworld_pb2_grpc.GreeterStub(channel)</span><br><span class=\"line\"></span><br><span class=\"line\">    response = stub.SayHello(helloworld_pb2.HelloRequest(name=<span class=\"string\">'you'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"Greeter client received: \"</span> + response.message)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    run()</span><br></pre></td></tr></table></figure>\n","site":{"data":{"projects":[{"name":"extract_news","url":"https://github.com/hee0624/extract_news","desc":"Python package to parse news from various news website"}]}},"excerpt":"","more":"<h3 id=\"1-grpc介绍\"><a href=\"#1-grpc介绍\" class=\"headerlink\" title=\"1. grpc介绍\"></a>1. grpc介绍</h3><p>&nbsp;&nbsp;在 gRPC 里客户端应用可以像调用本地对象一样直接调用另一台不同的机器上服务端应用的方法，使得您能够更容易地创建分布式应用和服务。与许多 RPC 系统类似，gRPC 也是基于以下理念：定义一个服务，指定其能够被远程调用的方法（包含参数和返回类型）。在服务端实现这个接口，并运行一个 gRPC 服务器来处理客户端调用。在客户端拥有一个存根能够像服务端一样的方法。（客户端：语言不限；服务端：语言不限）</p>\n<h3 id=\"2-grep安装\"><a href=\"#2-grep安装\" class=\"headerlink\" title=\"2. grep安装\"></a>2. grep安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pip install grpcio</span><br><span class=\"line\"></span><br><span class=\"line\">pip install grpcio-tools</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-grep使用\"><a href=\"#3-grep使用\" class=\"headerlink\" title=\"3. grep使用\"></a>3. grep使用</h3><ul>\n<li>proto文件</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">syntax = \"proto3\";</span><br><span class=\"line\"></span><br><span class=\"line\">// The greeting service definition.</span><br><span class=\"line\"></span><br><span class=\"line\">service Greeter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  // Sends a greeting</span><br><span class=\"line\"></span><br><span class=\"line\">  rpc SayHello (HelloRequest) returns (HelloReply) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // Sends another greeting</span><br><span class=\"line\"></span><br><span class=\"line\">  rpc SayHelloAgain (HelloRequest) returns (HelloReply) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// The request message containing the user's name.</span><br><span class=\"line\"></span><br><span class=\"line\">message HelloRequest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  string name = 1;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// The response message containing the greetings</span><br><span class=\"line\"></span><br><span class=\"line\">message HelloReply &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  string message = 1;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. ./helloworld.proto</span><br></pre></td></tr></table></figure>\n<ul>\n<li>server.py</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> concurrent <span class=\"keyword\">import</span> futures</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> grpc</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> helloworld_pb2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> helloworld_pb2_grpc</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">_ONE_DAY_IN_SECONDS = <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">24</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Greeter</span><span class=\"params\">(helloworld_pb2_grpc.GreeterServicer)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">SayHello</span><span class=\"params\">(self, request, context)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> helloworld_pb2.HelloReply(message=<span class=\"string\">'Hello, %s!'</span> % request.name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">serve</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    server = grpc.server(futures.ThreadPoolExecutor(max_workers=<span class=\"number\">10</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    helloworld_pb2_grpc.add_GreeterServicer_to_server(Greeter(), server)</span><br><span class=\"line\"></span><br><span class=\"line\">    server.add_insecure_port(<span class=\"string\">'[::]:50051'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    server.start()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">            time.sleep(_ONE_DAY_IN_SECONDS)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">except</span> KeyboardInterrupt:</span><br><span class=\"line\"></span><br><span class=\"line\">        server.stop(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    serve()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>client.py</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> print_function</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> grpc</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> helloworld_pb2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> helloworld_pb2_grpc</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    channel = grpc.insecure_channel(<span class=\"string\">'localhost:50051'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    stub = helloworld_pb2_grpc.GreeterStub(channel)</span><br><span class=\"line\"></span><br><span class=\"line\">    response = stub.SayHello(helloworld_pb2.HelloRequest(name=<span class=\"string\">'you'</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"Greeter client received: \"</span> + response.message)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    run()</span><br></pre></td></tr></table></figure>\n"},{"title":"splash快速开始","date":"2018-05-28T02:11:05.000Z","_content":"\n\n### splash服务\nsplash是一个javascript渲染服务。轻量浏览器，http API (python, twisted, qt5)\n\n##### 安装splash(linux)\n\n1. install docker\n2. pull the image\n`$ sudo docker pull scrapinghub/splash`\n3. start the container\n`$ sudo docker run -p 8050:8050 -p 5023:5023 scrapinghub/splash`\n\n##### splash http api\n\n1. render.html 返回js渲染页面(html)\n`curl 'http://localhost:8050/render.html?url=http://domain.com/page-with-javascript.html&timeout=10&wait=0.5'`\n\n2. render.png 返回js渲染页面的截屏(png)\n```shell\n# render with timeout\ncurl 'http://localhost:8050/render.png?url=http://domain.com/page-with-javascript.html&timeout=10'\n# 320x240 thumbnail\ncurl 'http://localhost:8050/render.png?url=http://domain.com/page-with-javascript.html&width=320&height=240'\n```\n\n3. render.jpeg 返回js渲染页面的截屏(jpeg)\n```\n# render with default quality\ncurl 'http://localhost:8050/render.jpeg?url=http://domain.com/'\n# render with low quality\ncurl 'http://localhost:8050/render.jpeg?url=http://domain.com/&quality=30'\n```\n4. render.har 返回信息(request, respones, headers)\n\n5. render.josn 返回信息(html,png,etc)\n```\ncurl 'http://localhost:8050/render.json?url=http://domain.com/page-with-iframes.html&png=1&html=1&iframes=1'\n# HTML and meta information of page itself and all its iframes\ncurl 'http://localhost:8050/render.json?url=http://domain.com/page-with-iframes.html&html=1&iframes=1'\n# only meta information (like page/iframes titles and urls)\ncurl 'http://localhost:8050/render.json?url=http://domain.com/page-with-iframes.html&iframes=1'\n# render html and 320x240 thumbnail at once; do not return info about iframes\ncurl 'http://localhost:8050/render.json?url=http://domain.com/page-with-iframes.html&html=1&png=1&width=320&height=240'\n# Render page and execute simple Javascript function, display the js output\ncurl -X POST -H 'content-type: application/javascript' \\\n    -d 'function getAd(x){ return x; } getAd(\"abc\");' \\\n    'http://localhost:8050/render.json?url=http://domain.com&script=1'\n# Render page and execute simple Javascript function, display the js output and the console output\ncurl -X POST -H 'content-type: application/javascript' \\\n    -d 'function getAd(x){ return x; }; console.log(\"some log\"); console.log(\"another log\"); getAd(\"abc\");' \\\n    'http://localhost:8050/render.json?url=http://domain.com&script=1&console=1'\n```\n- - -\n\n### scrapy-splash插件\n\n##### 1. 安装scrapy-splash\n\n`$ pip install scrapy-splash`\n\n##### 2. 运行splash\n\n` docker run -p 8050:8050 scrapinghub/splash`\n\n##### 3. 配置scrapy （setting.py）\n\n```python\n# 增加splash服务\nSPLASH_URL = 'http://192.168.59.103:8050'\n# 开启splash middleware\nDOWNLOADER_MIDDLEWARES = {\n    'scrapy_splash.SplashCookiesMiddleware': 723,\n    'scrapy_splash.SplashMiddleware': 725,\n    'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware': 810,\n}\n# 开启middleware\nSPIDER_MIDDLEWARES = {\n    'scrapy_splash.SplashDeduplicateArgsMiddleware': 100,\n}\n# 设置一个自定义dupefilterclass\nDUPEFILTER_CLASS = 'scrapy_splash.SplashAwareDupeFilter'\n# \nHTTPCACHE_STORAGE = 'scrapy_splash.SplashAwareFSCacheStorage'\n```\n##### 4. 用法\n\n```\nyield SplashRequest(url, self.parse_result,\n    args={\n        # optional; parameters passed to Splash HTTP API\n        'wait': 0.5,\n\n        # 'url' is prefilled from request url\n        # 'http_method' is set to 'POST' for POST requests\n        # 'body' is set to request body for POST requests\n    },\n    endpoint='render.json', # optional; default is render.html\n    splash_url='<url>',     # optional; overrides SPLASH_URL\n    slot_policy=scrapy_splash.SlotPolicy.PER_DOMAIN,  # optional\n)\n```\n","source":"_posts/20180528-splash快速开始.md","raw":"---\ntitle: splash快速开始\ndate: 2018-05-28 10:11:05\ntags: 爬虫\n---\n\n\n### splash服务\nsplash是一个javascript渲染服务。轻量浏览器，http API (python, twisted, qt5)\n\n##### 安装splash(linux)\n\n1. install docker\n2. pull the image\n`$ sudo docker pull scrapinghub/splash`\n3. start the container\n`$ sudo docker run -p 8050:8050 -p 5023:5023 scrapinghub/splash`\n\n##### splash http api\n\n1. render.html 返回js渲染页面(html)\n`curl 'http://localhost:8050/render.html?url=http://domain.com/page-with-javascript.html&timeout=10&wait=0.5'`\n\n2. render.png 返回js渲染页面的截屏(png)\n```shell\n# render with timeout\ncurl 'http://localhost:8050/render.png?url=http://domain.com/page-with-javascript.html&timeout=10'\n# 320x240 thumbnail\ncurl 'http://localhost:8050/render.png?url=http://domain.com/page-with-javascript.html&width=320&height=240'\n```\n\n3. render.jpeg 返回js渲染页面的截屏(jpeg)\n```\n# render with default quality\ncurl 'http://localhost:8050/render.jpeg?url=http://domain.com/'\n# render with low quality\ncurl 'http://localhost:8050/render.jpeg?url=http://domain.com/&quality=30'\n```\n4. render.har 返回信息(request, respones, headers)\n\n5. render.josn 返回信息(html,png,etc)\n```\ncurl 'http://localhost:8050/render.json?url=http://domain.com/page-with-iframes.html&png=1&html=1&iframes=1'\n# HTML and meta information of page itself and all its iframes\ncurl 'http://localhost:8050/render.json?url=http://domain.com/page-with-iframes.html&html=1&iframes=1'\n# only meta information (like page/iframes titles and urls)\ncurl 'http://localhost:8050/render.json?url=http://domain.com/page-with-iframes.html&iframes=1'\n# render html and 320x240 thumbnail at once; do not return info about iframes\ncurl 'http://localhost:8050/render.json?url=http://domain.com/page-with-iframes.html&html=1&png=1&width=320&height=240'\n# Render page and execute simple Javascript function, display the js output\ncurl -X POST -H 'content-type: application/javascript' \\\n    -d 'function getAd(x){ return x; } getAd(\"abc\");' \\\n    'http://localhost:8050/render.json?url=http://domain.com&script=1'\n# Render page and execute simple Javascript function, display the js output and the console output\ncurl -X POST -H 'content-type: application/javascript' \\\n    -d 'function getAd(x){ return x; }; console.log(\"some log\"); console.log(\"another log\"); getAd(\"abc\");' \\\n    'http://localhost:8050/render.json?url=http://domain.com&script=1&console=1'\n```\n- - -\n\n### scrapy-splash插件\n\n##### 1. 安装scrapy-splash\n\n`$ pip install scrapy-splash`\n\n##### 2. 运行splash\n\n` docker run -p 8050:8050 scrapinghub/splash`\n\n##### 3. 配置scrapy （setting.py）\n\n```python\n# 增加splash服务\nSPLASH_URL = 'http://192.168.59.103:8050'\n# 开启splash middleware\nDOWNLOADER_MIDDLEWARES = {\n    'scrapy_splash.SplashCookiesMiddleware': 723,\n    'scrapy_splash.SplashMiddleware': 725,\n    'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware': 810,\n}\n# 开启middleware\nSPIDER_MIDDLEWARES = {\n    'scrapy_splash.SplashDeduplicateArgsMiddleware': 100,\n}\n# 设置一个自定义dupefilterclass\nDUPEFILTER_CLASS = 'scrapy_splash.SplashAwareDupeFilter'\n# \nHTTPCACHE_STORAGE = 'scrapy_splash.SplashAwareFSCacheStorage'\n```\n##### 4. 用法\n\n```\nyield SplashRequest(url, self.parse_result,\n    args={\n        # optional; parameters passed to Splash HTTP API\n        'wait': 0.5,\n\n        # 'url' is prefilled from request url\n        # 'http_method' is set to 'POST' for POST requests\n        # 'body' is set to request body for POST requests\n    },\n    endpoint='render.json', # optional; default is render.html\n    splash_url='<url>',     # optional; overrides SPLASH_URL\n    slot_policy=scrapy_splash.SlotPolicy.PER_DOMAIN,  # optional\n)\n```\n","slug":"20180528-splash快速开始","published":1,"updated":"2018-09-14T02:18:47.303Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjttrlg8i000dow6xmpbsezv1","content":"<h3 id=\"splash服务\"><a href=\"#splash服务\" class=\"headerlink\" title=\"splash服务\"></a>splash服务</h3><p>splash是一个javascript渲染服务。轻量浏览器，http API (python, twisted, qt5)</p>\n<h5 id=\"安装splash-linux\"><a href=\"#安装splash-linux\" class=\"headerlink\" title=\"安装splash(linux)\"></a>安装splash(linux)</h5><ol>\n<li>install docker</li>\n<li>pull the image<br><code>$ sudo docker pull scrapinghub/splash</code></li>\n<li>start the container<br><code>$ sudo docker run -p 8050:8050 -p 5023:5023 scrapinghub/splash</code></li>\n</ol>\n<h5 id=\"splash-http-api\"><a href=\"#splash-http-api\" class=\"headerlink\" title=\"splash http api\"></a>splash http api</h5><ol>\n<li><p>render.html 返回js渲染页面(html)<br><code>curl &#39;http://localhost:8050/render.html?url=http://domain.com/page-with-javascript.html&amp;timeout=10&amp;wait=0.5&#39;</code></p>\n</li>\n<li><p>render.png 返回js渲染页面的截屏(png)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> render with timeout</span><br><span class=\"line\">curl 'http://localhost:8050/render.png?url=http://domain.com/page-with-javascript.html&amp;timeout=10'</span><br><span class=\"line\"><span class=\"meta\">#</span> 320x240 thumbnail</span><br><span class=\"line\">curl 'http://localhost:8050/render.png?url=http://domain.com/page-with-javascript.html&amp;width=320&amp;height=240'</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>render.jpeg 返回js渲染页面的截屏(jpeg)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># render with default quality</span><br><span class=\"line\">curl &apos;http://localhost:8050/render.jpeg?url=http://domain.com/&apos;</span><br><span class=\"line\"># render with low quality</span><br><span class=\"line\">curl &apos;http://localhost:8050/render.jpeg?url=http://domain.com/&amp;quality=30&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>render.har 返回信息(request, respones, headers)</p>\n</li>\n<li><p>render.josn 返回信息(html,png,etc)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &apos;http://localhost:8050/render.json?url=http://domain.com/page-with-iframes.html&amp;png=1&amp;html=1&amp;iframes=1&apos;</span><br><span class=\"line\"># HTML and meta information of page itself and all its iframes</span><br><span class=\"line\">curl &apos;http://localhost:8050/render.json?url=http://domain.com/page-with-iframes.html&amp;html=1&amp;iframes=1&apos;</span><br><span class=\"line\"># only meta information (like page/iframes titles and urls)</span><br><span class=\"line\">curl &apos;http://localhost:8050/render.json?url=http://domain.com/page-with-iframes.html&amp;iframes=1&apos;</span><br><span class=\"line\"># render html and 320x240 thumbnail at once; do not return info about iframes</span><br><span class=\"line\">curl &apos;http://localhost:8050/render.json?url=http://domain.com/page-with-iframes.html&amp;html=1&amp;png=1&amp;width=320&amp;height=240&apos;</span><br><span class=\"line\"># Render page and execute simple Javascript function, display the js output</span><br><span class=\"line\">curl -X POST -H &apos;content-type: application/javascript&apos; \\</span><br><span class=\"line\">    -d &apos;function getAd(x)&#123; return x; &#125; getAd(&quot;abc&quot;);&apos; \\</span><br><span class=\"line\">    &apos;http://localhost:8050/render.json?url=http://domain.com&amp;script=1&apos;</span><br><span class=\"line\"># Render page and execute simple Javascript function, display the js output and the console output</span><br><span class=\"line\">curl -X POST -H &apos;content-type: application/javascript&apos; \\</span><br><span class=\"line\">    -d &apos;function getAd(x)&#123; return x; &#125;; console.log(&quot;some log&quot;); console.log(&quot;another log&quot;); getAd(&quot;abc&quot;);&apos; \\</span><br><span class=\"line\">    &apos;http://localhost:8050/render.json?url=http://domain.com&amp;script=1&amp;console=1&apos;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h3 id=\"scrapy-splash插件\"><a href=\"#scrapy-splash插件\" class=\"headerlink\" title=\"scrapy-splash插件\"></a>scrapy-splash插件</h3><h5 id=\"1-安装scrapy-splash\"><a href=\"#1-安装scrapy-splash\" class=\"headerlink\" title=\"1. 安装scrapy-splash\"></a>1. 安装scrapy-splash</h5><p><code>$ pip install scrapy-splash</code></p>\n<h5 id=\"2-运行splash\"><a href=\"#2-运行splash\" class=\"headerlink\" title=\"2. 运行splash\"></a>2. 运行splash</h5><p><code>docker run -p 8050:8050 scrapinghub/splash</code></p>\n<h5 id=\"3-配置scrapy-（setting-py）\"><a href=\"#3-配置scrapy-（setting-py）\" class=\"headerlink\" title=\"3. 配置scrapy （setting.py）\"></a>3. 配置scrapy （setting.py）</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 增加splash服务</span></span><br><span class=\"line\">SPLASH_URL = <span class=\"string\">'http://192.168.59.103:8050'</span></span><br><span class=\"line\"><span class=\"comment\"># 开启splash middleware</span></span><br><span class=\"line\">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class=\"line\">    <span class=\"string\">'scrapy_splash.SplashCookiesMiddleware'</span>: <span class=\"number\">723</span>,</span><br><span class=\"line\">    <span class=\"string\">'scrapy_splash.SplashMiddleware'</span>: <span class=\"number\">725</span>,</span><br><span class=\"line\">    <span class=\"string\">'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware'</span>: <span class=\"number\">810</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 开启middleware</span></span><br><span class=\"line\">SPIDER_MIDDLEWARES = &#123;</span><br><span class=\"line\">    <span class=\"string\">'scrapy_splash.SplashDeduplicateArgsMiddleware'</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 设置一个自定义dupefilterclass</span></span><br><span class=\"line\">DUPEFILTER_CLASS = <span class=\"string\">'scrapy_splash.SplashAwareDupeFilter'</span></span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\">HTTPCACHE_STORAGE = <span class=\"string\">'scrapy_splash.SplashAwareFSCacheStorage'</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"4-用法\"><a href=\"#4-用法\" class=\"headerlink\" title=\"4. 用法\"></a>4. 用法</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yield SplashRequest(url, self.parse_result,</span><br><span class=\"line\">    args=&#123;</span><br><span class=\"line\">        # optional; parameters passed to Splash HTTP API</span><br><span class=\"line\">        &apos;wait&apos;: 0.5,</span><br><span class=\"line\"></span><br><span class=\"line\">        # &apos;url&apos; is prefilled from request url</span><br><span class=\"line\">        # &apos;http_method&apos; is set to &apos;POST&apos; for POST requests</span><br><span class=\"line\">        # &apos;body&apos; is set to request body for POST requests</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    endpoint=&apos;render.json&apos;, # optional; default is render.html</span><br><span class=\"line\">    splash_url=&apos;&lt;url&gt;&apos;,     # optional; overrides SPLASH_URL</span><br><span class=\"line\">    slot_policy=scrapy_splash.SlotPolicy.PER_DOMAIN,  # optional</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n","site":{"data":{"projects":[{"name":"extract_news","url":"https://github.com/hee0624/extract_news","desc":"Python package to parse news from various news website"}]}},"excerpt":"","more":"<h3 id=\"splash服务\"><a href=\"#splash服务\" class=\"headerlink\" title=\"splash服务\"></a>splash服务</h3><p>splash是一个javascript渲染服务。轻量浏览器，http API (python, twisted, qt5)</p>\n<h5 id=\"安装splash-linux\"><a href=\"#安装splash-linux\" class=\"headerlink\" title=\"安装splash(linux)\"></a>安装splash(linux)</h5><ol>\n<li>install docker</li>\n<li>pull the image<br><code>$ sudo docker pull scrapinghub/splash</code></li>\n<li>start the container<br><code>$ sudo docker run -p 8050:8050 -p 5023:5023 scrapinghub/splash</code></li>\n</ol>\n<h5 id=\"splash-http-api\"><a href=\"#splash-http-api\" class=\"headerlink\" title=\"splash http api\"></a>splash http api</h5><ol>\n<li><p>render.html 返回js渲染页面(html)<br><code>curl &#39;http://localhost:8050/render.html?url=http://domain.com/page-with-javascript.html&amp;timeout=10&amp;wait=0.5&#39;</code></p>\n</li>\n<li><p>render.png 返回js渲染页面的截屏(png)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> render with timeout</span><br><span class=\"line\">curl 'http://localhost:8050/render.png?url=http://domain.com/page-with-javascript.html&amp;timeout=10'</span><br><span class=\"line\"><span class=\"meta\">#</span> 320x240 thumbnail</span><br><span class=\"line\">curl 'http://localhost:8050/render.png?url=http://domain.com/page-with-javascript.html&amp;width=320&amp;height=240'</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>render.jpeg 返回js渲染页面的截屏(jpeg)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># render with default quality</span><br><span class=\"line\">curl &apos;http://localhost:8050/render.jpeg?url=http://domain.com/&apos;</span><br><span class=\"line\"># render with low quality</span><br><span class=\"line\">curl &apos;http://localhost:8050/render.jpeg?url=http://domain.com/&amp;quality=30&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>render.har 返回信息(request, respones, headers)</p>\n</li>\n<li><p>render.josn 返回信息(html,png,etc)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl &apos;http://localhost:8050/render.json?url=http://domain.com/page-with-iframes.html&amp;png=1&amp;html=1&amp;iframes=1&apos;</span><br><span class=\"line\"># HTML and meta information of page itself and all its iframes</span><br><span class=\"line\">curl &apos;http://localhost:8050/render.json?url=http://domain.com/page-with-iframes.html&amp;html=1&amp;iframes=1&apos;</span><br><span class=\"line\"># only meta information (like page/iframes titles and urls)</span><br><span class=\"line\">curl &apos;http://localhost:8050/render.json?url=http://domain.com/page-with-iframes.html&amp;iframes=1&apos;</span><br><span class=\"line\"># render html and 320x240 thumbnail at once; do not return info about iframes</span><br><span class=\"line\">curl &apos;http://localhost:8050/render.json?url=http://domain.com/page-with-iframes.html&amp;html=1&amp;png=1&amp;width=320&amp;height=240&apos;</span><br><span class=\"line\"># Render page and execute simple Javascript function, display the js output</span><br><span class=\"line\">curl -X POST -H &apos;content-type: application/javascript&apos; \\</span><br><span class=\"line\">    -d &apos;function getAd(x)&#123; return x; &#125; getAd(&quot;abc&quot;);&apos; \\</span><br><span class=\"line\">    &apos;http://localhost:8050/render.json?url=http://domain.com&amp;script=1&apos;</span><br><span class=\"line\"># Render page and execute simple Javascript function, display the js output and the console output</span><br><span class=\"line\">curl -X POST -H &apos;content-type: application/javascript&apos; \\</span><br><span class=\"line\">    -d &apos;function getAd(x)&#123; return x; &#125;; console.log(&quot;some log&quot;); console.log(&quot;another log&quot;); getAd(&quot;abc&quot;);&apos; \\</span><br><span class=\"line\">    &apos;http://localhost:8050/render.json?url=http://domain.com&amp;script=1&amp;console=1&apos;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h3 id=\"scrapy-splash插件\"><a href=\"#scrapy-splash插件\" class=\"headerlink\" title=\"scrapy-splash插件\"></a>scrapy-splash插件</h3><h5 id=\"1-安装scrapy-splash\"><a href=\"#1-安装scrapy-splash\" class=\"headerlink\" title=\"1. 安装scrapy-splash\"></a>1. 安装scrapy-splash</h5><p><code>$ pip install scrapy-splash</code></p>\n<h5 id=\"2-运行splash\"><a href=\"#2-运行splash\" class=\"headerlink\" title=\"2. 运行splash\"></a>2. 运行splash</h5><p><code>docker run -p 8050:8050 scrapinghub/splash</code></p>\n<h5 id=\"3-配置scrapy-（setting-py）\"><a href=\"#3-配置scrapy-（setting-py）\" class=\"headerlink\" title=\"3. 配置scrapy （setting.py）\"></a>3. 配置scrapy （setting.py）</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 增加splash服务</span></span><br><span class=\"line\">SPLASH_URL = <span class=\"string\">'http://192.168.59.103:8050'</span></span><br><span class=\"line\"><span class=\"comment\"># 开启splash middleware</span></span><br><span class=\"line\">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class=\"line\">    <span class=\"string\">'scrapy_splash.SplashCookiesMiddleware'</span>: <span class=\"number\">723</span>,</span><br><span class=\"line\">    <span class=\"string\">'scrapy_splash.SplashMiddleware'</span>: <span class=\"number\">725</span>,</span><br><span class=\"line\">    <span class=\"string\">'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware'</span>: <span class=\"number\">810</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 开启middleware</span></span><br><span class=\"line\">SPIDER_MIDDLEWARES = &#123;</span><br><span class=\"line\">    <span class=\"string\">'scrapy_splash.SplashDeduplicateArgsMiddleware'</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 设置一个自定义dupefilterclass</span></span><br><span class=\"line\">DUPEFILTER_CLASS = <span class=\"string\">'scrapy_splash.SplashAwareDupeFilter'</span></span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\">HTTPCACHE_STORAGE = <span class=\"string\">'scrapy_splash.SplashAwareFSCacheStorage'</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"4-用法\"><a href=\"#4-用法\" class=\"headerlink\" title=\"4. 用法\"></a>4. 用法</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yield SplashRequest(url, self.parse_result,</span><br><span class=\"line\">    args=&#123;</span><br><span class=\"line\">        # optional; parameters passed to Splash HTTP API</span><br><span class=\"line\">        &apos;wait&apos;: 0.5,</span><br><span class=\"line\"></span><br><span class=\"line\">        # &apos;url&apos; is prefilled from request url</span><br><span class=\"line\">        # &apos;http_method&apos; is set to &apos;POST&apos; for POST requests</span><br><span class=\"line\">        # &apos;body&apos; is set to request body for POST requests</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    endpoint=&apos;render.json&apos;, # optional; default is render.html</span><br><span class=\"line\">    splash_url=&apos;&lt;url&gt;&apos;,     # optional; overrides SPLASH_URL</span><br><span class=\"line\">    slot_policy=scrapy_splash.SlotPolicy.PER_DOMAIN,  # optional</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n"},{"title":"git提交规范","date":"2018-07-10T02:11:05.000Z","_content":"\n\n#### 一、Commit message 的作用\n\n1. 提供更多的历史信息，方便快速浏览\n2. 可以过滤某些commit（比如文档改动），便于快速查找信息\n3. 可以直接从commit生成Change log\n\n#### 二、Commit message 的格式\n\n每次提交，Commit message 都包括三个部分：Header，Body 和 Footer。\n\n```\n<type>(<scope>): <subject>\n// 空一行\n<body>\n// 空一行\n<footer>\n其中，Header 是必需的，Body 和 Footer 可以省略。\n```\n不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）。这是为了避免自动换行影响美观。\n\n##### 2.1 Header\nHeader部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）。\n\n###### **type**\n\ntype用于说明 commit 的类别，只允许使用下面7个标识。\n\n- feat：新功能（feature）\n- fix：修补bug\n- docs：文档（documentation）\n- style： 格式（不影响代码运行的变动）\n- refactor：重构（即不是新增功能，也不是修改bug的代码变动）\n- test：增加测试\n- chore：构建过程或辅助工具的变动\n如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 -Change log，建议是不要。\n\n###### **scope**\n\nscope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。\n\n###### **subject**\n\nsubject是 commit 目的的简短描述，不超过50个字符。\n\n以动词开头，使用第一人称现在时，比如change，而不是changed或changes\n第一个字母小写\n结尾不加句号（.）\n##### 2.2 Body\nBody 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。\n\n\nMore detailed explanatory text, if necessary.  Wrap it to \nabout 72 characters or so. \n\nFurther paragraphs come after blank lines.\n\n- Bullet points are okay, too\n- Use a hanging indent\n有两个注意点。\n\n（1）使用第一人称现在时，比如使用change而不是changed或changes。\n\n（2）应该说明代码变动的动机，以及与以前行为的对比。\n\n##### 2.3 Footer\nFooter 部分只用于两种情况。\n\n######（1）不兼容变动\n\n如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法。\n\n\nBREAKING CHANGE: isolate scope bindings definition has changed.\n\n    To migrate the code follow the example below:\n\n    Before:\n\n    scope: {\n      myAttr: 'attribute',\n    }\n\n    After:\n\n    scope: {\n      myAttr: '@',\n    }\n\n    The removed `inject` wasn't generaly useful for directives so there should be no code using it.\n######（2）关闭 Issue\n\n如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。\n\n\nCloses #234\n也可以一次关闭多个 issue 。\n\n\nCloses #123, #245, #992\n2.4 Revert\n还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以revert:开头，后面跟着被撤销 Commit 的 Header。\n\n\nrevert: feat(pencil): add 'graphiteWidth' option\n\nThis reverts commit 667ecc1654a317a13331b17617d973392f415f02.\nBody部分的格式是固定的，必须写成This reverts commit &lt;hash>.，其中的hash是被撤销 commit 的 SHA 标识符。\n\n如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的Reverts小标题下面。\n","source":"_posts/20180710-git提交规范.md","raw":"---\ntitle: git提交规范\ndate: 2018-07-10 10:11:05\ntags: git\n---\n\n\n#### 一、Commit message 的作用\n\n1. 提供更多的历史信息，方便快速浏览\n2. 可以过滤某些commit（比如文档改动），便于快速查找信息\n3. 可以直接从commit生成Change log\n\n#### 二、Commit message 的格式\n\n每次提交，Commit message 都包括三个部分：Header，Body 和 Footer。\n\n```\n<type>(<scope>): <subject>\n// 空一行\n<body>\n// 空一行\n<footer>\n其中，Header 是必需的，Body 和 Footer 可以省略。\n```\n不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）。这是为了避免自动换行影响美观。\n\n##### 2.1 Header\nHeader部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）。\n\n###### **type**\n\ntype用于说明 commit 的类别，只允许使用下面7个标识。\n\n- feat：新功能（feature）\n- fix：修补bug\n- docs：文档（documentation）\n- style： 格式（不影响代码运行的变动）\n- refactor：重构（即不是新增功能，也不是修改bug的代码变动）\n- test：增加测试\n- chore：构建过程或辅助工具的变动\n如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 -Change log，建议是不要。\n\n###### **scope**\n\nscope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。\n\n###### **subject**\n\nsubject是 commit 目的的简短描述，不超过50个字符。\n\n以动词开头，使用第一人称现在时，比如change，而不是changed或changes\n第一个字母小写\n结尾不加句号（.）\n##### 2.2 Body\nBody 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。\n\n\nMore detailed explanatory text, if necessary.  Wrap it to \nabout 72 characters or so. \n\nFurther paragraphs come after blank lines.\n\n- Bullet points are okay, too\n- Use a hanging indent\n有两个注意点。\n\n（1）使用第一人称现在时，比如使用change而不是changed或changes。\n\n（2）应该说明代码变动的动机，以及与以前行为的对比。\n\n##### 2.3 Footer\nFooter 部分只用于两种情况。\n\n######（1）不兼容变动\n\n如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法。\n\n\nBREAKING CHANGE: isolate scope bindings definition has changed.\n\n    To migrate the code follow the example below:\n\n    Before:\n\n    scope: {\n      myAttr: 'attribute',\n    }\n\n    After:\n\n    scope: {\n      myAttr: '@',\n    }\n\n    The removed `inject` wasn't generaly useful for directives so there should be no code using it.\n######（2）关闭 Issue\n\n如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。\n\n\nCloses #234\n也可以一次关闭多个 issue 。\n\n\nCloses #123, #245, #992\n2.4 Revert\n还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以revert:开头，后面跟着被撤销 Commit 的 Header。\n\n\nrevert: feat(pencil): add 'graphiteWidth' option\n\nThis reverts commit 667ecc1654a317a13331b17617d973392f415f02.\nBody部分的格式是固定的，必须写成This reverts commit &lt;hash>.，其中的hash是被撤销 commit 的 SHA 标识符。\n\n如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的Reverts小标题下面。\n","slug":"20180710-git提交规范","published":1,"updated":"2018-09-14T02:30:31.136Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjttrlg8m000fow6xagy49a7d","content":"<h4 id=\"一、Commit-message-的作用\"><a href=\"#一、Commit-message-的作用\" class=\"headerlink\" title=\"一、Commit message 的作用\"></a>一、Commit message 的作用</h4><ol>\n<li>提供更多的历史信息，方便快速浏览</li>\n<li>可以过滤某些commit（比如文档改动），便于快速查找信息</li>\n<li>可以直接从commit生成Change log</li>\n</ol>\n<h4 id=\"二、Commit-message-的格式\"><a href=\"#二、Commit-message-的格式\" class=\"headerlink\" title=\"二、Commit message 的格式\"></a>二、Commit message 的格式</h4><p>每次提交，Commit message 都包括三个部分：Header，Body 和 Footer。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class=\"line\">// 空一行</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">// 空一行</span><br><span class=\"line\">&lt;footer&gt;</span><br><span class=\"line\">其中，Header 是必需的，Body 和 Footer 可以省略。</span><br></pre></td></tr></table></figure>\n<p>不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）。这是为了避免自动换行影响美观。</p>\n<h5 id=\"2-1-Header\"><a href=\"#2-1-Header\" class=\"headerlink\" title=\"2.1 Header\"></a>2.1 Header</h5><p>Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）。</p>\n<h6 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a><strong>type</strong></h6><p>type用于说明 commit 的类别，只允许使用下面7个标识。</p>\n<ul>\n<li>feat：新功能（feature）</li>\n<li>fix：修补bug</li>\n<li>docs：文档（documentation）</li>\n<li>style： 格式（不影响代码运行的变动）</li>\n<li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li>\n<li>test：增加测试</li>\n<li>chore：构建过程或辅助工具的变动<br>如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 -Change log，建议是不要。</li>\n</ul>\n<h6 id=\"scope\"><a href=\"#scope\" class=\"headerlink\" title=\"scope\"></a><strong>scope</strong></h6><p>scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p>\n<h6 id=\"subject\"><a href=\"#subject\" class=\"headerlink\" title=\"subject\"></a><strong>subject</strong></h6><p>subject是 commit 目的的简短描述，不超过50个字符。</p>\n<p>以动词开头，使用第一人称现在时，比如change，而不是changed或changes<br>第一个字母小写<br>结尾不加句号（.）</p>\n<h5 id=\"2-2-Body\"><a href=\"#2-2-Body\" class=\"headerlink\" title=\"2.2 Body\"></a>2.2 Body</h5><p>Body 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。</p>\n<p>More detailed explanatory text, if necessary.  Wrap it to<br>about 72 characters or so. </p>\n<p>Further paragraphs come after blank lines.</p>\n<ul>\n<li>Bullet points are okay, too</li>\n<li>Use a hanging indent<br>有两个注意点。</li>\n</ul>\n<p>（1）使用第一人称现在时，比如使用change而不是changed或changes。</p>\n<p>（2）应该说明代码变动的动机，以及与以前行为的对比。</p>\n<h5 id=\"2-3-Footer\"><a href=\"#2-3-Footer\" class=\"headerlink\" title=\"2.3 Footer\"></a>2.3 Footer</h5><p>Footer 部分只用于两种情况。</p>\n<h6 id=\"（1）不兼容变动\"><a href=\"#（1）不兼容变动\" class=\"headerlink\" title=\"（1）不兼容变动\"></a>（1）不兼容变动</h6><p>如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法。</p>\n<p>BREAKING CHANGE: isolate scope bindings definition has changed.</p>\n<pre><code>To migrate the code follow the example below:\n\nBefore:\n\nscope: {\n  myAttr: &#39;attribute&#39;,\n}\n\nAfter:\n\nscope: {\n  myAttr: &#39;@&#39;,\n}\n\nThe removed `inject` wasn&#39;t generaly useful for directives so there should be no code using it.\n</code></pre><h6 id=\"（2）关闭-Issue\"><a href=\"#（2）关闭-Issue\" class=\"headerlink\" title=\"（2）关闭 Issue\"></a>（2）关闭 Issue</h6><p>如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。</p>\n<p>Closes #234<br>也可以一次关闭多个 issue 。</p>\n<p>Closes #123, #245, #992<br>2.4 Revert<br>还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以revert:开头，后面跟着被撤销 Commit 的 Header。</p>\n<p>revert: feat(pencil): add ‘graphiteWidth’ option</p>\n<p>This reverts commit 667ecc1654a317a13331b17617d973392f415f02.<br>Body部分的格式是固定的，必须写成This reverts commit &lt;hash&gt;.，其中的hash是被撤销 commit 的 SHA 标识符。</p>\n<p>如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的Reverts小标题下面。</p>\n","site":{"data":{"projects":[{"name":"extract_news","url":"https://github.com/hee0624/extract_news","desc":"Python package to parse news from various news website"}]}},"excerpt":"","more":"<h4 id=\"一、Commit-message-的作用\"><a href=\"#一、Commit-message-的作用\" class=\"headerlink\" title=\"一、Commit message 的作用\"></a>一、Commit message 的作用</h4><ol>\n<li>提供更多的历史信息，方便快速浏览</li>\n<li>可以过滤某些commit（比如文档改动），便于快速查找信息</li>\n<li>可以直接从commit生成Change log</li>\n</ol>\n<h4 id=\"二、Commit-message-的格式\"><a href=\"#二、Commit-message-的格式\" class=\"headerlink\" title=\"二、Commit message 的格式\"></a>二、Commit message 的格式</h4><p>每次提交，Commit message 都包括三个部分：Header，Body 和 Footer。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</span><br><span class=\"line\">// 空一行</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">// 空一行</span><br><span class=\"line\">&lt;footer&gt;</span><br><span class=\"line\">其中，Header 是必需的，Body 和 Footer 可以省略。</span><br></pre></td></tr></table></figure>\n<p>不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）。这是为了避免自动换行影响美观。</p>\n<h5 id=\"2-1-Header\"><a href=\"#2-1-Header\" class=\"headerlink\" title=\"2.1 Header\"></a>2.1 Header</h5><p>Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）。</p>\n<h6 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a><strong>type</strong></h6><p>type用于说明 commit 的类别，只允许使用下面7个标识。</p>\n<ul>\n<li>feat：新功能（feature）</li>\n<li>fix：修补bug</li>\n<li>docs：文档（documentation）</li>\n<li>style： 格式（不影响代码运行的变动）</li>\n<li>refactor：重构（即不是新增功能，也不是修改bug的代码变动）</li>\n<li>test：增加测试</li>\n<li>chore：构建过程或辅助工具的变动<br>如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 -Change log，建议是不要。</li>\n</ul>\n<h6 id=\"scope\"><a href=\"#scope\" class=\"headerlink\" title=\"scope\"></a><strong>scope</strong></h6><p>scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p>\n<h6 id=\"subject\"><a href=\"#subject\" class=\"headerlink\" title=\"subject\"></a><strong>subject</strong></h6><p>subject是 commit 目的的简短描述，不超过50个字符。</p>\n<p>以动词开头，使用第一人称现在时，比如change，而不是changed或changes<br>第一个字母小写<br>结尾不加句号（.）</p>\n<h5 id=\"2-2-Body\"><a href=\"#2-2-Body\" class=\"headerlink\" title=\"2.2 Body\"></a>2.2 Body</h5><p>Body 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。</p>\n<p>More detailed explanatory text, if necessary.  Wrap it to<br>about 72 characters or so. </p>\n<p>Further paragraphs come after blank lines.</p>\n<ul>\n<li>Bullet points are okay, too</li>\n<li>Use a hanging indent<br>有两个注意点。</li>\n</ul>\n<p>（1）使用第一人称现在时，比如使用change而不是changed或changes。</p>\n<p>（2）应该说明代码变动的动机，以及与以前行为的对比。</p>\n<h5 id=\"2-3-Footer\"><a href=\"#2-3-Footer\" class=\"headerlink\" title=\"2.3 Footer\"></a>2.3 Footer</h5><p>Footer 部分只用于两种情况。</p>\n<h6 id=\"（1）不兼容变动\"><a href=\"#（1）不兼容变动\" class=\"headerlink\" title=\"（1）不兼容变动\"></a>（1）不兼容变动</h6><p>如果当前代码与上一个版本不兼容，则 Footer 部分以BREAKING CHANGE开头，后面是对变动的描述、以及变动理由和迁移方法。</p>\n<p>BREAKING CHANGE: isolate scope bindings definition has changed.</p>\n<pre><code>To migrate the code follow the example below:\n\nBefore:\n\nscope: {\n  myAttr: &#39;attribute&#39;,\n}\n\nAfter:\n\nscope: {\n  myAttr: &#39;@&#39;,\n}\n\nThe removed `inject` wasn&#39;t generaly useful for directives so there should be no code using it.\n</code></pre><h6 id=\"（2）关闭-Issue\"><a href=\"#（2）关闭-Issue\" class=\"headerlink\" title=\"（2）关闭 Issue\"></a>（2）关闭 Issue</h6><p>如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。</p>\n<p>Closes #234<br>也可以一次关闭多个 issue 。</p>\n<p>Closes #123, #245, #992<br>2.4 Revert<br>还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以revert:开头，后面跟着被撤销 Commit 的 Header。</p>\n<p>revert: feat(pencil): add ‘graphiteWidth’ option</p>\n<p>This reverts commit 667ecc1654a317a13331b17617d973392f415f02.<br>Body部分的格式是固定的，必须写成This reverts commit &lt;hash&gt;.，其中的hash是被撤销 commit 的 SHA 标识符。</p>\n<p>如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的Reverts小标题下面。</p>\n"},{"title":"Arcanist快速开始(代码review)","date":"2018-09-14T02:11:05.000Z","_content":"\n\n\n### 安装依赖\n\n1. 安装php\n2. 安装git\n3. 安装Arcanist\n```shell\n$ mkdir somewhere/\n$ cd somewhere/\nsomewhere/ $ git clone https://github.com/phacility/libphutil.git\nsomewhere/ $ git clone https://github.com/phacility/arcanist.git\n```\n&nbsp;&nbsp;**环境变量**`export PATH=\"$PATH:/somewhere/arcanist/bin/\"`\n\n\n### 配置项目\n\n&nbsp;&nbsp;在项目工作根目录创建.arcconfig文件\n{\n  \"project_id\": \"news_spider\",\n  \"phabricator.uri\" : \"http://p.datahorizon.top:3721/\"\n}\n\n\n### 安装Arcanist凭证\n\n&nbsp;&nbsp;凭证允许您进行身份验证。 您必须在 Phabricator 上有一个帐户，然后才能执行此步骤。\n\n```\n$ cd yourproject/\nyourproject/ $ arc install-certificate\n...\n```\n\n### 发送更改以供审核\n\n```\narc diff\n```\n\n&nbsp;&nbsp;如果已经push 的代码可以`arc diff  commitid` \n","source":"_posts/20180914-Arcanist快速开始.md","raw":"---\ntitle: Arcanist快速开始(代码review)\ndate: 2018-09-14 10:11:05\ntags: 代码审核\n---\n\n\n\n### 安装依赖\n\n1. 安装php\n2. 安装git\n3. 安装Arcanist\n```shell\n$ mkdir somewhere/\n$ cd somewhere/\nsomewhere/ $ git clone https://github.com/phacility/libphutil.git\nsomewhere/ $ git clone https://github.com/phacility/arcanist.git\n```\n&nbsp;&nbsp;**环境变量**`export PATH=\"$PATH:/somewhere/arcanist/bin/\"`\n\n\n### 配置项目\n\n&nbsp;&nbsp;在项目工作根目录创建.arcconfig文件\n{\n  \"project_id\": \"news_spider\",\n  \"phabricator.uri\" : \"http://p.datahorizon.top:3721/\"\n}\n\n\n### 安装Arcanist凭证\n\n&nbsp;&nbsp;凭证允许您进行身份验证。 您必须在 Phabricator 上有一个帐户，然后才能执行此步骤。\n\n```\n$ cd yourproject/\nyourproject/ $ arc install-certificate\n...\n```\n\n### 发送更改以供审核\n\n```\narc diff\n```\n\n&nbsp;&nbsp;如果已经push 的代码可以`arc diff  commitid` \n","slug":"20180914-Arcanist快速开始","published":1,"updated":"2018-09-14T02:15:03.721Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjttrlg8q000how6x8ay9tj90","content":"<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><ol>\n<li>安装php</li>\n<li>安装git</li>\n<li>安装Arcanist<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> mkdir somewhere/</span><br><span class=\"line\"><span class=\"meta\">$</span> cd somewhere/</span><br><span class=\"line\">somewhere/ $ git clone https://github.com/phacility/libphutil.git</span><br><span class=\"line\">somewhere/ $ git clone https://github.com/phacility/arcanist.git</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>&nbsp;&nbsp;<strong>环境变量</strong><code>export PATH=&quot;$PATH:/somewhere/arcanist/bin/&quot;</code></p>\n<h3 id=\"配置项目\"><a href=\"#配置项目\" class=\"headerlink\" title=\"配置项目\"></a>配置项目</h3><p>&nbsp;&nbsp;在项目工作根目录创建.arcconfig文件<br>{<br>  “project_id”: “news_spider”,<br>  “phabricator.uri” : “<a href=\"http://p.datahorizon.top:3721/\" target=\"_blank\" rel=\"noopener\">http://p.datahorizon.top:3721/</a>“<br>}</p>\n<h3 id=\"安装Arcanist凭证\"><a href=\"#安装Arcanist凭证\" class=\"headerlink\" title=\"安装Arcanist凭证\"></a>安装Arcanist凭证</h3><p>&nbsp;&nbsp;凭证允许您进行身份验证。 您必须在 Phabricator 上有一个帐户，然后才能执行此步骤。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd yourproject/</span><br><span class=\"line\">yourproject/ $ arc install-certificate</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h3 id=\"发送更改以供审核\"><a href=\"#发送更改以供审核\" class=\"headerlink\" title=\"发送更改以供审核\"></a>发送更改以供审核</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arc diff</span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;如果已经push 的代码可以<code>arc diff  commitid</code> </p>\n","site":{"data":{"projects":[{"name":"extract_news","url":"https://github.com/hee0624/extract_news","desc":"Python package to parse news from various news website"}]}},"excerpt":"","more":"<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><ol>\n<li>安装php</li>\n<li>安装git</li>\n<li>安装Arcanist<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> mkdir somewhere/</span><br><span class=\"line\"><span class=\"meta\">$</span> cd somewhere/</span><br><span class=\"line\">somewhere/ $ git clone https://github.com/phacility/libphutil.git</span><br><span class=\"line\">somewhere/ $ git clone https://github.com/phacility/arcanist.git</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>&nbsp;&nbsp;<strong>环境变量</strong><code>export PATH=&quot;$PATH:/somewhere/arcanist/bin/&quot;</code></p>\n<h3 id=\"配置项目\"><a href=\"#配置项目\" class=\"headerlink\" title=\"配置项目\"></a>配置项目</h3><p>&nbsp;&nbsp;在项目工作根目录创建.arcconfig文件<br>{<br>  “project_id”: “news_spider”,<br>  “phabricator.uri” : “<a href=\"http://p.datahorizon.top:3721/\" target=\"_blank\" rel=\"noopener\">http://p.datahorizon.top:3721/</a>“<br>}</p>\n<h3 id=\"安装Arcanist凭证\"><a href=\"#安装Arcanist凭证\" class=\"headerlink\" title=\"安装Arcanist凭证\"></a>安装Arcanist凭证</h3><p>&nbsp;&nbsp;凭证允许您进行身份验证。 您必须在 Phabricator 上有一个帐户，然后才能执行此步骤。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd yourproject/</span><br><span class=\"line\">yourproject/ $ arc install-certificate</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<h3 id=\"发送更改以供审核\"><a href=\"#发送更改以供审核\" class=\"headerlink\" title=\"发送更改以供审核\"></a>发送更改以供审核</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arc diff</span><br></pre></td></tr></table></figure>\n<p>&nbsp;&nbsp;如果已经push 的代码可以<code>arc diff  commitid</code> </p>\n"},{"title":"Python的实用的小技巧","date":"2018-09-27T12:28:06.000Z","_content":"\n\n&emsp;&emsp;&emsp;&emsp;Python是机器学习的主流语言，没有之一。今年5月，它首次在PYPL排行榜上超越JAVA，成为全球第一大编程语言。而一个月后，Stack Overflow也分享了最新的编程语言浏览量统计数字，结果显示，Python的月活历史性地超越了Java和JavaScript，真正问鼎榜首。\n\n“人生苦短，我选Python”。那么，你真的掌握了Python吗？\n\n![python](20180927-Python的实用的小技巧/f16935ad62e7db9560a61f4242ca212f.jpeg)\n### 1. 交换变量\n有时候，当我们要交换两个变量的值时，一种常规的方法是创建一个临时变量，然后用它来进行交换。比如：\n```python\n# 输入\na = 5\nb = 10\n#创建临时变量\ntemp = a\na = b\nb = temp\nprint(a)\nprint(b)\n```\n但在Python中，其实我们有一种更简洁的写法：`a, b = b, a`\n### 2. 将list中的所有元素转为单个字符串\n列表和字符串是Python中最常见的数据类型，它们会遇到互相转换的需要。那么，我们该怎么把list中的所有元素转为字符串呢？\n```python\na = ['python', 'is', 'awesome']\nprint(''.join(a))\n```\n###  3. 查找list中出现次数最多的元素\n给定一个包含多个元素的list，让你查找其中出现次数最多的元素，你会怎么做？在下图中，我们介绍了两种方法，其中第一种是利用max()函数的key参数，第二种则是使用Counter。\n```\na = [1,2,3,1,2,3,2,2,4,5,1]\nprint(max(set(a),key = a.count))\nfrom collections import Counter\nc = Counter(a)\nprint(c.most_common(3))\n```\n### 4. 判断两个字符串是否是anagram\n所谓anagram，就是两个词所用的字母及其个数都是一样的，但是它们字母的位置不一样，比如abc，bac，acb。在Python中，Counter可以解决这个问题，\n```python\nfrom collections import Counter\nCounter(str1) == Counter(str2)\n```\n\n\n5. 字符串倒转\n字符串倒转，就是把1234转成4321。下面我们介绍了三种方法：\n\n方法一：最简单的切片法，a[::-1]就相当于a[尾:头:-1]。\n\n方法二：用Python自带reversed()函数，它可被用于list倒转。\n\n方法三：第三种是通过倒转数据类型和切片倒转整数。\n\n\n\n6. list倒转\n和字符串倒转类似，切片法也可以被用于list倒转，如下面的第一种方法。第二种方法调用的是上面提到的reversed()函数。\n```python\na = [5,4,3,2,1]\nprint(a[::-1])\nfor ele in reversed(a):\n    print(ele)\n```\n### 7. 二维矩阵转置\n如果要转置矩阵，可以直接使用使用zip()函数。除此之外，没有比import numpy更简单的方法了。\n\n\n\n### 8. 链式比较\n如果想输出数组中介于4-7之间的元素，java是这么写的：if( b > 4 && b < 7){ }，但Python更人性化。包括最后一句1 == b < 20，这和C、java也很不一样。\n\n\n\n### 9. 链式调用\n在python中实现链式调用只需在函数返回对象自己就行了。\n\n\n\n### 10. 复制list\n如果是刚学习Python的C用户，你可能会想写b = a，但这是错的。在Python中，变量指向的是某个对象的标签。也就是说，按照这种的写法，b和a指向的是内存中的同一个列表，对b操作，就相当于对a操作。所以正确的写法有以下几种：\n\n方法一：b=a[:]。\n\n方法二：b=list(a)。\n\n方法三：使用Python 3的copy()函数，直接复制list，类似a[:]。\n\n方法四：使用copy.deepcopy()。\n\n\n\n### 11. 判断一个key是否在字典中\n如果目标key不在字典中，以下代码会返回None或default。\n\n\n\n### 12. 按value排序字典\nPython的内置字典数据类型是无序的，而key可以被用来获取对应的value。有时我们需要根据value对字典中的item进行排序输出。方法如下所示：\n\n方法一：用sorted函数排序，其中key参数是lamda表达式。\n\n方法二：用operator.itemgetter而不是lamda表达式进行排序。\n\n方法三：如果只需得到排序后的key，可用.get。\n\n\n\n### 13. for ... else语法\n\n\n### 14. 用逗号分隔list\n下面分别是字符串list、数字list和混合list的逗号分隔方式。\n\n\n\n### 15. 合并字典\n方法一：Python 3.5可以存在重复键值，`print({**d1, **d2})`。\n\n方法二：在内存中创建两个列表，再创建第三个列表，拷贝完成后，创建新的dict，删除掉前三个列表。\n`dict(d1.items()|d2.items())`\n\n方法三：d1.update()。`d1.update(d2)`\n\n\n\n### 16. list中的最小和最大索引\n```python\nimport heapq\n\nnums = [1, 8, 2, 23, 7, -4, 18, 23, 24, 37, 2]\n\n# 最大的3个数的索引\nmax_num_index_list = map(nums.index, heapq.nlargest(3, nums))\n\n# 最小的3个数的索引\nmin_num_index_list = map(nums.index, heapq.nsmallest(3, nums))\n\nprint(list(max_num_index_list))\nprint(list(min_num_index_list))\n\n---------------------\n\n本文来自 xw__cqx 的CSDN 博客 ，全文地址请点击：https://blog.csdn.net/bozhanggu2239/article/details/81054689?utm_source=copy \n\n```\n### 17. 从list中删除重复项\n方法一：把list转成set，去除重复项，再转回list。\n```python\nitems = [2,2,3,4,2]\nprint(list(set(items)))\n\n```\n方法二：调用collections里的OrderedDict，和set差不多。\n```python\nfrom collections import OrderDict\nitems = ['foo', 'bar', 'bar', 'foo']\nprint(list(OrderDict.fromkeys(items).keys()))\n```\n\n\n\n\n\n\n","source":"_posts/20180927-Python的实用的小技巧.md","raw":"---\ntitle: Python的实用的小技巧\ndate: 2018-09-27 20:28:06\ntags: python\n---\n\n\n&emsp;&emsp;&emsp;&emsp;Python是机器学习的主流语言，没有之一。今年5月，它首次在PYPL排行榜上超越JAVA，成为全球第一大编程语言。而一个月后，Stack Overflow也分享了最新的编程语言浏览量统计数字，结果显示，Python的月活历史性地超越了Java和JavaScript，真正问鼎榜首。\n\n“人生苦短，我选Python”。那么，你真的掌握了Python吗？\n\n![python](20180927-Python的实用的小技巧/f16935ad62e7db9560a61f4242ca212f.jpeg)\n### 1. 交换变量\n有时候，当我们要交换两个变量的值时，一种常规的方法是创建一个临时变量，然后用它来进行交换。比如：\n```python\n# 输入\na = 5\nb = 10\n#创建临时变量\ntemp = a\na = b\nb = temp\nprint(a)\nprint(b)\n```\n但在Python中，其实我们有一种更简洁的写法：`a, b = b, a`\n### 2. 将list中的所有元素转为单个字符串\n列表和字符串是Python中最常见的数据类型，它们会遇到互相转换的需要。那么，我们该怎么把list中的所有元素转为字符串呢？\n```python\na = ['python', 'is', 'awesome']\nprint(''.join(a))\n```\n###  3. 查找list中出现次数最多的元素\n给定一个包含多个元素的list，让你查找其中出现次数最多的元素，你会怎么做？在下图中，我们介绍了两种方法，其中第一种是利用max()函数的key参数，第二种则是使用Counter。\n```\na = [1,2,3,1,2,3,2,2,4,5,1]\nprint(max(set(a),key = a.count))\nfrom collections import Counter\nc = Counter(a)\nprint(c.most_common(3))\n```\n### 4. 判断两个字符串是否是anagram\n所谓anagram，就是两个词所用的字母及其个数都是一样的，但是它们字母的位置不一样，比如abc，bac，acb。在Python中，Counter可以解决这个问题，\n```python\nfrom collections import Counter\nCounter(str1) == Counter(str2)\n```\n\n\n5. 字符串倒转\n字符串倒转，就是把1234转成4321。下面我们介绍了三种方法：\n\n方法一：最简单的切片法，a[::-1]就相当于a[尾:头:-1]。\n\n方法二：用Python自带reversed()函数，它可被用于list倒转。\n\n方法三：第三种是通过倒转数据类型和切片倒转整数。\n\n\n\n6. list倒转\n和字符串倒转类似，切片法也可以被用于list倒转，如下面的第一种方法。第二种方法调用的是上面提到的reversed()函数。\n```python\na = [5,4,3,2,1]\nprint(a[::-1])\nfor ele in reversed(a):\n    print(ele)\n```\n### 7. 二维矩阵转置\n如果要转置矩阵，可以直接使用使用zip()函数。除此之外，没有比import numpy更简单的方法了。\n\n\n\n### 8. 链式比较\n如果想输出数组中介于4-7之间的元素，java是这么写的：if( b > 4 && b < 7){ }，但Python更人性化。包括最后一句1 == b < 20，这和C、java也很不一样。\n\n\n\n### 9. 链式调用\n在python中实现链式调用只需在函数返回对象自己就行了。\n\n\n\n### 10. 复制list\n如果是刚学习Python的C用户，你可能会想写b = a，但这是错的。在Python中，变量指向的是某个对象的标签。也就是说，按照这种的写法，b和a指向的是内存中的同一个列表，对b操作，就相当于对a操作。所以正确的写法有以下几种：\n\n方法一：b=a[:]。\n\n方法二：b=list(a)。\n\n方法三：使用Python 3的copy()函数，直接复制list，类似a[:]。\n\n方法四：使用copy.deepcopy()。\n\n\n\n### 11. 判断一个key是否在字典中\n如果目标key不在字典中，以下代码会返回None或default。\n\n\n\n### 12. 按value排序字典\nPython的内置字典数据类型是无序的，而key可以被用来获取对应的value。有时我们需要根据value对字典中的item进行排序输出。方法如下所示：\n\n方法一：用sorted函数排序，其中key参数是lamda表达式。\n\n方法二：用operator.itemgetter而不是lamda表达式进行排序。\n\n方法三：如果只需得到排序后的key，可用.get。\n\n\n\n### 13. for ... else语法\n\n\n### 14. 用逗号分隔list\n下面分别是字符串list、数字list和混合list的逗号分隔方式。\n\n\n\n### 15. 合并字典\n方法一：Python 3.5可以存在重复键值，`print({**d1, **d2})`。\n\n方法二：在内存中创建两个列表，再创建第三个列表，拷贝完成后，创建新的dict，删除掉前三个列表。\n`dict(d1.items()|d2.items())`\n\n方法三：d1.update()。`d1.update(d2)`\n\n\n\n### 16. list中的最小和最大索引\n```python\nimport heapq\n\nnums = [1, 8, 2, 23, 7, -4, 18, 23, 24, 37, 2]\n\n# 最大的3个数的索引\nmax_num_index_list = map(nums.index, heapq.nlargest(3, nums))\n\n# 最小的3个数的索引\nmin_num_index_list = map(nums.index, heapq.nsmallest(3, nums))\n\nprint(list(max_num_index_list))\nprint(list(min_num_index_list))\n\n---------------------\n\n本文来自 xw__cqx 的CSDN 博客 ，全文地址请点击：https://blog.csdn.net/bozhanggu2239/article/details/81054689?utm_source=copy \n\n```\n### 17. 从list中删除重复项\n方法一：把list转成set，去除重复项，再转回list。\n```python\nitems = [2,2,3,4,2]\nprint(list(set(items)))\n\n```\n方法二：调用collections里的OrderedDict，和set差不多。\n```python\nfrom collections import OrderDict\nitems = ['foo', 'bar', 'bar', 'foo']\nprint(list(OrderDict.fromkeys(items).keys()))\n```\n\n\n\n\n\n\n","slug":"20180927-Python的实用的小技巧","published":1,"updated":"2018-09-30T09:41:52.815Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjttrlg9l000wow6x6w68xuyi","content":"<p>&emsp;&emsp;&emsp;&emsp;Python是机器学习的主流语言，没有之一。今年5月，它首次在PYPL排行榜上超越JAVA，成为全球第一大编程语言。而一个月后，Stack Overflow也分享了最新的编程语言浏览量统计数字，结果显示，Python的月活历史性地超越了Java和JavaScript，真正问鼎榜首。</p>\n<p>“人生苦短，我选Python”。那么，你真的掌握了Python吗？</p>\n<p><img src=\"/2018/09/27/20180927-Python的实用的小技巧/f16935ad62e7db9560a61f4242ca212f.jpeg\" alt=\"python\"></p>\n<h3 id=\"1-交换变量\"><a href=\"#1-交换变量\" class=\"headerlink\" title=\"1. 交换变量\"></a>1. 交换变量</h3><p>有时候，当我们要交换两个变量的值时，一种常规的方法是创建一个临时变量，然后用它来进行交换。比如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 输入</span></span><br><span class=\"line\">a = <span class=\"number\">5</span></span><br><span class=\"line\">b = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"comment\">#创建临时变量</span></span><br><span class=\"line\">temp = a</span><br><span class=\"line\">a = b</span><br><span class=\"line\">b = temp</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">print(b)</span><br></pre></td></tr></table></figure></p>\n<p>但在Python中，其实我们有一种更简洁的写法：<code>a, b = b, a</code></p>\n<h3 id=\"2-将list中的所有元素转为单个字符串\"><a href=\"#2-将list中的所有元素转为单个字符串\" class=\"headerlink\" title=\"2. 将list中的所有元素转为单个字符串\"></a>2. 将list中的所有元素转为单个字符串</h3><p>列表和字符串是Python中最常见的数据类型，它们会遇到互相转换的需要。那么，我们该怎么把list中的所有元素转为字符串呢？<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"string\">'python'</span>, <span class=\"string\">'is'</span>, <span class=\"string\">'awesome'</span>]</span><br><span class=\"line\">print(<span class=\"string\">''</span>.join(a))</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-查找list中出现次数最多的元素\"><a href=\"#3-查找list中出现次数最多的元素\" class=\"headerlink\" title=\"3. 查找list中出现次数最多的元素\"></a>3. 查找list中出现次数最多的元素</h3><p>给定一个包含多个元素的list，让你查找其中出现次数最多的元素，你会怎么做？在下图中，我们介绍了两种方法，其中第一种是利用max()函数的key参数，第二种则是使用Counter。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [1,2,3,1,2,3,2,2,4,5,1]</span><br><span class=\"line\">print(max(set(a),key = a.count))</span><br><span class=\"line\">from collections import Counter</span><br><span class=\"line\">c = Counter(a)</span><br><span class=\"line\">print(c.most_common(3))</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-判断两个字符串是否是anagram\"><a href=\"#4-判断两个字符串是否是anagram\" class=\"headerlink\" title=\"4. 判断两个字符串是否是anagram\"></a>4. 判断两个字符串是否是anagram</h3><p>所谓anagram，就是两个词所用的字母及其个数都是一样的，但是它们字母的位置不一样，比如abc，bac，acb。在Python中，Counter可以解决这个问题，<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> Counter</span><br><span class=\"line\">Counter(str1) == Counter(str2)</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>字符串倒转<br>字符串倒转，就是把1234转成4321。下面我们介绍了三种方法：</li>\n</ol>\n<p>方法一：最简单的切片法，a[::-1]就相当于a[尾:头:-1]。</p>\n<p>方法二：用Python自带reversed()函数，它可被用于list倒转。</p>\n<p>方法三：第三种是通过倒转数据类型和切片倒转整数。</p>\n<ol>\n<li>list倒转<br>和字符串倒转类似，切片法也可以被用于list倒转，如下面的第一种方法。第二种方法调用的是上面提到的reversed()函数。<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">print(a[::<span class=\"number\">-1</span>])</span><br><span class=\"line\"><span class=\"keyword\">for</span> ele <span class=\"keyword\">in</span> reversed(a):</span><br><span class=\"line\">    print(ele)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"7-二维矩阵转置\"><a href=\"#7-二维矩阵转置\" class=\"headerlink\" title=\"7. 二维矩阵转置\"></a>7. 二维矩阵转置</h3><p>如果要转置矩阵，可以直接使用使用zip()函数。除此之外，没有比import numpy更简单的方法了。</p>\n<h3 id=\"8-链式比较\"><a href=\"#8-链式比较\" class=\"headerlink\" title=\"8. 链式比较\"></a>8. 链式比较</h3><p>如果想输出数组中介于4-7之间的元素，java是这么写的：if( b &gt; 4 &amp;&amp; b &lt; 7){ }，但Python更人性化。包括最后一句1 == b &lt; 20，这和C、java也很不一样。</p>\n<h3 id=\"9-链式调用\"><a href=\"#9-链式调用\" class=\"headerlink\" title=\"9. 链式调用\"></a>9. 链式调用</h3><p>在python中实现链式调用只需在函数返回对象自己就行了。</p>\n<h3 id=\"10-复制list\"><a href=\"#10-复制list\" class=\"headerlink\" title=\"10. 复制list\"></a>10. 复制list</h3><p>如果是刚学习Python的C用户，你可能会想写b = a，但这是错的。在Python中，变量指向的是某个对象的标签。也就是说，按照这种的写法，b和a指向的是内存中的同一个列表，对b操作，就相当于对a操作。所以正确的写法有以下几种：</p>\n<p>方法一：b=a[:]。</p>\n<p>方法二：b=list(a)。</p>\n<p>方法三：使用Python 3的copy()函数，直接复制list，类似a[:]。</p>\n<p>方法四：使用copy.deepcopy()。</p>\n<h3 id=\"11-判断一个key是否在字典中\"><a href=\"#11-判断一个key是否在字典中\" class=\"headerlink\" title=\"11. 判断一个key是否在字典中\"></a>11. 判断一个key是否在字典中</h3><p>如果目标key不在字典中，以下代码会返回None或default。</p>\n<h3 id=\"12-按value排序字典\"><a href=\"#12-按value排序字典\" class=\"headerlink\" title=\"12. 按value排序字典\"></a>12. 按value排序字典</h3><p>Python的内置字典数据类型是无序的，而key可以被用来获取对应的value。有时我们需要根据value对字典中的item进行排序输出。方法如下所示：</p>\n<p>方法一：用sorted函数排序，其中key参数是lamda表达式。</p>\n<p>方法二：用operator.itemgetter而不是lamda表达式进行排序。</p>\n<p>方法三：如果只需得到排序后的key，可用.get。</p>\n<h3 id=\"13-for-…-else语法\"><a href=\"#13-for-…-else语法\" class=\"headerlink\" title=\"13. for … else语法\"></a>13. for … else语法</h3><h3 id=\"14-用逗号分隔list\"><a href=\"#14-用逗号分隔list\" class=\"headerlink\" title=\"14. 用逗号分隔list\"></a>14. 用逗号分隔list</h3><p>下面分别是字符串list、数字list和混合list的逗号分隔方式。</p>\n<h3 id=\"15-合并字典\"><a href=\"#15-合并字典\" class=\"headerlink\" title=\"15. 合并字典\"></a>15. 合并字典</h3><p>方法一：Python 3.5可以存在重复键值，<code>print({**d1, **d2})</code>。</p>\n<p>方法二：在内存中创建两个列表，再创建第三个列表，拷贝完成后，创建新的dict，删除掉前三个列表。<br><code>dict(d1.items()|d2.items())</code></p>\n<p>方法三：d1.update()。<code>d1.update(d2)</code></p>\n<h3 id=\"16-list中的最小和最大索引\"><a href=\"#16-list中的最小和最大索引\" class=\"headerlink\" title=\"16. list中的最小和最大索引\"></a>16. list中的最小和最大索引</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> heapq</span><br><span class=\"line\"></span><br><span class=\"line\">nums = [<span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">2</span>, <span class=\"number\">23</span>, <span class=\"number\">7</span>, <span class=\"number\">-4</span>, <span class=\"number\">18</span>, <span class=\"number\">23</span>, <span class=\"number\">24</span>, <span class=\"number\">37</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最大的3个数的索引</span></span><br><span class=\"line\">max_num_index_list = map(nums.index, heapq.nlargest(<span class=\"number\">3</span>, nums))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最小的3个数的索引</span></span><br><span class=\"line\">min_num_index_list = map(nums.index, heapq.nsmallest(<span class=\"number\">3</span>, nums))</span><br><span class=\"line\"></span><br><span class=\"line\">print(list(max_num_index_list))</span><br><span class=\"line\">print(list(min_num_index_list))</span><br><span class=\"line\"></span><br><span class=\"line\">---------------------</span><br><span class=\"line\"></span><br><span class=\"line\">本文来自 xw__cqx 的CSDN 博客 ，全文地址请点击：https://blog.csdn.net/bozhanggu2239/article/details/81054689?utm_source=copy</span><br></pre></td></tr></table></figure>\n<h3 id=\"17-从list中删除重复项\"><a href=\"#17-从list中删除重复项\" class=\"headerlink\" title=\"17. 从list中删除重复项\"></a>17. 从list中删除重复项</h3><p>方法一：把list转成set，去除重复项，再转回list。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">items = [<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">print(list(set(items)))</span><br></pre></td></tr></table></figure></p>\n<p>方法二：调用collections里的OrderedDict，和set差不多。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> OrderDict</span><br><span class=\"line\">items = [<span class=\"string\">'foo'</span>, <span class=\"string\">'bar'</span>, <span class=\"string\">'bar'</span>, <span class=\"string\">'foo'</span>]</span><br><span class=\"line\">print(list(OrderDict.fromkeys(items).keys()))</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"projects":[{"name":"extract_news","url":"https://github.com/hee0624/extract_news","desc":"Python package to parse news from various news website"}]}},"excerpt":"","more":"<p>&emsp;&emsp;&emsp;&emsp;Python是机器学习的主流语言，没有之一。今年5月，它首次在PYPL排行榜上超越JAVA，成为全球第一大编程语言。而一个月后，Stack Overflow也分享了最新的编程语言浏览量统计数字，结果显示，Python的月活历史性地超越了Java和JavaScript，真正问鼎榜首。</p>\n<p>“人生苦短，我选Python”。那么，你真的掌握了Python吗？</p>\n<p><img src=\"/2018/09/27/20180927-Python的实用的小技巧/f16935ad62e7db9560a61f4242ca212f.jpeg\" alt=\"python\"></p>\n<h3 id=\"1-交换变量\"><a href=\"#1-交换变量\" class=\"headerlink\" title=\"1. 交换变量\"></a>1. 交换变量</h3><p>有时候，当我们要交换两个变量的值时，一种常规的方法是创建一个临时变量，然后用它来进行交换。比如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 输入</span></span><br><span class=\"line\">a = <span class=\"number\">5</span></span><br><span class=\"line\">b = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"comment\">#创建临时变量</span></span><br><span class=\"line\">temp = a</span><br><span class=\"line\">a = b</span><br><span class=\"line\">b = temp</span><br><span class=\"line\">print(a)</span><br><span class=\"line\">print(b)</span><br></pre></td></tr></table></figure></p>\n<p>但在Python中，其实我们有一种更简洁的写法：<code>a, b = b, a</code></p>\n<h3 id=\"2-将list中的所有元素转为单个字符串\"><a href=\"#2-将list中的所有元素转为单个字符串\" class=\"headerlink\" title=\"2. 将list中的所有元素转为单个字符串\"></a>2. 将list中的所有元素转为单个字符串</h3><p>列表和字符串是Python中最常见的数据类型，它们会遇到互相转换的需要。那么，我们该怎么把list中的所有元素转为字符串呢？<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"string\">'python'</span>, <span class=\"string\">'is'</span>, <span class=\"string\">'awesome'</span>]</span><br><span class=\"line\">print(<span class=\"string\">''</span>.join(a))</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3-查找list中出现次数最多的元素\"><a href=\"#3-查找list中出现次数最多的元素\" class=\"headerlink\" title=\"3. 查找list中出现次数最多的元素\"></a>3. 查找list中出现次数最多的元素</h3><p>给定一个包含多个元素的list，让你查找其中出现次数最多的元素，你会怎么做？在下图中，我们介绍了两种方法，其中第一种是利用max()函数的key参数，第二种则是使用Counter。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [1,2,3,1,2,3,2,2,4,5,1]</span><br><span class=\"line\">print(max(set(a),key = a.count))</span><br><span class=\"line\">from collections import Counter</span><br><span class=\"line\">c = Counter(a)</span><br><span class=\"line\">print(c.most_common(3))</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-判断两个字符串是否是anagram\"><a href=\"#4-判断两个字符串是否是anagram\" class=\"headerlink\" title=\"4. 判断两个字符串是否是anagram\"></a>4. 判断两个字符串是否是anagram</h3><p>所谓anagram，就是两个词所用的字母及其个数都是一样的，但是它们字母的位置不一样，比如abc，bac，acb。在Python中，Counter可以解决这个问题，<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> Counter</span><br><span class=\"line\">Counter(str1) == Counter(str2)</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>字符串倒转<br>字符串倒转，就是把1234转成4321。下面我们介绍了三种方法：</li>\n</ol>\n<p>方法一：最简单的切片法，a[::-1]就相当于a[尾:头:-1]。</p>\n<p>方法二：用Python自带reversed()函数，它可被用于list倒转。</p>\n<p>方法三：第三种是通过倒转数据类型和切片倒转整数。</p>\n<ol>\n<li>list倒转<br>和字符串倒转类似，切片法也可以被用于list倒转，如下面的第一种方法。第二种方法调用的是上面提到的reversed()函数。<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>]</span><br><span class=\"line\">print(a[::<span class=\"number\">-1</span>])</span><br><span class=\"line\"><span class=\"keyword\">for</span> ele <span class=\"keyword\">in</span> reversed(a):</span><br><span class=\"line\">    print(ele)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"7-二维矩阵转置\"><a href=\"#7-二维矩阵转置\" class=\"headerlink\" title=\"7. 二维矩阵转置\"></a>7. 二维矩阵转置</h3><p>如果要转置矩阵，可以直接使用使用zip()函数。除此之外，没有比import numpy更简单的方法了。</p>\n<h3 id=\"8-链式比较\"><a href=\"#8-链式比较\" class=\"headerlink\" title=\"8. 链式比较\"></a>8. 链式比较</h3><p>如果想输出数组中介于4-7之间的元素，java是这么写的：if( b &gt; 4 &amp;&amp; b &lt; 7){ }，但Python更人性化。包括最后一句1 == b &lt; 20，这和C、java也很不一样。</p>\n<h3 id=\"9-链式调用\"><a href=\"#9-链式调用\" class=\"headerlink\" title=\"9. 链式调用\"></a>9. 链式调用</h3><p>在python中实现链式调用只需在函数返回对象自己就行了。</p>\n<h3 id=\"10-复制list\"><a href=\"#10-复制list\" class=\"headerlink\" title=\"10. 复制list\"></a>10. 复制list</h3><p>如果是刚学习Python的C用户，你可能会想写b = a，但这是错的。在Python中，变量指向的是某个对象的标签。也就是说，按照这种的写法，b和a指向的是内存中的同一个列表，对b操作，就相当于对a操作。所以正确的写法有以下几种：</p>\n<p>方法一：b=a[:]。</p>\n<p>方法二：b=list(a)。</p>\n<p>方法三：使用Python 3的copy()函数，直接复制list，类似a[:]。</p>\n<p>方法四：使用copy.deepcopy()。</p>\n<h3 id=\"11-判断一个key是否在字典中\"><a href=\"#11-判断一个key是否在字典中\" class=\"headerlink\" title=\"11. 判断一个key是否在字典中\"></a>11. 判断一个key是否在字典中</h3><p>如果目标key不在字典中，以下代码会返回None或default。</p>\n<h3 id=\"12-按value排序字典\"><a href=\"#12-按value排序字典\" class=\"headerlink\" title=\"12. 按value排序字典\"></a>12. 按value排序字典</h3><p>Python的内置字典数据类型是无序的，而key可以被用来获取对应的value。有时我们需要根据value对字典中的item进行排序输出。方法如下所示：</p>\n<p>方法一：用sorted函数排序，其中key参数是lamda表达式。</p>\n<p>方法二：用operator.itemgetter而不是lamda表达式进行排序。</p>\n<p>方法三：如果只需得到排序后的key，可用.get。</p>\n<h3 id=\"13-for-…-else语法\"><a href=\"#13-for-…-else语法\" class=\"headerlink\" title=\"13. for … else语法\"></a>13. for … else语法</h3><h3 id=\"14-用逗号分隔list\"><a href=\"#14-用逗号分隔list\" class=\"headerlink\" title=\"14. 用逗号分隔list\"></a>14. 用逗号分隔list</h3><p>下面分别是字符串list、数字list和混合list的逗号分隔方式。</p>\n<h3 id=\"15-合并字典\"><a href=\"#15-合并字典\" class=\"headerlink\" title=\"15. 合并字典\"></a>15. 合并字典</h3><p>方法一：Python 3.5可以存在重复键值，<code>print({**d1, **d2})</code>。</p>\n<p>方法二：在内存中创建两个列表，再创建第三个列表，拷贝完成后，创建新的dict，删除掉前三个列表。<br><code>dict(d1.items()|d2.items())</code></p>\n<p>方法三：d1.update()。<code>d1.update(d2)</code></p>\n<h3 id=\"16-list中的最小和最大索引\"><a href=\"#16-list中的最小和最大索引\" class=\"headerlink\" title=\"16. list中的最小和最大索引\"></a>16. list中的最小和最大索引</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> heapq</span><br><span class=\"line\"></span><br><span class=\"line\">nums = [<span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">2</span>, <span class=\"number\">23</span>, <span class=\"number\">7</span>, <span class=\"number\">-4</span>, <span class=\"number\">18</span>, <span class=\"number\">23</span>, <span class=\"number\">24</span>, <span class=\"number\">37</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最大的3个数的索引</span></span><br><span class=\"line\">max_num_index_list = map(nums.index, heapq.nlargest(<span class=\"number\">3</span>, nums))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最小的3个数的索引</span></span><br><span class=\"line\">min_num_index_list = map(nums.index, heapq.nsmallest(<span class=\"number\">3</span>, nums))</span><br><span class=\"line\"></span><br><span class=\"line\">print(list(max_num_index_list))</span><br><span class=\"line\">print(list(min_num_index_list))</span><br><span class=\"line\"></span><br><span class=\"line\">---------------------</span><br><span class=\"line\"></span><br><span class=\"line\">本文来自 xw__cqx 的CSDN 博客 ，全文地址请点击：https://blog.csdn.net/bozhanggu2239/article/details/81054689?utm_source=copy</span><br></pre></td></tr></table></figure>\n<h3 id=\"17-从list中删除重复项\"><a href=\"#17-从list中删除重复项\" class=\"headerlink\" title=\"17. 从list中删除重复项\"></a>17. 从list中删除重复项</h3><p>方法一：把list转成set，去除重复项，再转回list。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">items = [<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\">print(list(set(items)))</span><br></pre></td></tr></table></figure></p>\n<p>方法二：调用collections里的OrderedDict，和set差不多。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> OrderDict</span><br><span class=\"line\">items = [<span class=\"string\">'foo'</span>, <span class=\"string\">'bar'</span>, <span class=\"string\">'bar'</span>, <span class=\"string\">'foo'</span>]</span><br><span class=\"line\">print(list(OrderDict.fromkeys(items).keys()))</span><br></pre></td></tr></table></figure></p>\n"},{"title":"好用的chrome插件","date":"2018-09-30T07:58:05.000Z","_content":"\n- [web server](https://chrome.google.com/webstore/detail/web-server-for-chrome/ofhbbkphhbklhfoeikjpcbhemlocgigb): **(启动webserver)**\n- [cookies edit](https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg):  **(编辑cookies)**\n- [switch proxy](https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif): **(选择代理)**\n- [adgrard](https://chrome.google.com/webstore/detail/adguard-adblocker/bgnkhhnnamicmpeenaelnjfhikgbkllg?hl=zh-CN): **(广告拦截器)**\n- [vimium](https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?utm_source=chrome-app-launcher-info-dialog): **(chrom vim 模式)**\n- [Distill Web Monito](https://chrome.google.com/webstore/detail/distill-web-monitor/inlikjemeeknofckkjolnjbpehgadgge):**(Distill 在您的浏览器上运行，检查监控的页面有无变更。在侦测到变更时立即发出通知)**\n- [awesome-screenshot-screen](https://chrome.google.com/webstore/detail/awesome-screenshot-screen/nlipoenfbbikpbjkfpfillcgkoblgpmj):**(网页截图:注释&录屏)**\n- [Octotree](https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?hl=en-US):**(github tree 开发者工具)** \n- \n\n","source":"_posts/20180930-chrome插件.md","raw":"---\ntitle: 好用的chrome插件\ndate: 2018-09-30 15:58:05\ntags: chrome\n---\n\n- [web server](https://chrome.google.com/webstore/detail/web-server-for-chrome/ofhbbkphhbklhfoeikjpcbhemlocgigb): **(启动webserver)**\n- [cookies edit](https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg):  **(编辑cookies)**\n- [switch proxy](https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif): **(选择代理)**\n- [adgrard](https://chrome.google.com/webstore/detail/adguard-adblocker/bgnkhhnnamicmpeenaelnjfhikgbkllg?hl=zh-CN): **(广告拦截器)**\n- [vimium](https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?utm_source=chrome-app-launcher-info-dialog): **(chrom vim 模式)**\n- [Distill Web Monito](https://chrome.google.com/webstore/detail/distill-web-monitor/inlikjemeeknofckkjolnjbpehgadgge):**(Distill 在您的浏览器上运行，检查监控的页面有无变更。在侦测到变更时立即发出通知)**\n- [awesome-screenshot-screen](https://chrome.google.com/webstore/detail/awesome-screenshot-screen/nlipoenfbbikpbjkfpfillcgkoblgpmj):**(网页截图:注释&录屏)**\n- [Octotree](https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?hl=en-US):**(github tree 开发者工具)** \n- \n\n","slug":"20180930-chrome插件","published":1,"updated":"2018-12-06T03:19:05.220Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjttrlg9p000yow6xe9iruv0h","content":"<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/web-server-for-chrome/ofhbbkphhbklhfoeikjpcbhemlocgigb\" target=\"_blank\" rel=\"noopener\">web server</a>: <strong>(启动webserver)</strong></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg\" target=\"_blank\" rel=\"noopener\">cookies edit</a>:  <strong>(编辑cookies)</strong></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif\" target=\"_blank\" rel=\"noopener\">switch proxy</a>: <strong>(选择代理)</strong></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/adguard-adblocker/bgnkhhnnamicmpeenaelnjfhikgbkllg?hl=zh-CN\" target=\"_blank\" rel=\"noopener\">adgrard</a>: <strong>(广告拦截器)</strong></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?utm_source=chrome-app-launcher-info-dialog\" target=\"_blank\" rel=\"noopener\">vimium</a>: <strong>(chrom vim 模式)</strong></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/distill-web-monitor/inlikjemeeknofckkjolnjbpehgadgge\" target=\"_blank\" rel=\"noopener\">Distill Web Monito</a>:<strong>(Distill 在您的浏览器上运行，检查监控的页面有无变更。在侦测到变更时立即发出通知)</strong></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/awesome-screenshot-screen/nlipoenfbbikpbjkfpfillcgkoblgpmj\" target=\"_blank\" rel=\"noopener\">awesome-screenshot-screen</a>:<strong>(网页截图:注释&amp;录屏)</strong></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?hl=en-US\" target=\"_blank\" rel=\"noopener\">Octotree</a>:<strong>(github tree 开发者工具)</strong> </li>\n<li></li>\n</ul>\n","site":{"data":{"projects":[{"name":"extract_news","url":"https://github.com/hee0624/extract_news","desc":"Python package to parse news from various news website"}]}},"excerpt":"","more":"<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/web-server-for-chrome/ofhbbkphhbklhfoeikjpcbhemlocgigb\" target=\"_blank\" rel=\"noopener\">web server</a>: <strong>(启动webserver)</strong></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg\" target=\"_blank\" rel=\"noopener\">cookies edit</a>:  <strong>(编辑cookies)</strong></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif\" target=\"_blank\" rel=\"noopener\">switch proxy</a>: <strong>(选择代理)</strong></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/adguard-adblocker/bgnkhhnnamicmpeenaelnjfhikgbkllg?hl=zh-CN\" target=\"_blank\" rel=\"noopener\">adgrard</a>: <strong>(广告拦截器)</strong></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/vimium/dbepggeogbaibhgnhhndojpepiihcmeb?utm_source=chrome-app-launcher-info-dialog\" target=\"_blank\" rel=\"noopener\">vimium</a>: <strong>(chrom vim 模式)</strong></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/distill-web-monitor/inlikjemeeknofckkjolnjbpehgadgge\" target=\"_blank\" rel=\"noopener\">Distill Web Monito</a>:<strong>(Distill 在您的浏览器上运行，检查监控的页面有无变更。在侦测到变更时立即发出通知)</strong></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/awesome-screenshot-screen/nlipoenfbbikpbjkfpfillcgkoblgpmj\" target=\"_blank\" rel=\"noopener\">awesome-screenshot-screen</a>:<strong>(网页截图:注释&amp;录屏)</strong></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?hl=en-US\" target=\"_blank\" rel=\"noopener\">Octotree</a>:<strong>(github tree 开发者工具)</strong> </li>\n<li></li>\n</ul>\n"},{"title":"关于高效使用python字典的清单","date":"2018-09-30T08:04:52.000Z","_content":"\n\n### 1、用 in 关键字检查 key 是否存在\nPython之禅中有一条开发哲学是：\n\nThere should be one-- and preferably only one --obvious way to do it.\n\n尽量找一种，最好是唯一种显而易见的解决方案。Python2 中判断某个 key 是否存在字典中可使用 has_key 方法，另外一种方式是使用 in 关键字。但是强烈推荐使用后者，因为 in 的处理速度更快，另外一个原因是 has_key 这个方法在 Python3 被移除了，要想同时兼容py2和py3两个版本的代码，用 in 是最好的选择。\n```python\n# bad\n\nd = {'name': 'python'}\n\nif d.has_key('name'):\n    pass\n# good\n\nif 'name' in d:\n    pass\n```\n### 2、用 get 获取字典中的值\n关于获取字典中的值，一种简单的方式就是用d[x]访问该元素，但是这种情况在 key 不存在的情况下会报 KeyError 错误，当然你可以先用 in 操作检查 key 是否在字典中再获取，不过这种方式不符合 Python 之禅中说的：\n\nSimple is better than complex.\nFlat is better than nested.\n\n好的代码应该是简单易懂的，扁平的代码结构更加可读。我们可以使用 get 方法来代替 if ... else\n```python\n# bad\n\nd = {'name': 'python'}\nif 'name' in d:\n    print(d['hello'])\nelse:\n    print('default')\n# good\n\nprint(d.get(\"name\", \"default\"))\n```\n### 3、用 setdefault 为字典中不存在的 key 设置缺省值\n```\ndata = [\n        (\"animal\", \"bear\"),\n        (\"animal\", \"duck\"),\n        (\"plant\", \"cactus\"),\n        (\"vehicle\", \"speed boat\"),\n        (\"vehicle\", \"school bus\")\n    ]\n```\n在做分类统计时，希望把同一类型的数据归到字典中的某种类型中，比如上面代码，把相同类型的事物用列表的形式重新组装，得到新的字典\n```\ngroups = {}\n\n>>> \n{'plant': ['cactus'], \n 'animal': ['bear', 'duck'], \n 'vehicle': ['speed boat', 'school bus']}\n```\n普通的方式就是先判断 key 是否已经存在，如果不存在则要先用列表对象进行初始化，再执行后续操作。而更好的方式就是使用字典中的 setdefault 方法。\n```python\n# bad\n\nfor (key, value) in data:\n    if key in groups:\n        groups[key].append(value)\n    else:\n        groups[key] = [value]\n# good\n\ngroups = {}\nfor (key, value) in data:\n    groups.setdefault(key, []).append(value)\n```\nsetdefault 的作用是：\n\n如果 key 存在于字典中，那么直接返回对应的值，等效于 get 方法\n如果 key 不存在字典中，则会用 setdefault 中的第二个参数作为该 key 的值，再返回该值。\n### 4、用 defaultdict 初始化字典对象\n如果不希望 d[x] 在 x 不存在时报错，除了在获取元素时使用 get 方法之外，另外一种方式是用 collections 模块中的 defaultdict，在初始化字典的时候指定一个函数，其实 defaultdict 是 dict 的子类。\n\nfrom collections import defaultdict\n\ngroups = defaultdict(list)\nfor (key, value) in data:\n    groups[key].append(value)\n当 key 不存在于字典中时，list 函数将被调用并返回一个空列表赋值给 d[key]，这样一来，你就不用担心调用 d[k] 会报错了。\n\n### 5、用 fromkeys 将列表转换成字典\n```python\nkeys = {'a', 'e', 'i', 'o', 'u' }\nvalue = []\nd = dict.fromkeys(keys, value)\nprint(d)\n\n>>>\n{'i': [], 'u': [], 'e': [], \n 'a': [], 'o': []}\n```\n### 6、用字典实现 switch ... case 语句\nPython 中没有 switch ... case 语句，这个问题Python之父龟叔表示这个语法过去没有，现在没有，以后也不会有。因为Python简洁的语法完全可以用 if ... elif 实现。如果有太多的分支判断，还可以使用字典来代替。\n```\nif arg == 0:\n    return 'zero'\nelif arg == 1:\n    return 'one'\nelif arg == 2:\n    return \"two\"\nelse:\n    return \"nothing\"\n#good\n\ndata = {\n    0: \"zero\",\n    1: \"one\",\n    2: \"two\",\n}\ndata.get(arg, \"nothing\")\n```\n### 7、使用 iteritems 迭代字典中的元素\npython提供了几种方式迭代字典中的元素，第一种是使用 items 方法：\n```python\nd = {\n    0: \"zero\",\n    1: \"one\",\n    2: \"two\",\n}\n\nfor k, v in d.items():\n    print(k, v)\n```\nitems 方法返回的是（key ,value）组成的列表对象，这种方式的弊端是迭代超大字典的时候，内存瞬间会扩大两倍，因为列表对象会一次性把所有元素加载到内存，更好的方式是使用 iteritems\n```python\nfor k, v in d.iteritems():\n    print(k, v)\n```\niteritems 返回的是迭代器对象，迭代器对象具有惰性加载的特性，只有真正需要的时候才生成值，这种方式在迭代过程中不需要额外的内存来装载这些数据。注意 Python3 中，只有 items 方法了，它等价于 Python2 中的 iteritems，而 iteritems 这个方法名被移除了。\n\n### 8、使用字典推导式\n推导式是个绝妙的东西，列表推导式一出，map、filter等函数黯然失色，自 Python2.7以后的版本，此特性扩展到了字典和集合身上，构建字典对象无需调用 dict 方法。\n```python\n# bad\n\nnumbers = [1,2,3]\nd = dict([(number,number*2) for number in numbers])\n# good\n\nnumbers = [1, 2, 3]\nd = {number: number * 2 for number in numbers}\n```\n","source":"_posts/20180930-关于高效使用python字典的清单.md","raw":"---\ntitle: 关于高效使用python字典的清单\ndate: 2018-09-30 16:04:52\ntags: python\n---\n\n\n### 1、用 in 关键字检查 key 是否存在\nPython之禅中有一条开发哲学是：\n\nThere should be one-- and preferably only one --obvious way to do it.\n\n尽量找一种，最好是唯一种显而易见的解决方案。Python2 中判断某个 key 是否存在字典中可使用 has_key 方法，另外一种方式是使用 in 关键字。但是强烈推荐使用后者，因为 in 的处理速度更快，另外一个原因是 has_key 这个方法在 Python3 被移除了，要想同时兼容py2和py3两个版本的代码，用 in 是最好的选择。\n```python\n# bad\n\nd = {'name': 'python'}\n\nif d.has_key('name'):\n    pass\n# good\n\nif 'name' in d:\n    pass\n```\n### 2、用 get 获取字典中的值\n关于获取字典中的值，一种简单的方式就是用d[x]访问该元素，但是这种情况在 key 不存在的情况下会报 KeyError 错误，当然你可以先用 in 操作检查 key 是否在字典中再获取，不过这种方式不符合 Python 之禅中说的：\n\nSimple is better than complex.\nFlat is better than nested.\n\n好的代码应该是简单易懂的，扁平的代码结构更加可读。我们可以使用 get 方法来代替 if ... else\n```python\n# bad\n\nd = {'name': 'python'}\nif 'name' in d:\n    print(d['hello'])\nelse:\n    print('default')\n# good\n\nprint(d.get(\"name\", \"default\"))\n```\n### 3、用 setdefault 为字典中不存在的 key 设置缺省值\n```\ndata = [\n        (\"animal\", \"bear\"),\n        (\"animal\", \"duck\"),\n        (\"plant\", \"cactus\"),\n        (\"vehicle\", \"speed boat\"),\n        (\"vehicle\", \"school bus\")\n    ]\n```\n在做分类统计时，希望把同一类型的数据归到字典中的某种类型中，比如上面代码，把相同类型的事物用列表的形式重新组装，得到新的字典\n```\ngroups = {}\n\n>>> \n{'plant': ['cactus'], \n 'animal': ['bear', 'duck'], \n 'vehicle': ['speed boat', 'school bus']}\n```\n普通的方式就是先判断 key 是否已经存在，如果不存在则要先用列表对象进行初始化，再执行后续操作。而更好的方式就是使用字典中的 setdefault 方法。\n```python\n# bad\n\nfor (key, value) in data:\n    if key in groups:\n        groups[key].append(value)\n    else:\n        groups[key] = [value]\n# good\n\ngroups = {}\nfor (key, value) in data:\n    groups.setdefault(key, []).append(value)\n```\nsetdefault 的作用是：\n\n如果 key 存在于字典中，那么直接返回对应的值，等效于 get 方法\n如果 key 不存在字典中，则会用 setdefault 中的第二个参数作为该 key 的值，再返回该值。\n### 4、用 defaultdict 初始化字典对象\n如果不希望 d[x] 在 x 不存在时报错，除了在获取元素时使用 get 方法之外，另外一种方式是用 collections 模块中的 defaultdict，在初始化字典的时候指定一个函数，其实 defaultdict 是 dict 的子类。\n\nfrom collections import defaultdict\n\ngroups = defaultdict(list)\nfor (key, value) in data:\n    groups[key].append(value)\n当 key 不存在于字典中时，list 函数将被调用并返回一个空列表赋值给 d[key]，这样一来，你就不用担心调用 d[k] 会报错了。\n\n### 5、用 fromkeys 将列表转换成字典\n```python\nkeys = {'a', 'e', 'i', 'o', 'u' }\nvalue = []\nd = dict.fromkeys(keys, value)\nprint(d)\n\n>>>\n{'i': [], 'u': [], 'e': [], \n 'a': [], 'o': []}\n```\n### 6、用字典实现 switch ... case 语句\nPython 中没有 switch ... case 语句，这个问题Python之父龟叔表示这个语法过去没有，现在没有，以后也不会有。因为Python简洁的语法完全可以用 if ... elif 实现。如果有太多的分支判断，还可以使用字典来代替。\n```\nif arg == 0:\n    return 'zero'\nelif arg == 1:\n    return 'one'\nelif arg == 2:\n    return \"two\"\nelse:\n    return \"nothing\"\n#good\n\ndata = {\n    0: \"zero\",\n    1: \"one\",\n    2: \"two\",\n}\ndata.get(arg, \"nothing\")\n```\n### 7、使用 iteritems 迭代字典中的元素\npython提供了几种方式迭代字典中的元素，第一种是使用 items 方法：\n```python\nd = {\n    0: \"zero\",\n    1: \"one\",\n    2: \"two\",\n}\n\nfor k, v in d.items():\n    print(k, v)\n```\nitems 方法返回的是（key ,value）组成的列表对象，这种方式的弊端是迭代超大字典的时候，内存瞬间会扩大两倍，因为列表对象会一次性把所有元素加载到内存，更好的方式是使用 iteritems\n```python\nfor k, v in d.iteritems():\n    print(k, v)\n```\niteritems 返回的是迭代器对象，迭代器对象具有惰性加载的特性，只有真正需要的时候才生成值，这种方式在迭代过程中不需要额外的内存来装载这些数据。注意 Python3 中，只有 items 方法了，它等价于 Python2 中的 iteritems，而 iteritems 这个方法名被移除了。\n\n### 8、使用字典推导式\n推导式是个绝妙的东西，列表推导式一出，map、filter等函数黯然失色，自 Python2.7以后的版本，此特性扩展到了字典和集合身上，构建字典对象无需调用 dict 方法。\n```python\n# bad\n\nnumbers = [1,2,3]\nd = dict([(number,number*2) for number in numbers])\n# good\n\nnumbers = [1, 2, 3]\nd = {number: number * 2 for number in numbers}\n```\n","slug":"20180930-关于高效使用python字典的清单","published":1,"updated":"2018-09-30T08:20:11.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjttrlg9s0011ow6x4p72ekqr","content":"<h3 id=\"1、用-in-关键字检查-key-是否存在\"><a href=\"#1、用-in-关键字检查-key-是否存在\" class=\"headerlink\" title=\"1、用 in 关键字检查 key 是否存在\"></a>1、用 in 关键字检查 key 是否存在</h3><p>Python之禅中有一条开发哲学是：</p>\n<p>There should be one— and preferably only one —obvious way to do it.</p>\n<p>尽量找一种，最好是唯一种显而易见的解决方案。Python2 中判断某个 key 是否存在字典中可使用 has_key 方法，另外一种方式是使用 in 关键字。但是强烈推荐使用后者，因为 in 的处理速度更快，另外一个原因是 has_key 这个方法在 Python3 被移除了，要想同时兼容py2和py3两个版本的代码，用 in 是最好的选择。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># bad</span></span><br><span class=\"line\"></span><br><span class=\"line\">d = &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'python'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> d.has_key(<span class=\"string\">'name'</span>):</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"comment\"># good</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"string\">'name'</span> <span class=\"keyword\">in</span> d:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2、用-get-获取字典中的值\"><a href=\"#2、用-get-获取字典中的值\" class=\"headerlink\" title=\"2、用 get 获取字典中的值\"></a>2、用 get 获取字典中的值</h3><p>关于获取字典中的值，一种简单的方式就是用d[x]访问该元素，但是这种情况在 key 不存在的情况下会报 KeyError 错误，当然你可以先用 in 操作检查 key 是否在字典中再获取，不过这种方式不符合 Python 之禅中说的：</p>\n<p>Simple is better than complex.<br>Flat is better than nested.</p>\n<p>好的代码应该是简单易懂的，扁平的代码结构更加可读。我们可以使用 get 方法来代替 if … else<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># bad</span></span><br><span class=\"line\"></span><br><span class=\"line\">d = &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'python'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"string\">'name'</span> <span class=\"keyword\">in</span> d:</span><br><span class=\"line\">    print(d[<span class=\"string\">'hello'</span>])</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'default'</span>)</span><br><span class=\"line\"><span class=\"comment\"># good</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(d.get(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"default\"</span>))</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3、用-setdefault-为字典中不存在的-key-设置缺省值\"><a href=\"#3、用-setdefault-为字典中不存在的-key-设置缺省值\" class=\"headerlink\" title=\"3、用 setdefault 为字典中不存在的 key 设置缺省值\"></a>3、用 setdefault 为字典中不存在的 key 设置缺省值</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = [</span><br><span class=\"line\">        (&quot;animal&quot;, &quot;bear&quot;),</span><br><span class=\"line\">        (&quot;animal&quot;, &quot;duck&quot;),</span><br><span class=\"line\">        (&quot;plant&quot;, &quot;cactus&quot;),</span><br><span class=\"line\">        (&quot;vehicle&quot;, &quot;speed boat&quot;),</span><br><span class=\"line\">        (&quot;vehicle&quot;, &quot;school bus&quot;)</span><br><span class=\"line\">    ]</span><br></pre></td></tr></table></figure>\n<p>在做分类统计时，希望把同一类型的数据归到字典中的某种类型中，比如上面代码，把相同类型的事物用列表的形式重新组装，得到新的字典<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groups = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; </span><br><span class=\"line\">&#123;&apos;plant&apos;: [&apos;cactus&apos;], </span><br><span class=\"line\"> &apos;animal&apos;: [&apos;bear&apos;, &apos;duck&apos;], </span><br><span class=\"line\"> &apos;vehicle&apos;: [&apos;speed boat&apos;, &apos;school bus&apos;]&#125;</span><br></pre></td></tr></table></figure></p>\n<p>普通的方式就是先判断 key 是否已经存在，如果不存在则要先用列表对象进行初始化，再执行后续操作。而更好的方式就是使用字典中的 setdefault 方法。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># bad</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (key, value) <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> key <span class=\"keyword\">in</span> groups:</span><br><span class=\"line\">        groups[key].append(value)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        groups[key] = [value]</span><br><span class=\"line\"><span class=\"comment\"># good</span></span><br><span class=\"line\"></span><br><span class=\"line\">groups = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (key, value) <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">    groups.setdefault(key, []).append(value)</span><br></pre></td></tr></table></figure></p>\n<p>setdefault 的作用是：</p>\n<p>如果 key 存在于字典中，那么直接返回对应的值，等效于 get 方法<br>如果 key 不存在字典中，则会用 setdefault 中的第二个参数作为该 key 的值，再返回该值。</p>\n<h3 id=\"4、用-defaultdict-初始化字典对象\"><a href=\"#4、用-defaultdict-初始化字典对象\" class=\"headerlink\" title=\"4、用 defaultdict 初始化字典对象\"></a>4、用 defaultdict 初始化字典对象</h3><p>如果不希望 d[x] 在 x 不存在时报错，除了在获取元素时使用 get 方法之外，另外一种方式是用 collections 模块中的 defaultdict，在初始化字典的时候指定一个函数，其实 defaultdict 是 dict 的子类。</p>\n<p>from collections import defaultdict</p>\n<p>groups = defaultdict(list)<br>for (key, value) in data:<br>    groups[key].append(value)<br>当 key 不存在于字典中时，list 函数将被调用并返回一个空列表赋值给 d[key]，这样一来，你就不用担心调用 d[k] 会报错了。</p>\n<h3 id=\"5、用-fromkeys-将列表转换成字典\"><a href=\"#5、用-fromkeys-将列表转换成字典\" class=\"headerlink\" title=\"5、用 fromkeys 将列表转换成字典\"></a>5、用 fromkeys 将列表转换成字典</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keys = &#123;<span class=\"string\">'a'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'i'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'u'</span> &#125;</span><br><span class=\"line\">value = []</span><br><span class=\"line\">d = dict.fromkeys(keys, value)</span><br><span class=\"line\">print(d)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">&#123;<span class=\"string\">'i'</span>: [], <span class=\"string\">'u'</span>: [], <span class=\"string\">'e'</span>: [], </span><br><span class=\"line\"> <span class=\"string\">'a'</span>: [], <span class=\"string\">'o'</span>: []&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6、用字典实现-switch-…-case-语句\"><a href=\"#6、用字典实现-switch-…-case-语句\" class=\"headerlink\" title=\"6、用字典实现 switch … case 语句\"></a>6、用字典实现 switch … case 语句</h3><p>Python 中没有 switch … case 语句，这个问题Python之父龟叔表示这个语法过去没有，现在没有，以后也不会有。因为Python简洁的语法完全可以用 if … elif 实现。如果有太多的分支判断，还可以使用字典来代替。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if arg == 0:</span><br><span class=\"line\">    return &apos;zero&apos;</span><br><span class=\"line\">elif arg == 1:</span><br><span class=\"line\">    return &apos;one&apos;</span><br><span class=\"line\">elif arg == 2:</span><br><span class=\"line\">    return &quot;two&quot;</span><br><span class=\"line\">else:</span><br><span class=\"line\">    return &quot;nothing&quot;</span><br><span class=\"line\">#good</span><br><span class=\"line\"></span><br><span class=\"line\">data = &#123;</span><br><span class=\"line\">    0: &quot;zero&quot;,</span><br><span class=\"line\">    1: &quot;one&quot;,</span><br><span class=\"line\">    2: &quot;two&quot;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">data.get(arg, &quot;nothing&quot;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"7、使用-iteritems-迭代字典中的元素\"><a href=\"#7、使用-iteritems-迭代字典中的元素\" class=\"headerlink\" title=\"7、使用 iteritems 迭代字典中的元素\"></a>7、使用 iteritems 迭代字典中的元素</h3><p>python提供了几种方式迭代字典中的元素，第一种是使用 items 方法：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d = &#123;</span><br><span class=\"line\">    <span class=\"number\">0</span>: <span class=\"string\">\"zero\"</span>,</span><br><span class=\"line\">    <span class=\"number\">1</span>: <span class=\"string\">\"one\"</span>,</span><br><span class=\"line\">    <span class=\"number\">2</span>: <span class=\"string\">\"two\"</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> d.items():</span><br><span class=\"line\">    print(k, v)</span><br></pre></td></tr></table></figure></p>\n<p>items 方法返回的是（key ,value）组成的列表对象，这种方式的弊端是迭代超大字典的时候，内存瞬间会扩大两倍，因为列表对象会一次性把所有元素加载到内存，更好的方式是使用 iteritems<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> d.iteritems():</span><br><span class=\"line\">    print(k, v)</span><br></pre></td></tr></table></figure></p>\n<p>iteritems 返回的是迭代器对象，迭代器对象具有惰性加载的特性，只有真正需要的时候才生成值，这种方式在迭代过程中不需要额外的内存来装载这些数据。注意 Python3 中，只有 items 方法了，它等价于 Python2 中的 iteritems，而 iteritems 这个方法名被移除了。</p>\n<h3 id=\"8、使用字典推导式\"><a href=\"#8、使用字典推导式\" class=\"headerlink\" title=\"8、使用字典推导式\"></a>8、使用字典推导式</h3><p>推导式是个绝妙的东西，列表推导式一出，map、filter等函数黯然失色，自 Python2.7以后的版本，此特性扩展到了字典和集合身上，构建字典对象无需调用 dict 方法。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># bad</span></span><br><span class=\"line\"></span><br><span class=\"line\">numbers = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">d = dict([(number,number*<span class=\"number\">2</span>) <span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> numbers])</span><br><span class=\"line\"><span class=\"comment\"># good</span></span><br><span class=\"line\"></span><br><span class=\"line\">numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">d = &#123;number: number * <span class=\"number\">2</span> <span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> numbers&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{"projects":[{"name":"extract_news","url":"https://github.com/hee0624/extract_news","desc":"Python package to parse news from various news website"}]}},"excerpt":"","more":"<h3 id=\"1、用-in-关键字检查-key-是否存在\"><a href=\"#1、用-in-关键字检查-key-是否存在\" class=\"headerlink\" title=\"1、用 in 关键字检查 key 是否存在\"></a>1、用 in 关键字检查 key 是否存在</h3><p>Python之禅中有一条开发哲学是：</p>\n<p>There should be one— and preferably only one —obvious way to do it.</p>\n<p>尽量找一种，最好是唯一种显而易见的解决方案。Python2 中判断某个 key 是否存在字典中可使用 has_key 方法，另外一种方式是使用 in 关键字。但是强烈推荐使用后者，因为 in 的处理速度更快，另外一个原因是 has_key 这个方法在 Python3 被移除了，要想同时兼容py2和py3两个版本的代码，用 in 是最好的选择。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># bad</span></span><br><span class=\"line\"></span><br><span class=\"line\">d = &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'python'</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> d.has_key(<span class=\"string\">'name'</span>):</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"comment\"># good</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"string\">'name'</span> <span class=\"keyword\">in</span> d:</span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"2、用-get-获取字典中的值\"><a href=\"#2、用-get-获取字典中的值\" class=\"headerlink\" title=\"2、用 get 获取字典中的值\"></a>2、用 get 获取字典中的值</h3><p>关于获取字典中的值，一种简单的方式就是用d[x]访问该元素，但是这种情况在 key 不存在的情况下会报 KeyError 错误，当然你可以先用 in 操作检查 key 是否在字典中再获取，不过这种方式不符合 Python 之禅中说的：</p>\n<p>Simple is better than complex.<br>Flat is better than nested.</p>\n<p>好的代码应该是简单易懂的，扁平的代码结构更加可读。我们可以使用 get 方法来代替 if … else<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># bad</span></span><br><span class=\"line\"></span><br><span class=\"line\">d = &#123;<span class=\"string\">'name'</span>: <span class=\"string\">'python'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"string\">'name'</span> <span class=\"keyword\">in</span> d:</span><br><span class=\"line\">    print(d[<span class=\"string\">'hello'</span>])</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'default'</span>)</span><br><span class=\"line\"><span class=\"comment\"># good</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(d.get(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"default\"</span>))</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"3、用-setdefault-为字典中不存在的-key-设置缺省值\"><a href=\"#3、用-setdefault-为字典中不存在的-key-设置缺省值\" class=\"headerlink\" title=\"3、用 setdefault 为字典中不存在的 key 设置缺省值\"></a>3、用 setdefault 为字典中不存在的 key 设置缺省值</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = [</span><br><span class=\"line\">        (&quot;animal&quot;, &quot;bear&quot;),</span><br><span class=\"line\">        (&quot;animal&quot;, &quot;duck&quot;),</span><br><span class=\"line\">        (&quot;plant&quot;, &quot;cactus&quot;),</span><br><span class=\"line\">        (&quot;vehicle&quot;, &quot;speed boat&quot;),</span><br><span class=\"line\">        (&quot;vehicle&quot;, &quot;school bus&quot;)</span><br><span class=\"line\">    ]</span><br></pre></td></tr></table></figure>\n<p>在做分类统计时，希望把同一类型的数据归到字典中的某种类型中，比如上面代码，把相同类型的事物用列表的形式重新组装，得到新的字典<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groups = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt; </span><br><span class=\"line\">&#123;&apos;plant&apos;: [&apos;cactus&apos;], </span><br><span class=\"line\"> &apos;animal&apos;: [&apos;bear&apos;, &apos;duck&apos;], </span><br><span class=\"line\"> &apos;vehicle&apos;: [&apos;speed boat&apos;, &apos;school bus&apos;]&#125;</span><br></pre></td></tr></table></figure></p>\n<p>普通的方式就是先判断 key 是否已经存在，如果不存在则要先用列表对象进行初始化，再执行后续操作。而更好的方式就是使用字典中的 setdefault 方法。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># bad</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (key, value) <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> key <span class=\"keyword\">in</span> groups:</span><br><span class=\"line\">        groups[key].append(value)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        groups[key] = [value]</span><br><span class=\"line\"><span class=\"comment\"># good</span></span><br><span class=\"line\"></span><br><span class=\"line\">groups = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (key, value) <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">    groups.setdefault(key, []).append(value)</span><br></pre></td></tr></table></figure></p>\n<p>setdefault 的作用是：</p>\n<p>如果 key 存在于字典中，那么直接返回对应的值，等效于 get 方法<br>如果 key 不存在字典中，则会用 setdefault 中的第二个参数作为该 key 的值，再返回该值。</p>\n<h3 id=\"4、用-defaultdict-初始化字典对象\"><a href=\"#4、用-defaultdict-初始化字典对象\" class=\"headerlink\" title=\"4、用 defaultdict 初始化字典对象\"></a>4、用 defaultdict 初始化字典对象</h3><p>如果不希望 d[x] 在 x 不存在时报错，除了在获取元素时使用 get 方法之外，另外一种方式是用 collections 模块中的 defaultdict，在初始化字典的时候指定一个函数，其实 defaultdict 是 dict 的子类。</p>\n<p>from collections import defaultdict</p>\n<p>groups = defaultdict(list)<br>for (key, value) in data:<br>    groups[key].append(value)<br>当 key 不存在于字典中时，list 函数将被调用并返回一个空列表赋值给 d[key]，这样一来，你就不用担心调用 d[k] 会报错了。</p>\n<h3 id=\"5、用-fromkeys-将列表转换成字典\"><a href=\"#5、用-fromkeys-将列表转换成字典\" class=\"headerlink\" title=\"5、用 fromkeys 将列表转换成字典\"></a>5、用 fromkeys 将列表转换成字典</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keys = &#123;<span class=\"string\">'a'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'i'</span>, <span class=\"string\">'o'</span>, <span class=\"string\">'u'</span> &#125;</span><br><span class=\"line\">value = []</span><br><span class=\"line\">d = dict.fromkeys(keys, value)</span><br><span class=\"line\">print(d)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">&#123;<span class=\"string\">'i'</span>: [], <span class=\"string\">'u'</span>: [], <span class=\"string\">'e'</span>: [], </span><br><span class=\"line\"> <span class=\"string\">'a'</span>: [], <span class=\"string\">'o'</span>: []&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6、用字典实现-switch-…-case-语句\"><a href=\"#6、用字典实现-switch-…-case-语句\" class=\"headerlink\" title=\"6、用字典实现 switch … case 语句\"></a>6、用字典实现 switch … case 语句</h3><p>Python 中没有 switch … case 语句，这个问题Python之父龟叔表示这个语法过去没有，现在没有，以后也不会有。因为Python简洁的语法完全可以用 if … elif 实现。如果有太多的分支判断，还可以使用字典来代替。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if arg == 0:</span><br><span class=\"line\">    return &apos;zero&apos;</span><br><span class=\"line\">elif arg == 1:</span><br><span class=\"line\">    return &apos;one&apos;</span><br><span class=\"line\">elif arg == 2:</span><br><span class=\"line\">    return &quot;two&quot;</span><br><span class=\"line\">else:</span><br><span class=\"line\">    return &quot;nothing&quot;</span><br><span class=\"line\">#good</span><br><span class=\"line\"></span><br><span class=\"line\">data = &#123;</span><br><span class=\"line\">    0: &quot;zero&quot;,</span><br><span class=\"line\">    1: &quot;one&quot;,</span><br><span class=\"line\">    2: &quot;two&quot;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">data.get(arg, &quot;nothing&quot;)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"7、使用-iteritems-迭代字典中的元素\"><a href=\"#7、使用-iteritems-迭代字典中的元素\" class=\"headerlink\" title=\"7、使用 iteritems 迭代字典中的元素\"></a>7、使用 iteritems 迭代字典中的元素</h3><p>python提供了几种方式迭代字典中的元素，第一种是使用 items 方法：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d = &#123;</span><br><span class=\"line\">    <span class=\"number\">0</span>: <span class=\"string\">\"zero\"</span>,</span><br><span class=\"line\">    <span class=\"number\">1</span>: <span class=\"string\">\"one\"</span>,</span><br><span class=\"line\">    <span class=\"number\">2</span>: <span class=\"string\">\"two\"</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> d.items():</span><br><span class=\"line\">    print(k, v)</span><br></pre></td></tr></table></figure></p>\n<p>items 方法返回的是（key ,value）组成的列表对象，这种方式的弊端是迭代超大字典的时候，内存瞬间会扩大两倍，因为列表对象会一次性把所有元素加载到内存，更好的方式是使用 iteritems<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> d.iteritems():</span><br><span class=\"line\">    print(k, v)</span><br></pre></td></tr></table></figure></p>\n<p>iteritems 返回的是迭代器对象，迭代器对象具有惰性加载的特性，只有真正需要的时候才生成值，这种方式在迭代过程中不需要额外的内存来装载这些数据。注意 Python3 中，只有 items 方法了，它等价于 Python2 中的 iteritems，而 iteritems 这个方法名被移除了。</p>\n<h3 id=\"8、使用字典推导式\"><a href=\"#8、使用字典推导式\" class=\"headerlink\" title=\"8、使用字典推导式\"></a>8、使用字典推导式</h3><p>推导式是个绝妙的东西，列表推导式一出，map、filter等函数黯然失色，自 Python2.7以后的版本，此特性扩展到了字典和集合身上，构建字典对象无需调用 dict 方法。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># bad</span></span><br><span class=\"line\"></span><br><span class=\"line\">numbers = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">d = dict([(number,number*<span class=\"number\">2</span>) <span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> numbers])</span><br><span class=\"line\"><span class=\"comment\"># good</span></span><br><span class=\"line\"></span><br><span class=\"line\">numbers = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">d = &#123;number: number * <span class=\"number\">2</span> <span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> numbers&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"机器学习优化问题－损失函数，风险","date":"2018-10-15T08:13:18.000Z","_content":"\n# 损失函数\n&nbsp;&nbsp;针对单个具体样本，表示模型预测值与真实样本值之间的差距。损失函数越小，说明模型对于该样本预测越准确。常见损失函数有0-1损失函数、平方损失函数、绝对损失函数、对数损失函数（对数似然损失函数）。\n- 0-1损失函数\n$$\nL(Y,f(X))\\left\\{\\begin{matrix}1,& Y\\neq f(x)\n & \\\\ 0,\n & Y=f(x)\n\\end{matrix}\\right.\n$$\n- 平方损失函数(欧式损失函数)\n$$L(Y,f(x))=(Y-f(x))^2$$\n适用场景:实数值回归问题\nTips:欧式损失前可以增加Sigmoid操作进行归一化，相应的输出标签也归一化到\\[0,1\\]。\n- 绝对损失函数\n$$L(Y,f(x))=|y-f(x)|$$\n\n- 对数损失函数(logistic回归/神经网络/期望极大算法)\n$$L(Y,P(Y|x))=-logP(Y|x)=-\\sum_{j=1}^{M}y_ilog(P_j)$$\n其中：$y_i$为二值指标\n\n# 经验风险\n&nbsp;&nbsp;对所有训练样本都求一次损失函数，再累加求平均。即，模型f(x)对训练样本中所有样本的预测能力。\n$$R(f)=\\frac{1}{N}\\sum_{i=1}^{N}L(y_i,f(x_i))$$\n&nbsp;&nbsp;所谓经验风险最小化即对训练集中的所有样本点损失函数的平均最小化。经验风险越小说明模型f(x)对训练集的拟合程度越好。\n\n# 期望风险\n&nbsp;&nbsp;对所有样本（包含未知样本和已知的训练样本）的预测能力，是全局概念。（经验风险则是局部概念，仅仅表示决策函数对训练数据集里的样本的预测能力。）\n$$ R(f)=E_p[L(Y,f(X))]=\\int_{x\\times y}L(y,f(x))P(x,y)dxdy$$\n&nbsp;&nbsp;理想的模型（决策）函数应该是让所有的样本的损失函数最小（即期望风险最小化）。但是期望风险函数往往不可得，所以用局部最优代替全局最优。这就是经验风险最小化的理论基础。\n**总结**经验风险和期望风险之间的关系：\n经验风险是局部的，基于训练集所有样本点损失函数最小化。经验风险是局部最优，是现实的可求的。\n期望风险是全局的，基于所有样本点损失函数最小化。期望风险是全局最优，是理想化的不可求的。\n缺点：只考虑经验风险的话，会出现过拟合现象，即模型f(x)对训练集中所有的样本点都有最好的预测能力，但是对于非训练集中的样本数据，模型的预测能力非常不好。怎么办？这就需要结构风险。\n\n# 结构风险\n&nbsp;&nbsp;对经验风险和期望风险的折中，在经验风险函数后面加一个正则化项（惩罚项），是一个大于0的系数lamada。J(f)表示的是模型的复杂度。\n$$R(f)=\\frac{1}{N}\\sum_{j=1}^{N}L(y_i,f(x_i))+\\lambda J(f) $$\n&nbsp;&nbsp;经验风险越小，模型决策函数越复杂，其包含的参数越多，当经验风险函数小到一定程度就出现了过拟合现象。也可以理解为模型决策函数的复杂程度是过拟合的必要条件，那么我们要想防止过拟合现象的方式，就要破坏这个必要条件，即降低决策函数的复杂度。也即，让惩罚项J(f)最小化，现在出现两个需要最小化的函数了。我们需要同时保证经验风险函数和模型决策函数的复杂度都达到最小化，一个简单的办法把两个式子融合成一个式子得到结构风险函数然后对这个结构风险函数进行最小化。\n\n# 过拟合和欠拟合(过学习和欠学习)\n\n- 过拟合　经验风险小，期望风险大(训练数据表现好，测试数据表现不好)\n- 欠拟合　经验风险大，期望风险小(训练数据表现不好，测试数据表现好)\n- 泛化能力好　经验风险小，期望风险小(训练数据表现好，测试数据表现好)\n","source":"_posts/20181015-机器学习优化问题－风险.md","raw":"---\ntitle: 机器学习优化问题－损失函数，风险\ndate: 2018-10-15 16:13:18\ntags: [机器学习, 损失函数]\n---\n\n# 损失函数\n&nbsp;&nbsp;针对单个具体样本，表示模型预测值与真实样本值之间的差距。损失函数越小，说明模型对于该样本预测越准确。常见损失函数有0-1损失函数、平方损失函数、绝对损失函数、对数损失函数（对数似然损失函数）。\n- 0-1损失函数\n$$\nL(Y,f(X))\\left\\{\\begin{matrix}1,& Y\\neq f(x)\n & \\\\ 0,\n & Y=f(x)\n\\end{matrix}\\right.\n$$\n- 平方损失函数(欧式损失函数)\n$$L(Y,f(x))=(Y-f(x))^2$$\n适用场景:实数值回归问题\nTips:欧式损失前可以增加Sigmoid操作进行归一化，相应的输出标签也归一化到\\[0,1\\]。\n- 绝对损失函数\n$$L(Y,f(x))=|y-f(x)|$$\n\n- 对数损失函数(logistic回归/神经网络/期望极大算法)\n$$L(Y,P(Y|x))=-logP(Y|x)=-\\sum_{j=1}^{M}y_ilog(P_j)$$\n其中：$y_i$为二值指标\n\n# 经验风险\n&nbsp;&nbsp;对所有训练样本都求一次损失函数，再累加求平均。即，模型f(x)对训练样本中所有样本的预测能力。\n$$R(f)=\\frac{1}{N}\\sum_{i=1}^{N}L(y_i,f(x_i))$$\n&nbsp;&nbsp;所谓经验风险最小化即对训练集中的所有样本点损失函数的平均最小化。经验风险越小说明模型f(x)对训练集的拟合程度越好。\n\n# 期望风险\n&nbsp;&nbsp;对所有样本（包含未知样本和已知的训练样本）的预测能力，是全局概念。（经验风险则是局部概念，仅仅表示决策函数对训练数据集里的样本的预测能力。）\n$$ R(f)=E_p[L(Y,f(X))]=\\int_{x\\times y}L(y,f(x))P(x,y)dxdy$$\n&nbsp;&nbsp;理想的模型（决策）函数应该是让所有的样本的损失函数最小（即期望风险最小化）。但是期望风险函数往往不可得，所以用局部最优代替全局最优。这就是经验风险最小化的理论基础。\n**总结**经验风险和期望风险之间的关系：\n经验风险是局部的，基于训练集所有样本点损失函数最小化。经验风险是局部最优，是现实的可求的。\n期望风险是全局的，基于所有样本点损失函数最小化。期望风险是全局最优，是理想化的不可求的。\n缺点：只考虑经验风险的话，会出现过拟合现象，即模型f(x)对训练集中所有的样本点都有最好的预测能力，但是对于非训练集中的样本数据，模型的预测能力非常不好。怎么办？这就需要结构风险。\n\n# 结构风险\n&nbsp;&nbsp;对经验风险和期望风险的折中，在经验风险函数后面加一个正则化项（惩罚项），是一个大于0的系数lamada。J(f)表示的是模型的复杂度。\n$$R(f)=\\frac{1}{N}\\sum_{j=1}^{N}L(y_i,f(x_i))+\\lambda J(f) $$\n&nbsp;&nbsp;经验风险越小，模型决策函数越复杂，其包含的参数越多，当经验风险函数小到一定程度就出现了过拟合现象。也可以理解为模型决策函数的复杂程度是过拟合的必要条件，那么我们要想防止过拟合现象的方式，就要破坏这个必要条件，即降低决策函数的复杂度。也即，让惩罚项J(f)最小化，现在出现两个需要最小化的函数了。我们需要同时保证经验风险函数和模型决策函数的复杂度都达到最小化，一个简单的办法把两个式子融合成一个式子得到结构风险函数然后对这个结构风险函数进行最小化。\n\n# 过拟合和欠拟合(过学习和欠学习)\n\n- 过拟合　经验风险小，期望风险大(训练数据表现好，测试数据表现不好)\n- 欠拟合　经验风险大，期望风险小(训练数据表现不好，测试数据表现好)\n- 泛化能力好　经验风险小，期望风险小(训练数据表现好，测试数据表现好)\n","slug":"20181015-机器学习优化问题－风险","published":1,"updated":"2018-11-28T13:54:40.801Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjttrlg9w0013ow6xy7zwgqeg","content":"<h1 id=\"损失函数\"><a href=\"#损失函数\" class=\"headerlink\" title=\"损失函数\"></a>损失函数</h1><p>&nbsp;&nbsp;针对单个具体样本，表示模型预测值与真实样本值之间的差距。损失函数越小，说明模型对于该样本预测越准确。常见损失函数有0-1损失函数、平方损失函数、绝对损失函数、对数损失函数（对数似然损失函数）。</p>\n<ul>\n<li>0-1损失函数<script type=\"math/tex; mode=display\">\nL(Y,f(X))\\left\\{\\begin{matrix}1,& Y\\neq f(x)\n& \\\\ 0,\n& Y=f(x)\n\\end{matrix}\\right.</script></li>\n<li>平方损失函数(欧式损失函数)<script type=\"math/tex; mode=display\">L(Y,f(x))=(Y-f(x))^2</script>适用场景:实数值回归问题<br>Tips:欧式损失前可以增加Sigmoid操作进行归一化，相应的输出标签也归一化到[0,1]。</li>\n<li><p>绝对损失函数</p>\n<script type=\"math/tex; mode=display\">L(Y,f(x))=|y-f(x)|</script></li>\n<li><p>对数损失函数(logistic回归/神经网络/期望极大算法)</p>\n<script type=\"math/tex; mode=display\">L(Y,P(Y|x))=-logP(Y|x)=-\\sum_{j=1}^{M}y_ilog(P_j)</script><p>其中：$y_i$为二值指标</p>\n</li>\n</ul>\n<h1 id=\"经验风险\"><a href=\"#经验风险\" class=\"headerlink\" title=\"经验风险\"></a>经验风险</h1><p>&nbsp;&nbsp;对所有训练样本都求一次损失函数，再累加求平均。即，模型f(x)对训练样本中所有样本的预测能力。</p>\n<script type=\"math/tex; mode=display\">R(f)=\\frac{1}{N}\\sum_{i=1}^{N}L(y_i,f(x_i))</script><p>&nbsp;&nbsp;所谓经验风险最小化即对训练集中的所有样本点损失函数的平均最小化。经验风险越小说明模型f(x)对训练集的拟合程度越好。</p>\n<h1 id=\"期望风险\"><a href=\"#期望风险\" class=\"headerlink\" title=\"期望风险\"></a>期望风险</h1><p>&nbsp;&nbsp;对所有样本（包含未知样本和已知的训练样本）的预测能力，是全局概念。（经验风险则是局部概念，仅仅表示决策函数对训练数据集里的样本的预测能力。）</p>\n<script type=\"math/tex; mode=display\">R(f)=E_p[L(Y,f(X))]=\\int_{x\\times y}L(y,f(x))P(x,y)dxdy</script><p>&nbsp;&nbsp;理想的模型（决策）函数应该是让所有的样本的损失函数最小（即期望风险最小化）。但是期望风险函数往往不可得，所以用局部最优代替全局最优。这就是经验风险最小化的理论基础。<br><strong>总结</strong>经验风险和期望风险之间的关系：<br>经验风险是局部的，基于训练集所有样本点损失函数最小化。经验风险是局部最优，是现实的可求的。<br>期望风险是全局的，基于所有样本点损失函数最小化。期望风险是全局最优，是理想化的不可求的。<br>缺点：只考虑经验风险的话，会出现过拟合现象，即模型f(x)对训练集中所有的样本点都有最好的预测能力，但是对于非训练集中的样本数据，模型的预测能力非常不好。怎么办？这就需要结构风险。</p>\n<h1 id=\"结构风险\"><a href=\"#结构风险\" class=\"headerlink\" title=\"结构风险\"></a>结构风险</h1><p>&nbsp;&nbsp;对经验风险和期望风险的折中，在经验风险函数后面加一个正则化项（惩罚项），是一个大于0的系数lamada。J(f)表示的是模型的复杂度。</p>\n<script type=\"math/tex; mode=display\">R(f)=\\frac{1}{N}\\sum_{j=1}^{N}L(y_i,f(x_i))+\\lambda J(f)</script><p>&nbsp;&nbsp;经验风险越小，模型决策函数越复杂，其包含的参数越多，当经验风险函数小到一定程度就出现了过拟合现象。也可以理解为模型决策函数的复杂程度是过拟合的必要条件，那么我们要想防止过拟合现象的方式，就要破坏这个必要条件，即降低决策函数的复杂度。也即，让惩罚项J(f)最小化，现在出现两个需要最小化的函数了。我们需要同时保证经验风险函数和模型决策函数的复杂度都达到最小化，一个简单的办法把两个式子融合成一个式子得到结构风险函数然后对这个结构风险函数进行最小化。</p>\n<h1 id=\"过拟合和欠拟合-过学习和欠学习\"><a href=\"#过拟合和欠拟合-过学习和欠学习\" class=\"headerlink\" title=\"过拟合和欠拟合(过学习和欠学习)\"></a>过拟合和欠拟合(过学习和欠学习)</h1><ul>\n<li>过拟合　经验风险小，期望风险大(训练数据表现好，测试数据表现不好)</li>\n<li>欠拟合　经验风险大，期望风险小(训练数据表现不好，测试数据表现好)</li>\n<li>泛化能力好　经验风险小，期望风险小(训练数据表现好，测试数据表现好)</li>\n</ul>\n","site":{"data":{"projects":[{"name":"extract_news","url":"https://github.com/hee0624/extract_news","desc":"Python package to parse news from various news website"}]}},"excerpt":"","more":"<h1 id=\"损失函数\"><a href=\"#损失函数\" class=\"headerlink\" title=\"损失函数\"></a>损失函数</h1><p>&nbsp;&nbsp;针对单个具体样本，表示模型预测值与真实样本值之间的差距。损失函数越小，说明模型对于该样本预测越准确。常见损失函数有0-1损失函数、平方损失函数、绝对损失函数、对数损失函数（对数似然损失函数）。</p>\n<ul>\n<li>0-1损失函数<script type=\"math/tex; mode=display\">\nL(Y,f(X))\\left\\{\\begin{matrix}1,& Y\\neq f(x)\n& \\\\ 0,\n& Y=f(x)\n\\end{matrix}\\right.</script></li>\n<li>平方损失函数(欧式损失函数)<script type=\"math/tex; mode=display\">L(Y,f(x))=(Y-f(x))^2</script>适用场景:实数值回归问题<br>Tips:欧式损失前可以增加Sigmoid操作进行归一化，相应的输出标签也归一化到[0,1]。</li>\n<li><p>绝对损失函数</p>\n<script type=\"math/tex; mode=display\">L(Y,f(x))=|y-f(x)|</script></li>\n<li><p>对数损失函数(logistic回归/神经网络/期望极大算法)</p>\n<script type=\"math/tex; mode=display\">L(Y,P(Y|x))=-logP(Y|x)=-\\sum_{j=1}^{M}y_ilog(P_j)</script><p>其中：$y_i$为二值指标</p>\n</li>\n</ul>\n<h1 id=\"经验风险\"><a href=\"#经验风险\" class=\"headerlink\" title=\"经验风险\"></a>经验风险</h1><p>&nbsp;&nbsp;对所有训练样本都求一次损失函数，再累加求平均。即，模型f(x)对训练样本中所有样本的预测能力。</p>\n<script type=\"math/tex; mode=display\">R(f)=\\frac{1}{N}\\sum_{i=1}^{N}L(y_i,f(x_i))</script><p>&nbsp;&nbsp;所谓经验风险最小化即对训练集中的所有样本点损失函数的平均最小化。经验风险越小说明模型f(x)对训练集的拟合程度越好。</p>\n<h1 id=\"期望风险\"><a href=\"#期望风险\" class=\"headerlink\" title=\"期望风险\"></a>期望风险</h1><p>&nbsp;&nbsp;对所有样本（包含未知样本和已知的训练样本）的预测能力，是全局概念。（经验风险则是局部概念，仅仅表示决策函数对训练数据集里的样本的预测能力。）</p>\n<script type=\"math/tex; mode=display\">R(f)=E_p[L(Y,f(X))]=\\int_{x\\times y}L(y,f(x))P(x,y)dxdy</script><p>&nbsp;&nbsp;理想的模型（决策）函数应该是让所有的样本的损失函数最小（即期望风险最小化）。但是期望风险函数往往不可得，所以用局部最优代替全局最优。这就是经验风险最小化的理论基础。<br><strong>总结</strong>经验风险和期望风险之间的关系：<br>经验风险是局部的，基于训练集所有样本点损失函数最小化。经验风险是局部最优，是现实的可求的。<br>期望风险是全局的，基于所有样本点损失函数最小化。期望风险是全局最优，是理想化的不可求的。<br>缺点：只考虑经验风险的话，会出现过拟合现象，即模型f(x)对训练集中所有的样本点都有最好的预测能力，但是对于非训练集中的样本数据，模型的预测能力非常不好。怎么办？这就需要结构风险。</p>\n<h1 id=\"结构风险\"><a href=\"#结构风险\" class=\"headerlink\" title=\"结构风险\"></a>结构风险</h1><p>&nbsp;&nbsp;对经验风险和期望风险的折中，在经验风险函数后面加一个正则化项（惩罚项），是一个大于0的系数lamada。J(f)表示的是模型的复杂度。</p>\n<script type=\"math/tex; mode=display\">R(f)=\\frac{1}{N}\\sum_{j=1}^{N}L(y_i,f(x_i))+\\lambda J(f)</script><p>&nbsp;&nbsp;经验风险越小，模型决策函数越复杂，其包含的参数越多，当经验风险函数小到一定程度就出现了过拟合现象。也可以理解为模型决策函数的复杂程度是过拟合的必要条件，那么我们要想防止过拟合现象的方式，就要破坏这个必要条件，即降低决策函数的复杂度。也即，让惩罚项J(f)最小化，现在出现两个需要最小化的函数了。我们需要同时保证经验风险函数和模型决策函数的复杂度都达到最小化，一个简单的办法把两个式子融合成一个式子得到结构风险函数然后对这个结构风险函数进行最小化。</p>\n<h1 id=\"过拟合和欠拟合-过学习和欠学习\"><a href=\"#过拟合和欠拟合-过学习和欠学习\" class=\"headerlink\" title=\"过拟合和欠拟合(过学习和欠学习)\"></a>过拟合和欠拟合(过学习和欠学习)</h1><ul>\n<li>过拟合　经验风险小，期望风险大(训练数据表现好，测试数据表现不好)</li>\n<li>欠拟合　经验风险大，期望风险小(训练数据表现不好，测试数据表现好)</li>\n<li>泛化能力好　经验风险小，期望风险小(训练数据表现好，测试数据表现好)</li>\n</ul>\n"},{"title":"CNN总结","date":"2018-10-16T01:16:43.000Z","_content":"#### 0.基本概念\n- 卷积的预定义参数可以被视为权重矩阵的先验，卷积核的大小，filter的数量,这些都是预定义的网络参数。\n- 全连接层也是一种卷积层，它的参数基本核卷积层的参数一样，卷积核大小核原始数据大小一样。全连接层起到了将学到的“分布式特征表示”映射到样本标记空间的作用。(全连接层参数占整个网络参数的80%左右，全连接层的卷积核横截面积做得核输入feature map一样大)\n- Sample: 样本，数据集中的一个元素，一条数据。\n\t例1: 在卷积神经网络中，一张图像是一个样本。\n\t例2: 在语音识别模型中，一段音频是一个样本。\n- Batch: 批，含有 N 个样本的集合。每一个 batch 的样本都是独立并行处理的。在训练时，一个 batch 的结果只会用来更新一次模型。  - 一个 batch 的样本通常比单个输入更接近于总体输入数据的分布，batch 越大就越近似。然而，每个 batch 将花费更长的时间来处理，并且仍然只更新模型一次。在推理（评估/预测）时，建议条件允许的情况下选择一个尽可能大的 batch，（因为较大的 batch 通常评估/预测的速度会更快）。\n- Epoch: 轮次，通常被定义为 「在整个数据集上的一轮迭代」，用于训练的不同的阶段，这有利于记录和定期评估。\n- img2col 优化卷积运算，转换成矩阵相乘。\n\n####  1.为什么CNN适用于图像？\n- 图片的模式（特征）不需要看整个图片，看小区域就行。（有没有鸟嘴出现？）convolution\n- 相同的模式（特征）出现在不用的区域。共用参数。convolution\n- 像素的二次抽样不会改变图像的形状，图片减小，参数减小。max pooling\n\n\n####  2.CNN架构\n图片 ->  convolution -> max pooling -> convolution -> max pooling ....-> flatten -> fully connected  feedforward netword\n\n\n####  3.CNN实践keras\n\n**convolution:** model2.add(Convolution2D(25,3,3, input_shape=(1,28,28)))备注：１黑白25个特征3\\*3卷积\n**max pooling:** model2.add(MaxPooling2D((2,2)))\n**flatten:** model2.add(Flatten)\n**fully connected:** model2.add(Dense(output_dim=100)) model2.add(Activation('relu'))\nmodel2.add(Dense(output_dim=10)) model2.add(Activation('softmax'))\n\n\n","source":"_posts/20181016-CNN总结.md","raw":"---\ntitle: CNN总结\ndate: 2018-10-16 09:16:43\ntags: [CNN, 深度学习]\n---\n#### 0.基本概念\n- 卷积的预定义参数可以被视为权重矩阵的先验，卷积核的大小，filter的数量,这些都是预定义的网络参数。\n- 全连接层也是一种卷积层，它的参数基本核卷积层的参数一样，卷积核大小核原始数据大小一样。全连接层起到了将学到的“分布式特征表示”映射到样本标记空间的作用。(全连接层参数占整个网络参数的80%左右，全连接层的卷积核横截面积做得核输入feature map一样大)\n- Sample: 样本，数据集中的一个元素，一条数据。\n\t例1: 在卷积神经网络中，一张图像是一个样本。\n\t例2: 在语音识别模型中，一段音频是一个样本。\n- Batch: 批，含有 N 个样本的集合。每一个 batch 的样本都是独立并行处理的。在训练时，一个 batch 的结果只会用来更新一次模型。  - 一个 batch 的样本通常比单个输入更接近于总体输入数据的分布，batch 越大就越近似。然而，每个 batch 将花费更长的时间来处理，并且仍然只更新模型一次。在推理（评估/预测）时，建议条件允许的情况下选择一个尽可能大的 batch，（因为较大的 batch 通常评估/预测的速度会更快）。\n- Epoch: 轮次，通常被定义为 「在整个数据集上的一轮迭代」，用于训练的不同的阶段，这有利于记录和定期评估。\n- img2col 优化卷积运算，转换成矩阵相乘。\n\n####  1.为什么CNN适用于图像？\n- 图片的模式（特征）不需要看整个图片，看小区域就行。（有没有鸟嘴出现？）convolution\n- 相同的模式（特征）出现在不用的区域。共用参数。convolution\n- 像素的二次抽样不会改变图像的形状，图片减小，参数减小。max pooling\n\n\n####  2.CNN架构\n图片 ->  convolution -> max pooling -> convolution -> max pooling ....-> flatten -> fully connected  feedforward netword\n\n\n####  3.CNN实践keras\n\n**convolution:** model2.add(Convolution2D(25,3,3, input_shape=(1,28,28)))备注：１黑白25个特征3\\*3卷积\n**max pooling:** model2.add(MaxPooling2D((2,2)))\n**flatten:** model2.add(Flatten)\n**fully connected:** model2.add(Dense(output_dim=100)) model2.add(Activation('relu'))\nmodel2.add(Dense(output_dim=10)) model2.add(Activation('softmax'))\n\n\n","slug":"20181016-CNN总结","published":1,"updated":"2018-12-05T08:44:21.018Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjttrlg9x0015ow6x0ltwvfcs","content":"<h4 id=\"0-基本概念\"><a href=\"#0-基本概念\" class=\"headerlink\" title=\"0.基本概念\"></a>0.基本概念</h4><ul>\n<li>卷积的预定义参数可以被视为权重矩阵的先验，卷积核的大小，filter的数量,这些都是预定义的网络参数。</li>\n<li>全连接层也是一种卷积层，它的参数基本核卷积层的参数一样，卷积核大小核原始数据大小一样。全连接层起到了将学到的“分布式特征表示”映射到样本标记空间的作用。(全连接层参数占整个网络参数的80%左右，全连接层的卷积核横截面积做得核输入feature map一样大)</li>\n<li>Sample: 样本，数据集中的一个元素，一条数据。<br>  例1: 在卷积神经网络中，一张图像是一个样本。<br>  例2: 在语音识别模型中，一段音频是一个样本。</li>\n<li>Batch: 批，含有 N 个样本的集合。每一个 batch 的样本都是独立并行处理的。在训练时，一个 batch 的结果只会用来更新一次模型。  - 一个 batch 的样本通常比单个输入更接近于总体输入数据的分布，batch 越大就越近似。然而，每个 batch 将花费更长的时间来处理，并且仍然只更新模型一次。在推理（评估/预测）时，建议条件允许的情况下选择一个尽可能大的 batch，（因为较大的 batch 通常评估/预测的速度会更快）。</li>\n<li>Epoch: 轮次，通常被定义为 「在整个数据集上的一轮迭代」，用于训练的不同的阶段，这有利于记录和定期评估。</li>\n<li>img2col 优化卷积运算，转换成矩阵相乘。</li>\n</ul>\n<h4 id=\"1-为什么CNN适用于图像？\"><a href=\"#1-为什么CNN适用于图像？\" class=\"headerlink\" title=\"1.为什么CNN适用于图像？\"></a>1.为什么CNN适用于图像？</h4><ul>\n<li>图片的模式（特征）不需要看整个图片，看小区域就行。（有没有鸟嘴出现？）convolution</li>\n<li>相同的模式（特征）出现在不用的区域。共用参数。convolution</li>\n<li>像素的二次抽样不会改变图像的形状，图片减小，参数减小。max pooling</li>\n</ul>\n<h4 id=\"2-CNN架构\"><a href=\"#2-CNN架构\" class=\"headerlink\" title=\"2.CNN架构\"></a>2.CNN架构</h4><p>图片 -&gt;  convolution -&gt; max pooling -&gt; convolution -&gt; max pooling ….-&gt; flatten -&gt; fully connected  feedforward netword</p>\n<h4 id=\"3-CNN实践keras\"><a href=\"#3-CNN实践keras\" class=\"headerlink\" title=\"3.CNN实践keras\"></a>3.CNN实践keras</h4><p><strong>convolution:</strong> model2.add(Convolution2D(25,3,3, input_shape=(1,28,28)))备注：１黑白25个特征3*3卷积<br><strong>max pooling:</strong> model2.add(MaxPooling2D((2,2)))<br><strong>flatten:</strong> model2.add(Flatten)<br><strong>fully connected:</strong> model2.add(Dense(output_dim=100)) model2.add(Activation(‘relu’))<br>model2.add(Dense(output_dim=10)) model2.add(Activation(‘softmax’))</p>\n","site":{"data":{"projects":[{"name":"extract_news","url":"https://github.com/hee0624/extract_news","desc":"Python package to parse news from various news website"}]}},"excerpt":"","more":"<h4 id=\"0-基本概念\"><a href=\"#0-基本概念\" class=\"headerlink\" title=\"0.基本概念\"></a>0.基本概念</h4><ul>\n<li>卷积的预定义参数可以被视为权重矩阵的先验，卷积核的大小，filter的数量,这些都是预定义的网络参数。</li>\n<li>全连接层也是一种卷积层，它的参数基本核卷积层的参数一样，卷积核大小核原始数据大小一样。全连接层起到了将学到的“分布式特征表示”映射到样本标记空间的作用。(全连接层参数占整个网络参数的80%左右，全连接层的卷积核横截面积做得核输入feature map一样大)</li>\n<li>Sample: 样本，数据集中的一个元素，一条数据。<br>  例1: 在卷积神经网络中，一张图像是一个样本。<br>  例2: 在语音识别模型中，一段音频是一个样本。</li>\n<li>Batch: 批，含有 N 个样本的集合。每一个 batch 的样本都是独立并行处理的。在训练时，一个 batch 的结果只会用来更新一次模型。  - 一个 batch 的样本通常比单个输入更接近于总体输入数据的分布，batch 越大就越近似。然而，每个 batch 将花费更长的时间来处理，并且仍然只更新模型一次。在推理（评估/预测）时，建议条件允许的情况下选择一个尽可能大的 batch，（因为较大的 batch 通常评估/预测的速度会更快）。</li>\n<li>Epoch: 轮次，通常被定义为 「在整个数据集上的一轮迭代」，用于训练的不同的阶段，这有利于记录和定期评估。</li>\n<li>img2col 优化卷积运算，转换成矩阵相乘。</li>\n</ul>\n<h4 id=\"1-为什么CNN适用于图像？\"><a href=\"#1-为什么CNN适用于图像？\" class=\"headerlink\" title=\"1.为什么CNN适用于图像？\"></a>1.为什么CNN适用于图像？</h4><ul>\n<li>图片的模式（特征）不需要看整个图片，看小区域就行。（有没有鸟嘴出现？）convolution</li>\n<li>相同的模式（特征）出现在不用的区域。共用参数。convolution</li>\n<li>像素的二次抽样不会改变图像的形状，图片减小，参数减小。max pooling</li>\n</ul>\n<h4 id=\"2-CNN架构\"><a href=\"#2-CNN架构\" class=\"headerlink\" title=\"2.CNN架构\"></a>2.CNN架构</h4><p>图片 -&gt;  convolution -&gt; max pooling -&gt; convolution -&gt; max pooling ….-&gt; flatten -&gt; fully connected  feedforward netword</p>\n<h4 id=\"3-CNN实践keras\"><a href=\"#3-CNN实践keras\" class=\"headerlink\" title=\"3.CNN实践keras\"></a>3.CNN实践keras</h4><p><strong>convolution:</strong> model2.add(Convolution2D(25,3,3, input_shape=(1,28,28)))备注：１黑白25个特征3*3卷积<br><strong>max pooling:</strong> model2.add(MaxPooling2D((2,2)))<br><strong>flatten:</strong> model2.add(Flatten)<br><strong>fully connected:</strong> model2.add(Dense(output_dim=100)) model2.add(Activation(‘relu’))<br>model2.add(Dense(output_dim=10)) model2.add(Activation(‘softmax’))</p>\n"},{"title":"vim笔记","date":"2018-10-31T06:51:53.000Z","_content":"\n>  该笔记转自[小姐姐的味道](https://my.oschina.net/u/3897601/blog/2253063)\n\n## 养成习惯\n&nbsp;&nbsp;vim最大的贡献就是它的按键系统。这也是为什么chrome、idea、atom等编辑器都会提供一个vim mode。笔者见过很多资深的程序员，包括架构师，习惯使用方向键去控制光标的移动。这不能说不对，但这也抛弃了vim最大的精华所在，效率上低了一大截。坚持使用h、j、k、l，你会感谢你今天的纠正。大脑和手指真的是有记忆，当你用的足够多，这也就成了你约定俗成的设定。\n&nbsp;&nbsp;vim另外一个特点就是带模式的。一共四种模式，我们不需要记忆，只需要使用例子去理解即可。(不要使用vim打开大文件，vim会一次性读取所有内容到内存，容易造成宿主机内存溢出。打开文件前，可以使用du -h命令查看文件大小。一般，100MB以下为宜。)\n\n## 1.常用操作\n以下操作在普通模式下执行，连续按键\n#### 漫游\nj 向下\n30j 向下移动30行\nk 向上\nh 向左\nl 向右\n0 到行首\n^ 到行首第一个字符，如果前面有空格的话\n$ 到行尾\ngg 快速到文件头\nG 快速到文件尾\n100G 跳转到第100行\n\n不建议在插入模式下进行光标移动，这很低效\n\n#### 复制：y\nyy 复制一行\n10yy 向下复制10行\nyw 复制光标开始的一个单词\ny$ 复制光标到行尾\nyfB 复制光标到第一个大写B中间的内容\ny2fB 复制光标到第二个大写B中间的内容\n\n#### 剪切: x\nx 向剪切一个一个字符，如果是在行尾，则为向前剪切\n3x 剪切三个\nxp 非行尾交换两个字符，如从bs变成sb\n\n#### 删除：d\n删除的内容会放到剪贴板，按p即可粘贴到其他地方\n\ndd 删除一行\n200dd 删除200行\ndw 删除一个单词 （最喜欢啦）\ndf” 删除到出现的第一个双引号\n\n#### 粘贴: p\np 粘贴复制或剪切的内容\n3p 将复制或剪切的内容粘贴三次\n\n## 2.可视化模式\n#### v行模式，选择一些内容\n可视化模式是非常有用的一种模式，在普通模式下按v即可进入。\n使用h、j、k、l进行漫游，选中相应的内容。\n\n例子，选中一部分想要的内容，并删除。\n![python](20181031-vim笔记/1)\n\n####ctrl+v块模式\n演示：将文件中的每一行添加到ArrayList中：\n![python](20181031-vim笔记/2)\n\n\n1) 在命令模式下，执行%s/$/\");/g，在行尾追加数据\n2) 按ESC进入普通模式，并使用gg回到行首\n3) 按ctrl+v进入可视化模式，然后按G到文件尾\n4) 不要理会编辑器反应，按I进入插入模式，输入list.add(\"\n5) 按ESC回到普通模式，可以发现以上输入已经在每一行生效了\n\n块模式还可以完成列互换，貌似在UE里见过此神技。\n![python](20181031-vim笔记/3)\n## 3.命令模式\n上面的例子里已经展示了命令模式的进入模式。在普通模式下，输入:即可进入。\n\n%s/$/sth/ 在行尾追加sth\n%s/\\^M//g 替换掉dos换行符，\\^M使用ctrl+v  + Enter即可输入\n:g/\\^\\s*$/d 删除空行以及只有空格的行\n%s/#.*//g 删除#之后的字符\n\n没错，命令模式用的是正则，这些经验是通用的\n\n你已经发现了，这大概就是针对编辑器窗口的sed命令。\n\n## 4.查找字符串\n同样的，正则的知识也可以应用*\n\n在普通模式下，按下/直接进入查找，输入相应的字符串按确定即可。\n\nn 查找下一个匹配\nN 查找上一个匹配\n2n 查找下面第二个匹配\n\n如果觉得跳来跳去晕头转向，可以在命令模式下输入set nu开启行号。\n\n## 5.宏录制\n这可以说是vim的一个杀手锏了。拿上面的例子来说。\n将文件中的每一行添加到ArrayList中。\n\n![python](20181031-vim笔记/4)\n\n1) 按下gg到行首\n2) 按下qa进行宏录制，a是我们起的一个标记名称\n3) 按I进入插入模式，输入list.add(\"\n4) 按ESC进入普通模式，然后按$跳到行尾\n5) 按j进入下一行，然后按^回到行首\n6) 再次按下q结束宏录制\n7) 输入@a触发宏测试一下录制效果\n8) 输入100@a重复宏100次，也就是影响下面的100行\n\n可以录制不同的多个宏，方便的进行批量操作\n\n## 6.其他\n另外用的一些比较少的主要功能有\nr 替换字符\nggVG 全选\nu 恢复更改\nJ 合并下一行\ngU 光标处转大写\nggguG 整篇文章大写转化为小写\n% 跳转到下一个匹配,如在<div>上按%，则跳转到相应的</div>\n:e /tmp/a 在同一个编辑器内打开/tmp/a文件。同一个编辑器的缓冲区是剪贴板是共享的，可以方便在多个文件中复制\nbp 跳转到上一个缓冲区\nbn 跳转到下一个缓冲区\n\n## 7.退出编辑器\nwq 保存当前文件并退出\nwqa 保存所有文件并退出\nq! 不保存，直接退出\nqa! 有多个文件被打开，同时退出\n","source":"_posts/20181031-vim笔记.md","raw":"---\ntitle: vim笔记\ndate: 2018-10-31 14:51:53\ntags: vim\n---\n\n>  该笔记转自[小姐姐的味道](https://my.oschina.net/u/3897601/blog/2253063)\n\n## 养成习惯\n&nbsp;&nbsp;vim最大的贡献就是它的按键系统。这也是为什么chrome、idea、atom等编辑器都会提供一个vim mode。笔者见过很多资深的程序员，包括架构师，习惯使用方向键去控制光标的移动。这不能说不对，但这也抛弃了vim最大的精华所在，效率上低了一大截。坚持使用h、j、k、l，你会感谢你今天的纠正。大脑和手指真的是有记忆，当你用的足够多，这也就成了你约定俗成的设定。\n&nbsp;&nbsp;vim另外一个特点就是带模式的。一共四种模式，我们不需要记忆，只需要使用例子去理解即可。(不要使用vim打开大文件，vim会一次性读取所有内容到内存，容易造成宿主机内存溢出。打开文件前，可以使用du -h命令查看文件大小。一般，100MB以下为宜。)\n\n## 1.常用操作\n以下操作在普通模式下执行，连续按键\n#### 漫游\nj 向下\n30j 向下移动30行\nk 向上\nh 向左\nl 向右\n0 到行首\n^ 到行首第一个字符，如果前面有空格的话\n$ 到行尾\ngg 快速到文件头\nG 快速到文件尾\n100G 跳转到第100行\n\n不建议在插入模式下进行光标移动，这很低效\n\n#### 复制：y\nyy 复制一行\n10yy 向下复制10行\nyw 复制光标开始的一个单词\ny$ 复制光标到行尾\nyfB 复制光标到第一个大写B中间的内容\ny2fB 复制光标到第二个大写B中间的内容\n\n#### 剪切: x\nx 向剪切一个一个字符，如果是在行尾，则为向前剪切\n3x 剪切三个\nxp 非行尾交换两个字符，如从bs变成sb\n\n#### 删除：d\n删除的内容会放到剪贴板，按p即可粘贴到其他地方\n\ndd 删除一行\n200dd 删除200行\ndw 删除一个单词 （最喜欢啦）\ndf” 删除到出现的第一个双引号\n\n#### 粘贴: p\np 粘贴复制或剪切的内容\n3p 将复制或剪切的内容粘贴三次\n\n## 2.可视化模式\n#### v行模式，选择一些内容\n可视化模式是非常有用的一种模式，在普通模式下按v即可进入。\n使用h、j、k、l进行漫游，选中相应的内容。\n\n例子，选中一部分想要的内容，并删除。\n![python](20181031-vim笔记/1)\n\n####ctrl+v块模式\n演示：将文件中的每一行添加到ArrayList中：\n![python](20181031-vim笔记/2)\n\n\n1) 在命令模式下，执行%s/$/\");/g，在行尾追加数据\n2) 按ESC进入普通模式，并使用gg回到行首\n3) 按ctrl+v进入可视化模式，然后按G到文件尾\n4) 不要理会编辑器反应，按I进入插入模式，输入list.add(\"\n5) 按ESC回到普通模式，可以发现以上输入已经在每一行生效了\n\n块模式还可以完成列互换，貌似在UE里见过此神技。\n![python](20181031-vim笔记/3)\n## 3.命令模式\n上面的例子里已经展示了命令模式的进入模式。在普通模式下，输入:即可进入。\n\n%s/$/sth/ 在行尾追加sth\n%s/\\^M//g 替换掉dos换行符，\\^M使用ctrl+v  + Enter即可输入\n:g/\\^\\s*$/d 删除空行以及只有空格的行\n%s/#.*//g 删除#之后的字符\n\n没错，命令模式用的是正则，这些经验是通用的\n\n你已经发现了，这大概就是针对编辑器窗口的sed命令。\n\n## 4.查找字符串\n同样的，正则的知识也可以应用*\n\n在普通模式下，按下/直接进入查找，输入相应的字符串按确定即可。\n\nn 查找下一个匹配\nN 查找上一个匹配\n2n 查找下面第二个匹配\n\n如果觉得跳来跳去晕头转向，可以在命令模式下输入set nu开启行号。\n\n## 5.宏录制\n这可以说是vim的一个杀手锏了。拿上面的例子来说。\n将文件中的每一行添加到ArrayList中。\n\n![python](20181031-vim笔记/4)\n\n1) 按下gg到行首\n2) 按下qa进行宏录制，a是我们起的一个标记名称\n3) 按I进入插入模式，输入list.add(\"\n4) 按ESC进入普通模式，然后按$跳到行尾\n5) 按j进入下一行，然后按^回到行首\n6) 再次按下q结束宏录制\n7) 输入@a触发宏测试一下录制效果\n8) 输入100@a重复宏100次，也就是影响下面的100行\n\n可以录制不同的多个宏，方便的进行批量操作\n\n## 6.其他\n另外用的一些比较少的主要功能有\nr 替换字符\nggVG 全选\nu 恢复更改\nJ 合并下一行\ngU 光标处转大写\nggguG 整篇文章大写转化为小写\n% 跳转到下一个匹配,如在<div>上按%，则跳转到相应的</div>\n:e /tmp/a 在同一个编辑器内打开/tmp/a文件。同一个编辑器的缓冲区是剪贴板是共享的，可以方便在多个文件中复制\nbp 跳转到上一个缓冲区\nbn 跳转到下一个缓冲区\n\n## 7.退出编辑器\nwq 保存当前文件并退出\nwqa 保存所有文件并退出\nq! 不保存，直接退出\nqa! 有多个文件被打开，同时退出\n","slug":"20181031-vim笔记","published":1,"updated":"2018-11-01T14:06:56.912Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjttrlg9z0016ow6xrhnrz007","content":"<blockquote>\n<p> 该笔记转自<a href=\"https://my.oschina.net/u/3897601/blog/2253063\" target=\"_blank\" rel=\"noopener\">小姐姐的味道</a></p>\n</blockquote>\n<h2 id=\"养成习惯\"><a href=\"#养成习惯\" class=\"headerlink\" title=\"养成习惯\"></a>养成习惯</h2><p>&nbsp;&nbsp;vim最大的贡献就是它的按键系统。这也是为什么chrome、idea、atom等编辑器都会提供一个vim mode。笔者见过很多资深的程序员，包括架构师，习惯使用方向键去控制光标的移动。这不能说不对，但这也抛弃了vim最大的精华所在，效率上低了一大截。坚持使用h、j、k、l，你会感谢你今天的纠正。大脑和手指真的是有记忆，当你用的足够多，这也就成了你约定俗成的设定。<br>&nbsp;&nbsp;vim另外一个特点就是带模式的。一共四种模式，我们不需要记忆，只需要使用例子去理解即可。(不要使用vim打开大文件，vim会一次性读取所有内容到内存，容易造成宿主机内存溢出。打开文件前，可以使用du -h命令查看文件大小。一般，100MB以下为宜。)</p>\n<h2 id=\"1-常用操作\"><a href=\"#1-常用操作\" class=\"headerlink\" title=\"1.常用操作\"></a>1.常用操作</h2><p>以下操作在普通模式下执行，连续按键</p>\n<h4 id=\"漫游\"><a href=\"#漫游\" class=\"headerlink\" title=\"漫游\"></a>漫游</h4><p>j 向下<br>30j 向下移动30行<br>k 向上<br>h 向左<br>l 向右<br>0 到行首<br>^ 到行首第一个字符，如果前面有空格的话<br>$ 到行尾<br>gg 快速到文件头<br>G 快速到文件尾<br>100G 跳转到第100行</p>\n<p>不建议在插入模式下进行光标移动，这很低效</p>\n<h4 id=\"复制：y\"><a href=\"#复制：y\" class=\"headerlink\" title=\"复制：y\"></a>复制：y</h4><p>yy 复制一行<br>10yy 向下复制10行<br>yw 复制光标开始的一个单词<br>y$ 复制光标到行尾<br>yfB 复制光标到第一个大写B中间的内容<br>y2fB 复制光标到第二个大写B中间的内容</p>\n<h4 id=\"剪切-x\"><a href=\"#剪切-x\" class=\"headerlink\" title=\"剪切: x\"></a>剪切: x</h4><p>x 向剪切一个一个字符，如果是在行尾，则为向前剪切<br>3x 剪切三个<br>xp 非行尾交换两个字符，如从bs变成sb</p>\n<h4 id=\"删除：d\"><a href=\"#删除：d\" class=\"headerlink\" title=\"删除：d\"></a>删除：d</h4><p>删除的内容会放到剪贴板，按p即可粘贴到其他地方</p>\n<p>dd 删除一行<br>200dd 删除200行<br>dw 删除一个单词 （最喜欢啦）<br>df” 删除到出现的第一个双引号</p>\n<h4 id=\"粘贴-p\"><a href=\"#粘贴-p\" class=\"headerlink\" title=\"粘贴: p\"></a>粘贴: p</h4><p>p 粘贴复制或剪切的内容<br>3p 将复制或剪切的内容粘贴三次</p>\n<h2 id=\"2-可视化模式\"><a href=\"#2-可视化模式\" class=\"headerlink\" title=\"2.可视化模式\"></a>2.可视化模式</h2><h4 id=\"v行模式，选择一些内容\"><a href=\"#v行模式，选择一些内容\" class=\"headerlink\" title=\"v行模式，选择一些内容\"></a>v行模式，选择一些内容</h4><p>可视化模式是非常有用的一种模式，在普通模式下按v即可进入。<br>使用h、j、k、l进行漫游，选中相应的内容。</p>\n<p>例子，选中一部分想要的内容，并删除。<br><img src=\"/2018/10/31/20181031-vim笔记/1\" alt=\"python\"></p>\n<h4 id=\"ctrl-v块模式\"><a href=\"#ctrl-v块模式\" class=\"headerlink\" title=\"ctrl+v块模式\"></a>ctrl+v块模式</h4><p>演示：将文件中的每一行添加到ArrayList中：<br><img src=\"/2018/10/31/20181031-vim笔记/2\" alt=\"python\"></p>\n<p>1) 在命令模式下，执行%s/$/“);/g，在行尾追加数据<br>2) 按ESC进入普通模式，并使用gg回到行首<br>3) 按ctrl+v进入可视化模式，然后按G到文件尾<br>4) 不要理会编辑器反应，按I进入插入模式，输入list.add(“<br>5) 按ESC回到普通模式，可以发现以上输入已经在每一行生效了</p>\n<p>块模式还可以完成列互换，貌似在UE里见过此神技。<br><img src=\"/2018/10/31/20181031-vim笔记/3\" alt=\"python\"></p>\n<h2 id=\"3-命令模式\"><a href=\"#3-命令模式\" class=\"headerlink\" title=\"3.命令模式\"></a>3.命令模式</h2><p>上面的例子里已经展示了命令模式的进入模式。在普通模式下，输入:即可进入。</p>\n<p>%s/$/sth/ 在行尾追加sth<br>%s/\\^M//g 替换掉dos换行符，\\^M使用ctrl+v  + Enter即可输入<br>:g/\\^\\s<em>$/d 删除空行以及只有空格的行<br>%s/#.</em>//g 删除#之后的字符</p>\n<p>没错，命令模式用的是正则，这些经验是通用的</p>\n<p>你已经发现了，这大概就是针对编辑器窗口的sed命令。</p>\n<h2 id=\"4-查找字符串\"><a href=\"#4-查找字符串\" class=\"headerlink\" title=\"4.查找字符串\"></a>4.查找字符串</h2><p>同样的，正则的知识也可以应用*</p>\n<p>在普通模式下，按下/直接进入查找，输入相应的字符串按确定即可。</p>\n<p>n 查找下一个匹配<br>N 查找上一个匹配<br>2n 查找下面第二个匹配</p>\n<p>如果觉得跳来跳去晕头转向，可以在命令模式下输入set nu开启行号。</p>\n<h2 id=\"5-宏录制\"><a href=\"#5-宏录制\" class=\"headerlink\" title=\"5.宏录制\"></a>5.宏录制</h2><p>这可以说是vim的一个杀手锏了。拿上面的例子来说。<br>将文件中的每一行添加到ArrayList中。</p>\n<p><img src=\"/2018/10/31/20181031-vim笔记/4\" alt=\"python\"></p>\n<p>1) 按下gg到行首<br>2) 按下qa进行宏录制，a是我们起的一个标记名称<br>3) 按I进入插入模式，输入list.add(“<br>4) 按ESC进入普通模式，然后按$跳到行尾<br>5) 按j进入下一行，然后按^回到行首<br>6) 再次按下q结束宏录制<br>7) 输入@a触发宏测试一下录制效果<br>8) 输入100@a重复宏100次，也就是影响下面的100行</p>\n<p>可以录制不同的多个宏，方便的进行批量操作</p>\n<h2 id=\"6-其他\"><a href=\"#6-其他\" class=\"headerlink\" title=\"6.其他\"></a>6.其他</h2><p>另外用的一些比较少的主要功能有<br>r 替换字符<br>ggVG 全选<br>u 恢复更改<br>J 合并下一行<br>gU 光标处转大写<br>ggguG 整篇文章大写转化为小写<br>% 跳转到下一个匹配,如在<div>上按%，则跳转到相应的</div><br>:e /tmp/a 在同一个编辑器内打开/tmp/a文件。同一个编辑器的缓冲区是剪贴板是共享的，可以方便在多个文件中复制<br>bp 跳转到上一个缓冲区<br>bn 跳转到下一个缓冲区</p>\n<h2 id=\"7-退出编辑器\"><a href=\"#7-退出编辑器\" class=\"headerlink\" title=\"7.退出编辑器\"></a>7.退出编辑器</h2><p>wq 保存当前文件并退出<br>wqa 保存所有文件并退出<br>q! 不保存，直接退出<br>qa! 有多个文件被打开，同时退出</p>\n","site":{"data":{"projects":[{"name":"extract_news","url":"https://github.com/hee0624/extract_news","desc":"Python package to parse news from various news website"}]}},"excerpt":"","more":"<blockquote>\n<p> 该笔记转自<a href=\"https://my.oschina.net/u/3897601/blog/2253063\" target=\"_blank\" rel=\"noopener\">小姐姐的味道</a></p>\n</blockquote>\n<h2 id=\"养成习惯\"><a href=\"#养成习惯\" class=\"headerlink\" title=\"养成习惯\"></a>养成习惯</h2><p>&nbsp;&nbsp;vim最大的贡献就是它的按键系统。这也是为什么chrome、idea、atom等编辑器都会提供一个vim mode。笔者见过很多资深的程序员，包括架构师，习惯使用方向键去控制光标的移动。这不能说不对，但这也抛弃了vim最大的精华所在，效率上低了一大截。坚持使用h、j、k、l，你会感谢你今天的纠正。大脑和手指真的是有记忆，当你用的足够多，这也就成了你约定俗成的设定。<br>&nbsp;&nbsp;vim另外一个特点就是带模式的。一共四种模式，我们不需要记忆，只需要使用例子去理解即可。(不要使用vim打开大文件，vim会一次性读取所有内容到内存，容易造成宿主机内存溢出。打开文件前，可以使用du -h命令查看文件大小。一般，100MB以下为宜。)</p>\n<h2 id=\"1-常用操作\"><a href=\"#1-常用操作\" class=\"headerlink\" title=\"1.常用操作\"></a>1.常用操作</h2><p>以下操作在普通模式下执行，连续按键</p>\n<h4 id=\"漫游\"><a href=\"#漫游\" class=\"headerlink\" title=\"漫游\"></a>漫游</h4><p>j 向下<br>30j 向下移动30行<br>k 向上<br>h 向左<br>l 向右<br>0 到行首<br>^ 到行首第一个字符，如果前面有空格的话<br>$ 到行尾<br>gg 快速到文件头<br>G 快速到文件尾<br>100G 跳转到第100行</p>\n<p>不建议在插入模式下进行光标移动，这很低效</p>\n<h4 id=\"复制：y\"><a href=\"#复制：y\" class=\"headerlink\" title=\"复制：y\"></a>复制：y</h4><p>yy 复制一行<br>10yy 向下复制10行<br>yw 复制光标开始的一个单词<br>y$ 复制光标到行尾<br>yfB 复制光标到第一个大写B中间的内容<br>y2fB 复制光标到第二个大写B中间的内容</p>\n<h4 id=\"剪切-x\"><a href=\"#剪切-x\" class=\"headerlink\" title=\"剪切: x\"></a>剪切: x</h4><p>x 向剪切一个一个字符，如果是在行尾，则为向前剪切<br>3x 剪切三个<br>xp 非行尾交换两个字符，如从bs变成sb</p>\n<h4 id=\"删除：d\"><a href=\"#删除：d\" class=\"headerlink\" title=\"删除：d\"></a>删除：d</h4><p>删除的内容会放到剪贴板，按p即可粘贴到其他地方</p>\n<p>dd 删除一行<br>200dd 删除200行<br>dw 删除一个单词 （最喜欢啦）<br>df” 删除到出现的第一个双引号</p>\n<h4 id=\"粘贴-p\"><a href=\"#粘贴-p\" class=\"headerlink\" title=\"粘贴: p\"></a>粘贴: p</h4><p>p 粘贴复制或剪切的内容<br>3p 将复制或剪切的内容粘贴三次</p>\n<h2 id=\"2-可视化模式\"><a href=\"#2-可视化模式\" class=\"headerlink\" title=\"2.可视化模式\"></a>2.可视化模式</h2><h4 id=\"v行模式，选择一些内容\"><a href=\"#v行模式，选择一些内容\" class=\"headerlink\" title=\"v行模式，选择一些内容\"></a>v行模式，选择一些内容</h4><p>可视化模式是非常有用的一种模式，在普通模式下按v即可进入。<br>使用h、j、k、l进行漫游，选中相应的内容。</p>\n<p>例子，选中一部分想要的内容，并删除。<br><img src=\"/2018/10/31/20181031-vim笔记/1\" alt=\"python\"></p>\n<h4 id=\"ctrl-v块模式\"><a href=\"#ctrl-v块模式\" class=\"headerlink\" title=\"ctrl+v块模式\"></a>ctrl+v块模式</h4><p>演示：将文件中的每一行添加到ArrayList中：<br><img src=\"/2018/10/31/20181031-vim笔记/2\" alt=\"python\"></p>\n<p>1) 在命令模式下，执行%s/$/“);/g，在行尾追加数据<br>2) 按ESC进入普通模式，并使用gg回到行首<br>3) 按ctrl+v进入可视化模式，然后按G到文件尾<br>4) 不要理会编辑器反应，按I进入插入模式，输入list.add(“<br>5) 按ESC回到普通模式，可以发现以上输入已经在每一行生效了</p>\n<p>块模式还可以完成列互换，貌似在UE里见过此神技。<br><img src=\"/2018/10/31/20181031-vim笔记/3\" alt=\"python\"></p>\n<h2 id=\"3-命令模式\"><a href=\"#3-命令模式\" class=\"headerlink\" title=\"3.命令模式\"></a>3.命令模式</h2><p>上面的例子里已经展示了命令模式的进入模式。在普通模式下，输入:即可进入。</p>\n<p>%s/$/sth/ 在行尾追加sth<br>%s/\\^M//g 替换掉dos换行符，\\^M使用ctrl+v  + Enter即可输入<br>:g/\\^\\s<em>$/d 删除空行以及只有空格的行<br>%s/#.</em>//g 删除#之后的字符</p>\n<p>没错，命令模式用的是正则，这些经验是通用的</p>\n<p>你已经发现了，这大概就是针对编辑器窗口的sed命令。</p>\n<h2 id=\"4-查找字符串\"><a href=\"#4-查找字符串\" class=\"headerlink\" title=\"4.查找字符串\"></a>4.查找字符串</h2><p>同样的，正则的知识也可以应用*</p>\n<p>在普通模式下，按下/直接进入查找，输入相应的字符串按确定即可。</p>\n<p>n 查找下一个匹配<br>N 查找上一个匹配<br>2n 查找下面第二个匹配</p>\n<p>如果觉得跳来跳去晕头转向，可以在命令模式下输入set nu开启行号。</p>\n<h2 id=\"5-宏录制\"><a href=\"#5-宏录制\" class=\"headerlink\" title=\"5.宏录制\"></a>5.宏录制</h2><p>这可以说是vim的一个杀手锏了。拿上面的例子来说。<br>将文件中的每一行添加到ArrayList中。</p>\n<p><img src=\"/2018/10/31/20181031-vim笔记/4\" alt=\"python\"></p>\n<p>1) 按下gg到行首<br>2) 按下qa进行宏录制，a是我们起的一个标记名称<br>3) 按I进入插入模式，输入list.add(“<br>4) 按ESC进入普通模式，然后按$跳到行尾<br>5) 按j进入下一行，然后按^回到行首<br>6) 再次按下q结束宏录制<br>7) 输入@a触发宏测试一下录制效果<br>8) 输入100@a重复宏100次，也就是影响下面的100行</p>\n<p>可以录制不同的多个宏，方便的进行批量操作</p>\n<h2 id=\"6-其他\"><a href=\"#6-其他\" class=\"headerlink\" title=\"6.其他\"></a>6.其他</h2><p>另外用的一些比较少的主要功能有<br>r 替换字符<br>ggVG 全选<br>u 恢复更改<br>J 合并下一行<br>gU 光标处转大写<br>ggguG 整篇文章大写转化为小写<br>% 跳转到下一个匹配,如在<div>上按%，则跳转到相应的</div><br>:e /tmp/a 在同一个编辑器内打开/tmp/a文件。同一个编辑器的缓冲区是剪贴板是共享的，可以方便在多个文件中复制<br>bp 跳转到上一个缓冲区<br>bn 跳转到下一个缓冲区</p>\n<h2 id=\"7-退出编辑器\"><a href=\"#7-退出编辑器\" class=\"headerlink\" title=\"7.退出编辑器\"></a>7.退出编辑器</h2><p>wq 保存当前文件并退出<br>wqa 保存所有文件并退出<br>q! 不保存，直接退出<br>qa! 有多个文件被打开，同时退出</p>\n"},{"title":"git学习笔记","date":"2018-11-01T14:02:39.000Z","_content":"\n## 创建版本库\n\n1. 初始化一个Git仓库，使用git init命令\n2. 添加文件到Git仓库，分两步：\n   - git add &lt;file&gt;\n   - git commit -m &lt;message&gt;\n\n## 时光机穿梭\n\n#### 版本回退\n- git reset - - hard HEAD^ 回退到上一个版本\n- git reset - - hard 1094a 回退到最新版本(窗口未关看到commit id)\n- git reflog  记录每一次命令\n\n\n#### 工作区和暂存区\n![图例](20181101-git学习笔记/0.jpeg)\n\n#### 管理修改\n\n每次修改先git add到暂存区，那就不会commit\n\n#### 撤销修改\n\ngit checkout - - &lt;file&gt; 文件在工作区的修改全部撤销\ngit reset HEAD &lt;file&gt;\n\n#### 删除文件\n\n- 确实要从版本库中删除文件，那就用命令**git rm **删掉，并且**git commit**\n- 误删，版本库里还有，可以恢复到最新版本**git checkout -- &lt;file&gt;**\n\n## 分支管理\n\n#### 创建与合并分支\n\n- 查看分支：git branch\n- 创建分支：git branch &lt;name&gt;\n- 切换分支：git checkout &lt;name&gt;\n- 创建+切换分支：git checkout -b &lt;name&gt;\n- 合并某分支到当前分支：git merge &lt;name&gt;\n- 删除分支：git branch -d &lt;name&gt;\n\n#### 分支冲突\n\n1. 查看冲突内容\n2. 修改之后 \n  - git add &lt;file&gt;\n  - git commit -m 'conflict fixed'\n3. 删除分支　git branch -d &lt;name&gt;\n\n#### 分支管理策略\n\n合并分支时，git会用**Fast forward**模式,但这种模式下，删除分支后，会丢掉分支信息。强制禁用**Fast forward**模式,Git就会在merge时生成一个新的commit.\n- git - -no-ff -m \"merge with no-ff\" dev\n\n**注意**:master分支非常稳定，仅用来发布新版本;dev分支是干活分支.\n\n#### bug分支\n&nbsp;&nbsp;当接到代号101的bug任务时，创建**issue-101**,但当前的**dev**分支上进行的分支工作还没有提交。工作进行到一半没法提交，但bug必须在２小时内修复。\n&nbsp;&nbsp;Git提供了**stash**功能，可以把当前的工作现场存储起来，等以后恢复现场后继续工作:\n\n```\n    $ git stash\n    Saved working directory and index state WIP on dev: f52c633 add merge\n```\n\n1. git stash\n2. git checkout master\n3. git checkout -b issue-101\n4. 修复bug\n5. git add &lt;file&gt;\n6. git commit -m 'fix bug 101'\n7. git checkout master\n8. git merge --no-ff -m 'merge bug fix 101' issue-101\n9. git checkout dev\n10. git stash\n11. git stash list\n12. git stash apply &lt;stash@{0}&gt;\n13. git stash drop \n14. git stash pop\n\n#### feature分支\n\n&nbsp;&nbsp;添加一个新的功能，最好新建一个**feature**分支，在上面开发，完成后，合并，最后删除该feature分支.\n1. git checkout -b feature-vulcan\n2. git add vulcan.py\n3. git commit -m 'add feature vulcan'\n4. git checkout dev\n5. 新功能取消,彻底销毁。git branch -D feature-vulcan\n\n#### 多人协作\n\n- 查看远程 git remote -v\n- 推送分支 git push origin master/dev (master,dev分支需要与远程同步，bug分支只需要本地修复,feature取决于是否推送到远程)\n-  抓取分支 git pull origin master/dev\n\n1. 首先，可以试图用git push origin &lgt;branch-name&gt;推送自己的修改；\n2. 如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；\n3. 如果合并有冲突，则解决冲突，并在本地提交；\n4. 没有冲突或者解决掉冲突后，再用git push origin &lt;branch-name&gt;推送就能成功！\n\n#### rebase\n- git rebase 把分叉的提交历史整理成一条直线\n\n## 标签管理\n&nbsp;&nbsp;发布一个版本时，同化成那个先在版本库中打一个标签，这样就唯一确定了打标签时刻的版本。无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是一个快照。\n\n#### 创建标签\n\n- git checkout master\n- git tag v1.0\n- git tag v0.9 f52c633\n- git tag -a v0.1 -m 'version 0.1 relase' 1094abd\n- git tag 查看所有标签\n\n#### 操作标签\n\n- git tag -d v0.1 删除标签\n- git push origin v1.0 推送标签\n- git push origin - - tags 推送所有标签\n- 删除远程标签　git tag -d v0.9 /git push origin :refs/tags/v0.9\n\n\n\n\n","source":"_posts/20181101-git学习笔记.md","raw":"---\ntitle: git学习笔记\ndate: 2018-11-01 22:02:39\ntags: git\n---\n\n## 创建版本库\n\n1. 初始化一个Git仓库，使用git init命令\n2. 添加文件到Git仓库，分两步：\n   - git add &lt;file&gt;\n   - git commit -m &lt;message&gt;\n\n## 时光机穿梭\n\n#### 版本回退\n- git reset - - hard HEAD^ 回退到上一个版本\n- git reset - - hard 1094a 回退到最新版本(窗口未关看到commit id)\n- git reflog  记录每一次命令\n\n\n#### 工作区和暂存区\n![图例](20181101-git学习笔记/0.jpeg)\n\n#### 管理修改\n\n每次修改先git add到暂存区，那就不会commit\n\n#### 撤销修改\n\ngit checkout - - &lt;file&gt; 文件在工作区的修改全部撤销\ngit reset HEAD &lt;file&gt;\n\n#### 删除文件\n\n- 确实要从版本库中删除文件，那就用命令**git rm **删掉，并且**git commit**\n- 误删，版本库里还有，可以恢复到最新版本**git checkout -- &lt;file&gt;**\n\n## 分支管理\n\n#### 创建与合并分支\n\n- 查看分支：git branch\n- 创建分支：git branch &lt;name&gt;\n- 切换分支：git checkout &lt;name&gt;\n- 创建+切换分支：git checkout -b &lt;name&gt;\n- 合并某分支到当前分支：git merge &lt;name&gt;\n- 删除分支：git branch -d &lt;name&gt;\n\n#### 分支冲突\n\n1. 查看冲突内容\n2. 修改之后 \n  - git add &lt;file&gt;\n  - git commit -m 'conflict fixed'\n3. 删除分支　git branch -d &lt;name&gt;\n\n#### 分支管理策略\n\n合并分支时，git会用**Fast forward**模式,但这种模式下，删除分支后，会丢掉分支信息。强制禁用**Fast forward**模式,Git就会在merge时生成一个新的commit.\n- git - -no-ff -m \"merge with no-ff\" dev\n\n**注意**:master分支非常稳定，仅用来发布新版本;dev分支是干活分支.\n\n#### bug分支\n&nbsp;&nbsp;当接到代号101的bug任务时，创建**issue-101**,但当前的**dev**分支上进行的分支工作还没有提交。工作进行到一半没法提交，但bug必须在２小时内修复。\n&nbsp;&nbsp;Git提供了**stash**功能，可以把当前的工作现场存储起来，等以后恢复现场后继续工作:\n\n```\n    $ git stash\n    Saved working directory and index state WIP on dev: f52c633 add merge\n```\n\n1. git stash\n2. git checkout master\n3. git checkout -b issue-101\n4. 修复bug\n5. git add &lt;file&gt;\n6. git commit -m 'fix bug 101'\n7. git checkout master\n8. git merge --no-ff -m 'merge bug fix 101' issue-101\n9. git checkout dev\n10. git stash\n11. git stash list\n12. git stash apply &lt;stash@{0}&gt;\n13. git stash drop \n14. git stash pop\n\n#### feature分支\n\n&nbsp;&nbsp;添加一个新的功能，最好新建一个**feature**分支，在上面开发，完成后，合并，最后删除该feature分支.\n1. git checkout -b feature-vulcan\n2. git add vulcan.py\n3. git commit -m 'add feature vulcan'\n4. git checkout dev\n5. 新功能取消,彻底销毁。git branch -D feature-vulcan\n\n#### 多人协作\n\n- 查看远程 git remote -v\n- 推送分支 git push origin master/dev (master,dev分支需要与远程同步，bug分支只需要本地修复,feature取决于是否推送到远程)\n-  抓取分支 git pull origin master/dev\n\n1. 首先，可以试图用git push origin &lgt;branch-name&gt;推送自己的修改；\n2. 如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；\n3. 如果合并有冲突，则解决冲突，并在本地提交；\n4. 没有冲突或者解决掉冲突后，再用git push origin &lt;branch-name&gt;推送就能成功！\n\n#### rebase\n- git rebase 把分叉的提交历史整理成一条直线\n\n## 标签管理\n&nbsp;&nbsp;发布一个版本时，同化成那个先在版本库中打一个标签，这样就唯一确定了打标签时刻的版本。无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是一个快照。\n\n#### 创建标签\n\n- git checkout master\n- git tag v1.0\n- git tag v0.9 f52c633\n- git tag -a v0.1 -m 'version 0.1 relase' 1094abd\n- git tag 查看所有标签\n\n#### 操作标签\n\n- git tag -d v0.1 删除标签\n- git push origin v1.0 推送标签\n- git push origin - - tags 推送所有标签\n- 删除远程标签　git tag -d v0.9 /git push origin :refs/tags/v0.9\n\n\n\n\n","slug":"20181101-git学习笔记","published":1,"updated":"2018-11-05T01:30:18.606Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjttrlga00019ow6xkpmgeif5","content":"<h2 id=\"创建版本库\"><a href=\"#创建版本库\" class=\"headerlink\" title=\"创建版本库\"></a>创建版本库</h2><ol>\n<li>初始化一个Git仓库，使用git init命令</li>\n<li>添加文件到Git仓库，分两步：<ul>\n<li>git add &lt;file&gt;</li>\n<li>git commit -m &lt;message&gt;</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"时光机穿梭\"><a href=\"#时光机穿梭\" class=\"headerlink\" title=\"时光机穿梭\"></a>时光机穿梭</h2><h4 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h4><ul>\n<li>git reset - - hard HEAD^ 回退到上一个版本</li>\n<li>git reset - - hard 1094a 回退到最新版本(窗口未关看到commit id)</li>\n<li>git reflog  记录每一次命令</li>\n</ul>\n<h4 id=\"工作区和暂存区\"><a href=\"#工作区和暂存区\" class=\"headerlink\" title=\"工作区和暂存区\"></a>工作区和暂存区</h4><p><img src=\"/2018/11/01/20181101-git学习笔记/0.jpeg\" alt=\"图例\"></p>\n<h4 id=\"管理修改\"><a href=\"#管理修改\" class=\"headerlink\" title=\"管理修改\"></a>管理修改</h4><p>每次修改先git add到暂存区，那就不会commit</p>\n<h4 id=\"撤销修改\"><a href=\"#撤销修改\" class=\"headerlink\" title=\"撤销修改\"></a>撤销修改</h4><p>git checkout - - &lt;file&gt; 文件在工作区的修改全部撤销<br>git reset HEAD &lt;file&gt;</p>\n<h4 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h4><ul>\n<li>确实要从版本库中删除文件，那就用命令<strong>git rm </strong>删掉，并且<strong>git commit</strong></li>\n<li>误删，版本库里还有，可以恢复到最新版本<strong>git checkout — &lt;file&gt;</strong></li>\n</ul>\n<h2 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h2><h4 id=\"创建与合并分支\"><a href=\"#创建与合并分支\" class=\"headerlink\" title=\"创建与合并分支\"></a>创建与合并分支</h4><ul>\n<li>查看分支：git branch</li>\n<li>创建分支：git branch &lt;name&gt;</li>\n<li>切换分支：git checkout &lt;name&gt;</li>\n<li>创建+切换分支：git checkout -b &lt;name&gt;</li>\n<li>合并某分支到当前分支：git merge &lt;name&gt;</li>\n<li>删除分支：git branch -d &lt;name&gt;</li>\n</ul>\n<h4 id=\"分支冲突\"><a href=\"#分支冲突\" class=\"headerlink\" title=\"分支冲突\"></a>分支冲突</h4><ol>\n<li>查看冲突内容</li>\n<li>修改之后 <ul>\n<li>git add &lt;file&gt;</li>\n<li>git commit -m ‘conflict fixed’</li>\n</ul>\n</li>\n<li>删除分支　git branch -d &lt;name&gt;</li>\n</ol>\n<h4 id=\"分支管理策略\"><a href=\"#分支管理策略\" class=\"headerlink\" title=\"分支管理策略\"></a>分支管理策略</h4><p>合并分支时，git会用<strong>Fast forward</strong>模式,但这种模式下，删除分支后，会丢掉分支信息。强制禁用<strong>Fast forward</strong>模式,Git就会在merge时生成一个新的commit.</p>\n<ul>\n<li>git - -no-ff -m “merge with no-ff” dev</li>\n</ul>\n<p><strong>注意</strong>:master分支非常稳定，仅用来发布新版本;dev分支是干活分支.</p>\n<h4 id=\"bug分支\"><a href=\"#bug分支\" class=\"headerlink\" title=\"bug分支\"></a>bug分支</h4><p>&nbsp;&nbsp;当接到代号101的bug任务时，创建<strong>issue-101</strong>,但当前的<strong>dev</strong>分支上进行的分支工作还没有提交。工作进行到一半没法提交，但bug必须在２小时内修复。<br>&nbsp;&nbsp;Git提供了<strong>stash</strong>功能，可以把当前的工作现场存储起来，等以后恢复现场后继续工作:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash</span><br><span class=\"line\">Saved working directory and index state WIP on dev: f52c633 add merge</span><br></pre></td></tr></table></figure>\n<ol>\n<li>git stash</li>\n<li>git checkout master</li>\n<li>git checkout -b issue-101</li>\n<li>修复bug</li>\n<li>git add &lt;file&gt;</li>\n<li>git commit -m ‘fix bug 101’</li>\n<li>git checkout master</li>\n<li>git merge —no-ff -m ‘merge bug fix 101’ issue-101</li>\n<li>git checkout dev</li>\n<li>git stash</li>\n<li>git stash list</li>\n<li>git stash apply &lt;stash@{0}&gt;</li>\n<li>git stash drop </li>\n<li>git stash pop</li>\n</ol>\n<h4 id=\"feature分支\"><a href=\"#feature分支\" class=\"headerlink\" title=\"feature分支\"></a>feature分支</h4><p>&nbsp;&nbsp;添加一个新的功能，最好新建一个<strong>feature</strong>分支，在上面开发，完成后，合并，最后删除该feature分支.</p>\n<ol>\n<li>git checkout -b feature-vulcan</li>\n<li>git add vulcan.py</li>\n<li>git commit -m ‘add feature vulcan’</li>\n<li>git checkout dev</li>\n<li>新功能取消,彻底销毁。git branch -D feature-vulcan</li>\n</ol>\n<h4 id=\"多人协作\"><a href=\"#多人协作\" class=\"headerlink\" title=\"多人协作\"></a>多人协作</h4><ul>\n<li>查看远程 git remote -v</li>\n<li>推送分支 git push origin master/dev (master,dev分支需要与远程同步，bug分支只需要本地修复,feature取决于是否推送到远程)</li>\n<li>抓取分支 git pull origin master/dev</li>\n</ul>\n<ol>\n<li>首先，可以试图用git push origin &lgt;branch-name&gt;推送自己的修改；</li>\n<li>如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；</li>\n<li>如果合并有冲突，则解决冲突，并在本地提交；</li>\n<li>没有冲突或者解决掉冲突后，再用git push origin &lt;branch-name&gt;推送就能成功！</li>\n</ol>\n<h4 id=\"rebase\"><a href=\"#rebase\" class=\"headerlink\" title=\"rebase\"></a>rebase</h4><ul>\n<li>git rebase 把分叉的提交历史整理成一条直线</li>\n</ul>\n<h2 id=\"标签管理\"><a href=\"#标签管理\" class=\"headerlink\" title=\"标签管理\"></a>标签管理</h2><p>&nbsp;&nbsp;发布一个版本时，同化成那个先在版本库中打一个标签，这样就唯一确定了打标签时刻的版本。无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是一个快照。</p>\n<h4 id=\"创建标签\"><a href=\"#创建标签\" class=\"headerlink\" title=\"创建标签\"></a>创建标签</h4><ul>\n<li>git checkout master</li>\n<li>git tag v1.0</li>\n<li>git tag v0.9 f52c633</li>\n<li>git tag -a v0.1 -m ‘version 0.1 relase’ 1094abd</li>\n<li>git tag 查看所有标签</li>\n</ul>\n<h4 id=\"操作标签\"><a href=\"#操作标签\" class=\"headerlink\" title=\"操作标签\"></a>操作标签</h4><ul>\n<li>git tag -d v0.1 删除标签</li>\n<li>git push origin v1.0 推送标签</li>\n<li>git push origin - - tags 推送所有标签</li>\n<li>删除远程标签　git tag -d v0.9 /git push origin :refs/tags/v0.9</li>\n</ul>\n","site":{"data":{"projects":[{"name":"extract_news","url":"https://github.com/hee0624/extract_news","desc":"Python package to parse news from various news website"}]}},"excerpt":"","more":"<h2 id=\"创建版本库\"><a href=\"#创建版本库\" class=\"headerlink\" title=\"创建版本库\"></a>创建版本库</h2><ol>\n<li>初始化一个Git仓库，使用git init命令</li>\n<li>添加文件到Git仓库，分两步：<ul>\n<li>git add &lt;file&gt;</li>\n<li>git commit -m &lt;message&gt;</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"时光机穿梭\"><a href=\"#时光机穿梭\" class=\"headerlink\" title=\"时光机穿梭\"></a>时光机穿梭</h2><h4 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h4><ul>\n<li>git reset - - hard HEAD^ 回退到上一个版本</li>\n<li>git reset - - hard 1094a 回退到最新版本(窗口未关看到commit id)</li>\n<li>git reflog  记录每一次命令</li>\n</ul>\n<h4 id=\"工作区和暂存区\"><a href=\"#工作区和暂存区\" class=\"headerlink\" title=\"工作区和暂存区\"></a>工作区和暂存区</h4><p><img src=\"/2018/11/01/20181101-git学习笔记/0.jpeg\" alt=\"图例\"></p>\n<h4 id=\"管理修改\"><a href=\"#管理修改\" class=\"headerlink\" title=\"管理修改\"></a>管理修改</h4><p>每次修改先git add到暂存区，那就不会commit</p>\n<h4 id=\"撤销修改\"><a href=\"#撤销修改\" class=\"headerlink\" title=\"撤销修改\"></a>撤销修改</h4><p>git checkout - - &lt;file&gt; 文件在工作区的修改全部撤销<br>git reset HEAD &lt;file&gt;</p>\n<h4 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h4><ul>\n<li>确实要从版本库中删除文件，那就用命令<strong>git rm </strong>删掉，并且<strong>git commit</strong></li>\n<li>误删，版本库里还有，可以恢复到最新版本<strong>git checkout — &lt;file&gt;</strong></li>\n</ul>\n<h2 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h2><h4 id=\"创建与合并分支\"><a href=\"#创建与合并分支\" class=\"headerlink\" title=\"创建与合并分支\"></a>创建与合并分支</h4><ul>\n<li>查看分支：git branch</li>\n<li>创建分支：git branch &lt;name&gt;</li>\n<li>切换分支：git checkout &lt;name&gt;</li>\n<li>创建+切换分支：git checkout -b &lt;name&gt;</li>\n<li>合并某分支到当前分支：git merge &lt;name&gt;</li>\n<li>删除分支：git branch -d &lt;name&gt;</li>\n</ul>\n<h4 id=\"分支冲突\"><a href=\"#分支冲突\" class=\"headerlink\" title=\"分支冲突\"></a>分支冲突</h4><ol>\n<li>查看冲突内容</li>\n<li>修改之后 <ul>\n<li>git add &lt;file&gt;</li>\n<li>git commit -m ‘conflict fixed’</li>\n</ul>\n</li>\n<li>删除分支　git branch -d &lt;name&gt;</li>\n</ol>\n<h4 id=\"分支管理策略\"><a href=\"#分支管理策略\" class=\"headerlink\" title=\"分支管理策略\"></a>分支管理策略</h4><p>合并分支时，git会用<strong>Fast forward</strong>模式,但这种模式下，删除分支后，会丢掉分支信息。强制禁用<strong>Fast forward</strong>模式,Git就会在merge时生成一个新的commit.</p>\n<ul>\n<li>git - -no-ff -m “merge with no-ff” dev</li>\n</ul>\n<p><strong>注意</strong>:master分支非常稳定，仅用来发布新版本;dev分支是干活分支.</p>\n<h4 id=\"bug分支\"><a href=\"#bug分支\" class=\"headerlink\" title=\"bug分支\"></a>bug分支</h4><p>&nbsp;&nbsp;当接到代号101的bug任务时，创建<strong>issue-101</strong>,但当前的<strong>dev</strong>分支上进行的分支工作还没有提交。工作进行到一半没法提交，但bug必须在２小时内修复。<br>&nbsp;&nbsp;Git提供了<strong>stash</strong>功能，可以把当前的工作现场存储起来，等以后恢复现场后继续工作:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git stash</span><br><span class=\"line\">Saved working directory and index state WIP on dev: f52c633 add merge</span><br></pre></td></tr></table></figure>\n<ol>\n<li>git stash</li>\n<li>git checkout master</li>\n<li>git checkout -b issue-101</li>\n<li>修复bug</li>\n<li>git add &lt;file&gt;</li>\n<li>git commit -m ‘fix bug 101’</li>\n<li>git checkout master</li>\n<li>git merge —no-ff -m ‘merge bug fix 101’ issue-101</li>\n<li>git checkout dev</li>\n<li>git stash</li>\n<li>git stash list</li>\n<li>git stash apply &lt;stash@{0}&gt;</li>\n<li>git stash drop </li>\n<li>git stash pop</li>\n</ol>\n<h4 id=\"feature分支\"><a href=\"#feature分支\" class=\"headerlink\" title=\"feature分支\"></a>feature分支</h4><p>&nbsp;&nbsp;添加一个新的功能，最好新建一个<strong>feature</strong>分支，在上面开发，完成后，合并，最后删除该feature分支.</p>\n<ol>\n<li>git checkout -b feature-vulcan</li>\n<li>git add vulcan.py</li>\n<li>git commit -m ‘add feature vulcan’</li>\n<li>git checkout dev</li>\n<li>新功能取消,彻底销毁。git branch -D feature-vulcan</li>\n</ol>\n<h4 id=\"多人协作\"><a href=\"#多人协作\" class=\"headerlink\" title=\"多人协作\"></a>多人协作</h4><ul>\n<li>查看远程 git remote -v</li>\n<li>推送分支 git push origin master/dev (master,dev分支需要与远程同步，bug分支只需要本地修复,feature取决于是否推送到远程)</li>\n<li>抓取分支 git pull origin master/dev</li>\n</ul>\n<ol>\n<li>首先，可以试图用git push origin &lgt;branch-name&gt;推送自己的修改；</li>\n<li>如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；</li>\n<li>如果合并有冲突，则解决冲突，并在本地提交；</li>\n<li>没有冲突或者解决掉冲突后，再用git push origin &lt;branch-name&gt;推送就能成功！</li>\n</ol>\n<h4 id=\"rebase\"><a href=\"#rebase\" class=\"headerlink\" title=\"rebase\"></a>rebase</h4><ul>\n<li>git rebase 把分叉的提交历史整理成一条直线</li>\n</ul>\n<h2 id=\"标签管理\"><a href=\"#标签管理\" class=\"headerlink\" title=\"标签管理\"></a>标签管理</h2><p>&nbsp;&nbsp;发布一个版本时，同化成那个先在版本库中打一个标签，这样就唯一确定了打标签时刻的版本。无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是一个快照。</p>\n<h4 id=\"创建标签\"><a href=\"#创建标签\" class=\"headerlink\" title=\"创建标签\"></a>创建标签</h4><ul>\n<li>git checkout master</li>\n<li>git tag v1.0</li>\n<li>git tag v0.9 f52c633</li>\n<li>git tag -a v0.1 -m ‘version 0.1 relase’ 1094abd</li>\n<li>git tag 查看所有标签</li>\n</ul>\n<h4 id=\"操作标签\"><a href=\"#操作标签\" class=\"headerlink\" title=\"操作标签\"></a>操作标签</h4><ul>\n<li>git tag -d v0.1 删除标签</li>\n<li>git push origin v1.0 推送标签</li>\n<li>git push origin - - tags 推送所有标签</li>\n<li>删除远程标签　git tag -d v0.9 /git push origin :refs/tags/v0.9</li>\n</ul>\n"},{"title":"git提交规范","date":"2018-11-02T03:04:10.000Z","_content":"> 一直是 ESLint 的忠实用户，深知规范的重要性。然而，在新项目交接中，我被 Git Commit 规范逼疯了。才意识到自己的疏忽，于是便有了一探究竟的想法。**分享自开发头条**\n\n## 一、为什么需要规范？\n\n&nbsp;&nbsp;无规矩不成方圆，编程也一样。\n&nbsp;&nbsp;如果你有一个项目，从始至终都是自己写，那么你想怎么写都可以，没有人可以干预你。可是如果在团队协作中，大家都张扬个性，那么代码将会是一团糟，好好的项目就被糟践了。不管是开发还是日后维护，都将是灾难。\n&nbsp;&nbsp;这时候，有人提出了何不统一标准，大家都按照这个标准来。于是ESLint，JSHint等代码工具如雨后春笋般涌现，成为了项目构建的必备良品。\n&nbsp;&nbsp; Git Commit规范可能并没有那么夸张，但如果你在版本回退的时候看到一大段糟心的Commit，恐怕会懊恼不已吧。所以，严格遵守规范，利人利己。\n\n## 二、具体规则\n先来看看公式;&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;\n1. type:用于说明commit的类别，只允许使用下面7个标识。\n    - feat:新功能（feature） \n    - fix：修补bug \n    - docs：文档（documentation） \n    - style： 格式（不影响代码运行的变动） \n    - refactor：重构（即不是新增功能，也不是修改bug的代码变动） \n    - test：增加测试 \n    - chore：构建过程或辅助工具的变动\n2. scope:用于说明commit影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。\n3. subject:是commit目的的简短描述，不超过50个字符。\n    - 以动词开头，使用第一人称现在时，比如change，而不是changed或changes \n    - 第一个字母小写 \n    - 结尾不加句号（.）\n\n## 三、异常处理\n\n&nbsp;&nbsp;我们先来看看这个异常提醒：INVALID COMMIT MSG: does not match \"<type>(<scope>): <subject>\" ! jartto:fix bug 这里之所以报出这个警告，是因为我的提交出现了两个问题：其一，使用了规范外的关键字；其二，很细节的问题，jartto：后少了空格；\n这时候我才回忆起来，当时提交一直失败，情急之下直接强制提交，所以以后的提交都会抱出这个异常。大致意思就是：你的之前的 Commit 不合格～你的之前的 Commit 不合格～你的之前的 Commit 不合格\n这时候就很烦了，我们只能去将之前的错误修正，那么如何操作呢？\n\n## 四、如何修改之前的 commit 信息？\n其实并不复杂，我们只需要这样做:\n1. 将当前分支无关的工作状态进行暂存 git stash\n2. 将HEAD移动到需要修改的commit上 git rebase 9633cf0919^ --interactive\n3. 找到需要修改的commit,将首行的pick改成edit\n4. 开始着手解决你的bug\n5. git add将改动文件添加到暂存\n6. git commit –amend追加改动到提交\n7. git rebase –continue移动HEAD回最新的commit\n8. 恢复之前的工作状态 git stash pop\n大功告成，是不是想把整个 Commit 都修改一遍，逃～\n\n## 五、Commit 规范的作用\n\n1. 提供更多的信息，方便排查与回退；\n2. 过滤关键字，迅速定位；\n3. 方便生成文档；\n\n## 七、总结\n&nbsp;&nbsp;看完文章，你还会如此放荡不羁吗？你还会随心所欲的编写Commit吗？你还会如此git commit -m \"hello jartto\"提交吗？答案是否定的，因为使用了钩子函数，你没有机会了，否则将是无穷无尽的恢复Commit。这倒可以养成良好的提交习惯，🙈～\n","source":"_posts/20181102-git提交规范.md","raw":"---\ntitle: git提交规范\ndate: 2018-11-02 11:04:10\ntags: git\n---\n> 一直是 ESLint 的忠实用户，深知规范的重要性。然而，在新项目交接中，我被 Git Commit 规范逼疯了。才意识到自己的疏忽，于是便有了一探究竟的想法。**分享自开发头条**\n\n## 一、为什么需要规范？\n\n&nbsp;&nbsp;无规矩不成方圆，编程也一样。\n&nbsp;&nbsp;如果你有一个项目，从始至终都是自己写，那么你想怎么写都可以，没有人可以干预你。可是如果在团队协作中，大家都张扬个性，那么代码将会是一团糟，好好的项目就被糟践了。不管是开发还是日后维护，都将是灾难。\n&nbsp;&nbsp;这时候，有人提出了何不统一标准，大家都按照这个标准来。于是ESLint，JSHint等代码工具如雨后春笋般涌现，成为了项目构建的必备良品。\n&nbsp;&nbsp; Git Commit规范可能并没有那么夸张，但如果你在版本回退的时候看到一大段糟心的Commit，恐怕会懊恼不已吧。所以，严格遵守规范，利人利己。\n\n## 二、具体规则\n先来看看公式;&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;\n1. type:用于说明commit的类别，只允许使用下面7个标识。\n    - feat:新功能（feature） \n    - fix：修补bug \n    - docs：文档（documentation） \n    - style： 格式（不影响代码运行的变动） \n    - refactor：重构（即不是新增功能，也不是修改bug的代码变动） \n    - test：增加测试 \n    - chore：构建过程或辅助工具的变动\n2. scope:用于说明commit影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。\n3. subject:是commit目的的简短描述，不超过50个字符。\n    - 以动词开头，使用第一人称现在时，比如change，而不是changed或changes \n    - 第一个字母小写 \n    - 结尾不加句号（.）\n\n## 三、异常处理\n\n&nbsp;&nbsp;我们先来看看这个异常提醒：INVALID COMMIT MSG: does not match \"<type>(<scope>): <subject>\" ! jartto:fix bug 这里之所以报出这个警告，是因为我的提交出现了两个问题：其一，使用了规范外的关键字；其二，很细节的问题，jartto：后少了空格；\n这时候我才回忆起来，当时提交一直失败，情急之下直接强制提交，所以以后的提交都会抱出这个异常。大致意思就是：你的之前的 Commit 不合格～你的之前的 Commit 不合格～你的之前的 Commit 不合格\n这时候就很烦了，我们只能去将之前的错误修正，那么如何操作呢？\n\n## 四、如何修改之前的 commit 信息？\n其实并不复杂，我们只需要这样做:\n1. 将当前分支无关的工作状态进行暂存 git stash\n2. 将HEAD移动到需要修改的commit上 git rebase 9633cf0919^ --interactive\n3. 找到需要修改的commit,将首行的pick改成edit\n4. 开始着手解决你的bug\n5. git add将改动文件添加到暂存\n6. git commit –amend追加改动到提交\n7. git rebase –continue移动HEAD回最新的commit\n8. 恢复之前的工作状态 git stash pop\n大功告成，是不是想把整个 Commit 都修改一遍，逃～\n\n## 五、Commit 规范的作用\n\n1. 提供更多的信息，方便排查与回退；\n2. 过滤关键字，迅速定位；\n3. 方便生成文档；\n\n## 七、总结\n&nbsp;&nbsp;看完文章，你还会如此放荡不羁吗？你还会随心所欲的编写Commit吗？你还会如此git commit -m \"hello jartto\"提交吗？答案是否定的，因为使用了钩子函数，你没有机会了，否则将是无穷无尽的恢复Commit。这倒可以养成良好的提交习惯，🙈～\n","slug":"20181102-git提交规范","published":1,"updated":"2018-11-05T01:11:05.512Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjttrlga1001aow6x5vi1f9tp","content":"<blockquote>\n<p>一直是 ESLint 的忠实用户，深知规范的重要性。然而，在新项目交接中，我被 Git Commit 规范逼疯了。才意识到自己的疏忽，于是便有了一探究竟的想法。<strong>分享自开发头条</strong></p>\n</blockquote>\n<h2 id=\"一、为什么需要规范？\"><a href=\"#一、为什么需要规范？\" class=\"headerlink\" title=\"一、为什么需要规范？\"></a>一、为什么需要规范？</h2><p>&nbsp;&nbsp;无规矩不成方圆，编程也一样。<br>&nbsp;&nbsp;如果你有一个项目，从始至终都是自己写，那么你想怎么写都可以，没有人可以干预你。可是如果在团队协作中，大家都张扬个性，那么代码将会是一团糟，好好的项目就被糟践了。不管是开发还是日后维护，都将是灾难。<br>&nbsp;&nbsp;这时候，有人提出了何不统一标准，大家都按照这个标准来。于是ESLint，JSHint等代码工具如雨后春笋般涌现，成为了项目构建的必备良品。<br>&nbsp;&nbsp; Git Commit规范可能并没有那么夸张，但如果你在版本回退的时候看到一大段糟心的Commit，恐怕会懊恼不已吧。所以，严格遵守规范，利人利己。</p>\n<h2 id=\"二、具体规则\"><a href=\"#二、具体规则\" class=\"headerlink\" title=\"二、具体规则\"></a>二、具体规则</h2><p>先来看看公式;&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</p>\n<ol>\n<li>type:用于说明commit的类别，只允许使用下面7个标识。<ul>\n<li>feat:新功能（feature） </li>\n<li>fix：修补bug </li>\n<li>docs：文档（documentation） </li>\n<li>style： 格式（不影响代码运行的变动） </li>\n<li>refactor：重构（即不是新增功能，也不是修改bug的代码变动） </li>\n<li>test：增加测试 </li>\n<li>chore：构建过程或辅助工具的变动</li>\n</ul>\n</li>\n<li>scope:用于说明commit影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</li>\n<li>subject:是commit目的的简短描述，不超过50个字符。<ul>\n<li>以动词开头，使用第一人称现在时，比如change，而不是changed或changes </li>\n<li>第一个字母小写 </li>\n<li>结尾不加句号（.）</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"三、异常处理\"><a href=\"#三、异常处理\" class=\"headerlink\" title=\"三、异常处理\"></a>三、异常处理</h2><p>&nbsp;&nbsp;我们先来看看这个异常提醒：INVALID COMMIT MSG: does not match “<type>(<scope>): <subject>“ ! jartto:fix bug 这里之所以报出这个警告，是因为我的提交出现了两个问题：其一，使用了规范外的关键字；其二，很细节的问题，jartto：后少了空格；<br>这时候我才回忆起来，当时提交一直失败，情急之下直接强制提交，所以以后的提交都会抱出这个异常。大致意思就是：你的之前的 Commit 不合格～你的之前的 Commit 不合格～你的之前的 Commit 不合格<br>这时候就很烦了，我们只能去将之前的错误修正，那么如何操作呢？</subject></scope></type></p>\n<h2 id=\"四、如何修改之前的-commit-信息？\"><a href=\"#四、如何修改之前的-commit-信息？\" class=\"headerlink\" title=\"四、如何修改之前的 commit 信息？\"></a>四、如何修改之前的 commit 信息？</h2><p>其实并不复杂，我们只需要这样做:</p>\n<ol>\n<li>将当前分支无关的工作状态进行暂存 git stash</li>\n<li>将HEAD移动到需要修改的commit上 git rebase 9633cf0919^ —interactive</li>\n<li>找到需要修改的commit,将首行的pick改成edit</li>\n<li>开始着手解决你的bug</li>\n<li>git add将改动文件添加到暂存</li>\n<li>git commit –amend追加改动到提交</li>\n<li>git rebase –continue移动HEAD回最新的commit</li>\n<li>恢复之前的工作状态 git stash pop<br>大功告成，是不是想把整个 Commit 都修改一遍，逃～</li>\n</ol>\n<h2 id=\"五、Commit-规范的作用\"><a href=\"#五、Commit-规范的作用\" class=\"headerlink\" title=\"五、Commit 规范的作用\"></a>五、Commit 规范的作用</h2><ol>\n<li>提供更多的信息，方便排查与回退；</li>\n<li>过滤关键字，迅速定位；</li>\n<li>方便生成文档；</li>\n</ol>\n<h2 id=\"七、总结\"><a href=\"#七、总结\" class=\"headerlink\" title=\"七、总结\"></a>七、总结</h2><p>&nbsp;&nbsp;看完文章，你还会如此放荡不羁吗？你还会随心所欲的编写Commit吗？你还会如此git commit -m “hello jartto”提交吗？答案是否定的，因为使用了钩子函数，你没有机会了，否则将是无穷无尽的恢复Commit。这倒可以养成良好的提交习惯，🙈～</p>\n","site":{"data":{"projects":[{"name":"extract_news","url":"https://github.com/hee0624/extract_news","desc":"Python package to parse news from various news website"}]}},"excerpt":"","more":"<blockquote>\n<p>一直是 ESLint 的忠实用户，深知规范的重要性。然而，在新项目交接中，我被 Git Commit 规范逼疯了。才意识到自己的疏忽，于是便有了一探究竟的想法。<strong>分享自开发头条</strong></p>\n</blockquote>\n<h2 id=\"一、为什么需要规范？\"><a href=\"#一、为什么需要规范？\" class=\"headerlink\" title=\"一、为什么需要规范？\"></a>一、为什么需要规范？</h2><p>&nbsp;&nbsp;无规矩不成方圆，编程也一样。<br>&nbsp;&nbsp;如果你有一个项目，从始至终都是自己写，那么你想怎么写都可以，没有人可以干预你。可是如果在团队协作中，大家都张扬个性，那么代码将会是一团糟，好好的项目就被糟践了。不管是开发还是日后维护，都将是灾难。<br>&nbsp;&nbsp;这时候，有人提出了何不统一标准，大家都按照这个标准来。于是ESLint，JSHint等代码工具如雨后春笋般涌现，成为了项目构建的必备良品。<br>&nbsp;&nbsp; Git Commit规范可能并没有那么夸张，但如果你在版本回退的时候看到一大段糟心的Commit，恐怕会懊恼不已吧。所以，严格遵守规范，利人利己。</p>\n<h2 id=\"二、具体规则\"><a href=\"#二、具体规则\" class=\"headerlink\" title=\"二、具体规则\"></a>二、具体规则</h2><p>先来看看公式;&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</p>\n<ol>\n<li>type:用于说明commit的类别，只允许使用下面7个标识。<ul>\n<li>feat:新功能（feature） </li>\n<li>fix：修补bug </li>\n<li>docs：文档（documentation） </li>\n<li>style： 格式（不影响代码运行的变动） </li>\n<li>refactor：重构（即不是新增功能，也不是修改bug的代码变动） </li>\n<li>test：增加测试 </li>\n<li>chore：构建过程或辅助工具的变动</li>\n</ul>\n</li>\n<li>scope:用于说明commit影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</li>\n<li>subject:是commit目的的简短描述，不超过50个字符。<ul>\n<li>以动词开头，使用第一人称现在时，比如change，而不是changed或changes </li>\n<li>第一个字母小写 </li>\n<li>结尾不加句号（.）</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"三、异常处理\"><a href=\"#三、异常处理\" class=\"headerlink\" title=\"三、异常处理\"></a>三、异常处理</h2><p>&nbsp;&nbsp;我们先来看看这个异常提醒：INVALID COMMIT MSG: does not match “<type>(<scope>): <subject>“ ! jartto:fix bug 这里之所以报出这个警告，是因为我的提交出现了两个问题：其一，使用了规范外的关键字；其二，很细节的问题，jartto：后少了空格；<br>这时候我才回忆起来，当时提交一直失败，情急之下直接强制提交，所以以后的提交都会抱出这个异常。大致意思就是：你的之前的 Commit 不合格～你的之前的 Commit 不合格～你的之前的 Commit 不合格<br>这时候就很烦了，我们只能去将之前的错误修正，那么如何操作呢？</subject></scope></type></p>\n<h2 id=\"四、如何修改之前的-commit-信息？\"><a href=\"#四、如何修改之前的-commit-信息？\" class=\"headerlink\" title=\"四、如何修改之前的 commit 信息？\"></a>四、如何修改之前的 commit 信息？</h2><p>其实并不复杂，我们只需要这样做:</p>\n<ol>\n<li>将当前分支无关的工作状态进行暂存 git stash</li>\n<li>将HEAD移动到需要修改的commit上 git rebase 9633cf0919^ —interactive</li>\n<li>找到需要修改的commit,将首行的pick改成edit</li>\n<li>开始着手解决你的bug</li>\n<li>git add将改动文件添加到暂存</li>\n<li>git commit –amend追加改动到提交</li>\n<li>git rebase –continue移动HEAD回最新的commit</li>\n<li>恢复之前的工作状态 git stash pop<br>大功告成，是不是想把整个 Commit 都修改一遍，逃～</li>\n</ol>\n<h2 id=\"五、Commit-规范的作用\"><a href=\"#五、Commit-规范的作用\" class=\"headerlink\" title=\"五、Commit 规范的作用\"></a>五、Commit 规范的作用</h2><ol>\n<li>提供更多的信息，方便排查与回退；</li>\n<li>过滤关键字，迅速定位；</li>\n<li>方便生成文档；</li>\n</ol>\n<h2 id=\"七、总结\"><a href=\"#七、总结\" class=\"headerlink\" title=\"七、总结\"></a>七、总结</h2><p>&nbsp;&nbsp;看完文章，你还会如此放荡不羁吗？你还会随心所欲的编写Commit吗？你还会如此git commit -m “hello jartto”提交吗？答案是否定的，因为使用了钩子函数，你没有机会了，否则将是无穷无尽的恢复Commit。这倒可以养成良好的提交习惯，🙈～</p>\n"},{"title":"tesseract使用介绍","date":"2018-11-27T07:35:57.000Z","_content":"\n## 0.前言\n&nbsp;&nbsp;Tesseract是一款开源的OCR引擎，2005年被惠普实验室开发，2006年被谷歌开发者及其他开源组织者维护开发。Tesseract3.x基于传统的计算机视觉算法，在Tesseract4中，Tesseract 实现了一个基于LSTM的识别引擎。识别图像中单个的字符，我们通常使用CNN网络。对于任意长度的字符串的识别，我们通常使用LSTM.Tesseract4中包含了Tesseract3中的OCR引擎，但是默认使用LSTM引擎.\n\n## 1.How to install Tesseract on Ubuntu and macOS\n- Tesseract library (libtesseract)\n- Command line Tesseract tool (tesseract-ocr)\n- Python wrapper for tesseract (pytesseract)\n\n### 1.1. Install Tesseract 4.0 on Ubuntu 18.04\n\n```shell\nsudo apt install tesseract-ocr\nsudo apt install libtesseract-dev\nsudo pip install pytesseract\n\n```\n\n### 1.2. Install Tesseract 4.0 on Ubuntu 14.04, 16.04, 17.04, 17.10\n\n```shell\nsudo add-apt-repository ppa:alex-p/tesseract-ocr\nsudo apt-get update\nsudo apt install tesseract-ocr\nsudo apt install libtesseract-dev\nsudo pip install pytesseract\n```\n\n### 1.3. Install Tesseract 4.0 on macOS\n\n```shell\n# If you have tesseract 3 installed, unlink first by uncommenting the line below \n# brew unlink tesseract \nbrew install tesseract --HEAD\npip install pytesseract\n```\n\n### 1.4. Checking Tesseract version\n\n`tesseract --version`\n\n## 2.Tesseract Basic Usage\n- Input filename: 待识别的图像\n- OCR language:　识别图像中字体中的语言，在命令行和pytesseract，使用-l 选项\n- OCR Engine Mode(oem):tesseract4有2个ocr引擎(legacy,lstm),用--oem选项去设置\n   0    Legacy engine only.\n   1    Neural nets LSTM engine only.\n   2    Legacy + LSTM engines.\n   3    Default, based on what is available.\n- Page Segmentation Mode(psm): psm 或许是非常有用的，对于结构化文本有额外的信息对于python和命令行工具默认是3,c++　API默认是6.\n   0    只有方向和脚本检测（OSD）。\n   1    使用OSD自动分页。\n   2    自动分页，但没有OSD或OCR。\n   3    全自动页面分割，但没有OSD。（默认）\n   4    假设一列可变大小的文本。\n   5    假设一个统一的垂直排列文本块。\n   6    假设一个统一的文本块。\n   7    将图像作为单个文本行处理。\n   8    将图像视为一个单词。\n   9    将图像视为一个圆圈中的单个单词。\n   10   将图像视为单个字符。\n\n### 2.1 Command Line Usage\n```shell\n# Output to terminal\ntesseract image.jpg stdout -l eng --oem 1 --psm 3\n# Output to output.txt \ntesseract image.jpg output -l eng --oem 1 --psm 3\n```\n### 2.2  Using pytesseract\n```python\nimport cv2\nimport sys\nimport pytesseract\n \nif __name__ == '__main__':\n \n  if len(sys.argv) < 2:\n    print('Usage: python ocr_simple.py image.jpg')\n    sys.exit(1)\n   \n  # Read image path from command line\n  imPath = sys.argv[1]\n     \n  # Uncomment the line below to provide path to tesseract manually\n  # pytesseract.pytesseract.tesseract_cmd = '/usr/bin/tesseract'\n \n  # Define config parameters.\n  # '-l eng'  for using the English language\n  # '--oem 1' for using LSTM OCR Engine\n  config = ('-l eng --oem 1 --psm 3')\n \n  # Read image from disk\n  im = cv2.imread(imPath, cv2.IMREAD_COLOR)\n \n  # Run tesseract OCR on image\n  text = pytesseract.image_to_string(im, config=config)\n \n  # Print recognized text\n  print(text)\n```\n\n","source":"_posts/20181127-tesseract使用介绍.md","raw":"---\ntitle: tesseract使用介绍\ndate: 2018-11-27 15:35:57\ntags: ocr\n---\n\n## 0.前言\n&nbsp;&nbsp;Tesseract是一款开源的OCR引擎，2005年被惠普实验室开发，2006年被谷歌开发者及其他开源组织者维护开发。Tesseract3.x基于传统的计算机视觉算法，在Tesseract4中，Tesseract 实现了一个基于LSTM的识别引擎。识别图像中单个的字符，我们通常使用CNN网络。对于任意长度的字符串的识别，我们通常使用LSTM.Tesseract4中包含了Tesseract3中的OCR引擎，但是默认使用LSTM引擎.\n\n## 1.How to install Tesseract on Ubuntu and macOS\n- Tesseract library (libtesseract)\n- Command line Tesseract tool (tesseract-ocr)\n- Python wrapper for tesseract (pytesseract)\n\n### 1.1. Install Tesseract 4.0 on Ubuntu 18.04\n\n```shell\nsudo apt install tesseract-ocr\nsudo apt install libtesseract-dev\nsudo pip install pytesseract\n\n```\n\n### 1.2. Install Tesseract 4.0 on Ubuntu 14.04, 16.04, 17.04, 17.10\n\n```shell\nsudo add-apt-repository ppa:alex-p/tesseract-ocr\nsudo apt-get update\nsudo apt install tesseract-ocr\nsudo apt install libtesseract-dev\nsudo pip install pytesseract\n```\n\n### 1.3. Install Tesseract 4.0 on macOS\n\n```shell\n# If you have tesseract 3 installed, unlink first by uncommenting the line below \n# brew unlink tesseract \nbrew install tesseract --HEAD\npip install pytesseract\n```\n\n### 1.4. Checking Tesseract version\n\n`tesseract --version`\n\n## 2.Tesseract Basic Usage\n- Input filename: 待识别的图像\n- OCR language:　识别图像中字体中的语言，在命令行和pytesseract，使用-l 选项\n- OCR Engine Mode(oem):tesseract4有2个ocr引擎(legacy,lstm),用--oem选项去设置\n   0    Legacy engine only.\n   1    Neural nets LSTM engine only.\n   2    Legacy + LSTM engines.\n   3    Default, based on what is available.\n- Page Segmentation Mode(psm): psm 或许是非常有用的，对于结构化文本有额外的信息对于python和命令行工具默认是3,c++　API默认是6.\n   0    只有方向和脚本检测（OSD）。\n   1    使用OSD自动分页。\n   2    自动分页，但没有OSD或OCR。\n   3    全自动页面分割，但没有OSD。（默认）\n   4    假设一列可变大小的文本。\n   5    假设一个统一的垂直排列文本块。\n   6    假设一个统一的文本块。\n   7    将图像作为单个文本行处理。\n   8    将图像视为一个单词。\n   9    将图像视为一个圆圈中的单个单词。\n   10   将图像视为单个字符。\n\n### 2.1 Command Line Usage\n```shell\n# Output to terminal\ntesseract image.jpg stdout -l eng --oem 1 --psm 3\n# Output to output.txt \ntesseract image.jpg output -l eng --oem 1 --psm 3\n```\n### 2.2  Using pytesseract\n```python\nimport cv2\nimport sys\nimport pytesseract\n \nif __name__ == '__main__':\n \n  if len(sys.argv) < 2:\n    print('Usage: python ocr_simple.py image.jpg')\n    sys.exit(1)\n   \n  # Read image path from command line\n  imPath = sys.argv[1]\n     \n  # Uncomment the line below to provide path to tesseract manually\n  # pytesseract.pytesseract.tesseract_cmd = '/usr/bin/tesseract'\n \n  # Define config parameters.\n  # '-l eng'  for using the English language\n  # '--oem 1' for using LSTM OCR Engine\n  config = ('-l eng --oem 1 --psm 3')\n \n  # Read image from disk\n  im = cv2.imread(imPath, cv2.IMREAD_COLOR)\n \n  # Run tesseract OCR on image\n  text = pytesseract.image_to_string(im, config=config)\n \n  # Print recognized text\n  print(text)\n```\n\n","slug":"20181127-tesseract使用介绍","published":1,"updated":"2018-11-28T09:40:37.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjttrlga3001dow6xemts7x5y","content":"<h2 id=\"0-前言\"><a href=\"#0-前言\" class=\"headerlink\" title=\"0.前言\"></a>0.前言</h2><p>&nbsp;&nbsp;Tesseract是一款开源的OCR引擎，2005年被惠普实验室开发，2006年被谷歌开发者及其他开源组织者维护开发。Tesseract3.x基于传统的计算机视觉算法，在Tesseract4中，Tesseract 实现了一个基于LSTM的识别引擎。识别图像中单个的字符，我们通常使用CNN网络。对于任意长度的字符串的识别，我们通常使用LSTM.Tesseract4中包含了Tesseract3中的OCR引擎，但是默认使用LSTM引擎.</p>\n<h2 id=\"1-How-to-install-Tesseract-on-Ubuntu-and-macOS\"><a href=\"#1-How-to-install-Tesseract-on-Ubuntu-and-macOS\" class=\"headerlink\" title=\"1.How to install Tesseract on Ubuntu and macOS\"></a>1.How to install Tesseract on Ubuntu and macOS</h2><ul>\n<li>Tesseract library (libtesseract)</li>\n<li>Command line Tesseract tool (tesseract-ocr)</li>\n<li>Python wrapper for tesseract (pytesseract)</li>\n</ul>\n<h3 id=\"1-1-Install-Tesseract-4-0-on-Ubuntu-18-04\"><a href=\"#1-1-Install-Tesseract-4-0-on-Ubuntu-18-04\" class=\"headerlink\" title=\"1.1. Install Tesseract 4.0 on Ubuntu 18.04\"></a>1.1. Install Tesseract 4.0 on Ubuntu 18.04</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install tesseract-ocr</span><br><span class=\"line\">sudo apt install libtesseract-dev</span><br><span class=\"line\">sudo pip install pytesseract</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-Install-Tesseract-4-0-on-Ubuntu-14-04-16-04-17-04-17-10\"><a href=\"#1-2-Install-Tesseract-4-0-on-Ubuntu-14-04-16-04-17-04-17-10\" class=\"headerlink\" title=\"1.2. Install Tesseract 4.0 on Ubuntu 14.04, 16.04, 17.04, 17.10\"></a>1.2. Install Tesseract 4.0 on Ubuntu 14.04, 16.04, 17.04, 17.10</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:alex-p/tesseract-ocr</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt install tesseract-ocr</span><br><span class=\"line\">sudo apt install libtesseract-dev</span><br><span class=\"line\">sudo pip install pytesseract</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3-Install-Tesseract-4-0-on-macOS\"><a href=\"#1-3-Install-Tesseract-4-0-on-macOS\" class=\"headerlink\" title=\"1.3. Install Tesseract 4.0 on macOS\"></a>1.3. Install Tesseract 4.0 on macOS</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> If you have tesseract 3 installed, unlink first by uncommenting the line below </span><br><span class=\"line\"><span class=\"meta\">#</span> brew unlink tesseract </span><br><span class=\"line\">brew install tesseract --HEAD</span><br><span class=\"line\">pip install pytesseract</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-4-Checking-Tesseract-version\"><a href=\"#1-4-Checking-Tesseract-version\" class=\"headerlink\" title=\"1.4. Checking Tesseract version\"></a>1.4. Checking Tesseract version</h3><p><code>tesseract --version</code></p>\n<h2 id=\"2-Tesseract-Basic-Usage\"><a href=\"#2-Tesseract-Basic-Usage\" class=\"headerlink\" title=\"2.Tesseract Basic Usage\"></a>2.Tesseract Basic Usage</h2><ul>\n<li>Input filename: 待识别的图像</li>\n<li>OCR language:　识别图像中字体中的语言，在命令行和pytesseract，使用-l 选项</li>\n<li>OCR Engine Mode(oem):tesseract4有2个ocr引擎(legacy,lstm),用—oem选项去设置<br> 0    Legacy engine only.<br> 1    Neural nets LSTM engine only.<br> 2    Legacy + LSTM engines.<br> 3    Default, based on what is available.</li>\n<li>Page Segmentation Mode(psm): psm 或许是非常有用的，对于结构化文本有额外的信息对于python和命令行工具默认是3,c++　API默认是6.<br> 0    只有方向和脚本检测（OSD）。<br> 1    使用OSD自动分页。<br> 2    自动分页，但没有OSD或OCR。<br> 3    全自动页面分割，但没有OSD。（默认）<br> 4    假设一列可变大小的文本。<br> 5    假设一个统一的垂直排列文本块。<br> 6    假设一个统一的文本块。<br> 7    将图像作为单个文本行处理。<br> 8    将图像视为一个单词。<br> 9    将图像视为一个圆圈中的单个单词。<br> 10   将图像视为单个字符。</li>\n</ul>\n<h3 id=\"2-1-Command-Line-Usage\"><a href=\"#2-1-Command-Line-Usage\" class=\"headerlink\" title=\"2.1 Command Line Usage\"></a>2.1 Command Line Usage</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> Output to terminal</span><br><span class=\"line\">tesseract image.jpg stdout -l eng --oem 1 --psm 3</span><br><span class=\"line\"><span class=\"meta\">#</span> Output to output.txt </span><br><span class=\"line\">tesseract image.jpg output -l eng --oem 1 --psm 3</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-Using-pytesseract\"><a href=\"#2-2-Using-pytesseract\" class=\"headerlink\" title=\"2.2  Using pytesseract\"></a>2.2  Using pytesseract</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> pytesseract</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">if</span> len(sys.argv) &lt; <span class=\"number\">2</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'Usage: python ocr_simple.py image.jpg'</span>)</span><br><span class=\"line\">    sys.exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"comment\"># Read image path from command line</span></span><br><span class=\"line\">  imPath = sys.argv[<span class=\"number\">1</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">  <span class=\"comment\"># Uncomment the line below to provide path to tesseract manually</span></span><br><span class=\"line\">  <span class=\"comment\"># pytesseract.pytesseract.tesseract_cmd = '/usr/bin/tesseract'</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\"># Define config parameters.</span></span><br><span class=\"line\">  <span class=\"comment\"># '-l eng'  for using the English language</span></span><br><span class=\"line\">  <span class=\"comment\"># '--oem 1' for using LSTM OCR Engine</span></span><br><span class=\"line\">  config = (<span class=\"string\">'-l eng --oem 1 --psm 3'</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\"># Read image from disk</span></span><br><span class=\"line\">  im = cv2.imread(imPath, cv2.IMREAD_COLOR)</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\"># Run tesseract OCR on image</span></span><br><span class=\"line\">  text = pytesseract.image_to_string(im, config=config)</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\"># Print recognized text</span></span><br><span class=\"line\">  print(text)</span><br></pre></td></tr></table></figure>\n","site":{"data":{"projects":[{"name":"extract_news","url":"https://github.com/hee0624/extract_news","desc":"Python package to parse news from various news website"}]}},"excerpt":"","more":"<h2 id=\"0-前言\"><a href=\"#0-前言\" class=\"headerlink\" title=\"0.前言\"></a>0.前言</h2><p>&nbsp;&nbsp;Tesseract是一款开源的OCR引擎，2005年被惠普实验室开发，2006年被谷歌开发者及其他开源组织者维护开发。Tesseract3.x基于传统的计算机视觉算法，在Tesseract4中，Tesseract 实现了一个基于LSTM的识别引擎。识别图像中单个的字符，我们通常使用CNN网络。对于任意长度的字符串的识别，我们通常使用LSTM.Tesseract4中包含了Tesseract3中的OCR引擎，但是默认使用LSTM引擎.</p>\n<h2 id=\"1-How-to-install-Tesseract-on-Ubuntu-and-macOS\"><a href=\"#1-How-to-install-Tesseract-on-Ubuntu-and-macOS\" class=\"headerlink\" title=\"1.How to install Tesseract on Ubuntu and macOS\"></a>1.How to install Tesseract on Ubuntu and macOS</h2><ul>\n<li>Tesseract library (libtesseract)</li>\n<li>Command line Tesseract tool (tesseract-ocr)</li>\n<li>Python wrapper for tesseract (pytesseract)</li>\n</ul>\n<h3 id=\"1-1-Install-Tesseract-4-0-on-Ubuntu-18-04\"><a href=\"#1-1-Install-Tesseract-4-0-on-Ubuntu-18-04\" class=\"headerlink\" title=\"1.1. Install Tesseract 4.0 on Ubuntu 18.04\"></a>1.1. Install Tesseract 4.0 on Ubuntu 18.04</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install tesseract-ocr</span><br><span class=\"line\">sudo apt install libtesseract-dev</span><br><span class=\"line\">sudo pip install pytesseract</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-2-Install-Tesseract-4-0-on-Ubuntu-14-04-16-04-17-04-17-10\"><a href=\"#1-2-Install-Tesseract-4-0-on-Ubuntu-14-04-16-04-17-04-17-10\" class=\"headerlink\" title=\"1.2. Install Tesseract 4.0 on Ubuntu 14.04, 16.04, 17.04, 17.10\"></a>1.2. Install Tesseract 4.0 on Ubuntu 14.04, 16.04, 17.04, 17.10</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:alex-p/tesseract-ocr</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt install tesseract-ocr</span><br><span class=\"line\">sudo apt install libtesseract-dev</span><br><span class=\"line\">sudo pip install pytesseract</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3-Install-Tesseract-4-0-on-macOS\"><a href=\"#1-3-Install-Tesseract-4-0-on-macOS\" class=\"headerlink\" title=\"1.3. Install Tesseract 4.0 on macOS\"></a>1.3. Install Tesseract 4.0 on macOS</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> If you have tesseract 3 installed, unlink first by uncommenting the line below </span><br><span class=\"line\"><span class=\"meta\">#</span> brew unlink tesseract </span><br><span class=\"line\">brew install tesseract --HEAD</span><br><span class=\"line\">pip install pytesseract</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-4-Checking-Tesseract-version\"><a href=\"#1-4-Checking-Tesseract-version\" class=\"headerlink\" title=\"1.4. Checking Tesseract version\"></a>1.4. Checking Tesseract version</h3><p><code>tesseract --version</code></p>\n<h2 id=\"2-Tesseract-Basic-Usage\"><a href=\"#2-Tesseract-Basic-Usage\" class=\"headerlink\" title=\"2.Tesseract Basic Usage\"></a>2.Tesseract Basic Usage</h2><ul>\n<li>Input filename: 待识别的图像</li>\n<li>OCR language:　识别图像中字体中的语言，在命令行和pytesseract，使用-l 选项</li>\n<li>OCR Engine Mode(oem):tesseract4有2个ocr引擎(legacy,lstm),用—oem选项去设置<br> 0    Legacy engine only.<br> 1    Neural nets LSTM engine only.<br> 2    Legacy + LSTM engines.<br> 3    Default, based on what is available.</li>\n<li>Page Segmentation Mode(psm): psm 或许是非常有用的，对于结构化文本有额外的信息对于python和命令行工具默认是3,c++　API默认是6.<br> 0    只有方向和脚本检测（OSD）。<br> 1    使用OSD自动分页。<br> 2    自动分页，但没有OSD或OCR。<br> 3    全自动页面分割，但没有OSD。（默认）<br> 4    假设一列可变大小的文本。<br> 5    假设一个统一的垂直排列文本块。<br> 6    假设一个统一的文本块。<br> 7    将图像作为单个文本行处理。<br> 8    将图像视为一个单词。<br> 9    将图像视为一个圆圈中的单个单词。<br> 10   将图像视为单个字符。</li>\n</ul>\n<h3 id=\"2-1-Command-Line-Usage\"><a href=\"#2-1-Command-Line-Usage\" class=\"headerlink\" title=\"2.1 Command Line Usage\"></a>2.1 Command Line Usage</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span> Output to terminal</span><br><span class=\"line\">tesseract image.jpg stdout -l eng --oem 1 --psm 3</span><br><span class=\"line\"><span class=\"meta\">#</span> Output to output.txt </span><br><span class=\"line\">tesseract image.jpg output -l eng --oem 1 --psm 3</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2-Using-pytesseract\"><a href=\"#2-2-Using-pytesseract\" class=\"headerlink\" title=\"2.2  Using pytesseract\"></a>2.2  Using pytesseract</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> pytesseract</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">if</span> len(sys.argv) &lt; <span class=\"number\">2</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'Usage: python ocr_simple.py image.jpg'</span>)</span><br><span class=\"line\">    sys.exit(<span class=\"number\">1</span>)</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"comment\"># Read image path from command line</span></span><br><span class=\"line\">  imPath = sys.argv[<span class=\"number\">1</span>]</span><br><span class=\"line\">     </span><br><span class=\"line\">  <span class=\"comment\"># Uncomment the line below to provide path to tesseract manually</span></span><br><span class=\"line\">  <span class=\"comment\"># pytesseract.pytesseract.tesseract_cmd = '/usr/bin/tesseract'</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\"># Define config parameters.</span></span><br><span class=\"line\">  <span class=\"comment\"># '-l eng'  for using the English language</span></span><br><span class=\"line\">  <span class=\"comment\"># '--oem 1' for using LSTM OCR Engine</span></span><br><span class=\"line\">  config = (<span class=\"string\">'-l eng --oem 1 --psm 3'</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\"># Read image from disk</span></span><br><span class=\"line\">  im = cv2.imread(imPath, cv2.IMREAD_COLOR)</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\"># Run tesseract OCR on image</span></span><br><span class=\"line\">  text = pytesseract.image_to_string(im, config=config)</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\"># Print recognized text</span></span><br><span class=\"line\">  print(text)</span><br></pre></td></tr></table></figure>\n"},{"title":"文件格式的转换","date":"2018-12-05T08:45:17.000Z","_content":"\n\n## 1. doc2docx\n&nbsp;&nbsp;对于doc文档转docx文档，依赖于操作系统。使用windows时，依赖office；使用ubuntu时，依赖libreoffice。\n#### linux版本\n```python\ndef doc2docx(doc_path, docx_path):\n    os.system(f'soffice --headless --convert-to docx --outdir {docx_path} {doc_path}')\n```\n#### windows版本\n```shell\npip install pywin32\n```\n```python\nfrom win32com import client as wc\ndef doc2docx(doc_path, docx_path):\n    # word = wc.Dispatch('Word.Application')\n    word = wc.DispatchEx('Word.Application')\n    # word.Visible=1\n    doc = word.Documents.Open(doc_path)\n    doc.SaveAs(docx_path, 16) # 16 docx ４转为txt\n    doc.Close()\n    word.Quit()\n```\n**备注** （widows下转换效率比ubuntu高）：\n\n|文件名|libreoffice|win32|\n| ------ | ------ | ------ |\n|长城电工 8M|36秒|8秒|\n|贝斯达 27.01M|2分钟|12秒|\n## 2. doc2pdf\n```python\ndef doc2pdf(doc_path, pdf_path):\n    os.system(f'soffice --headless --convert-to pdf --outdir {pdf_path} {doc_path}')\n```\n## 3. pdf2txt\n\n#### 方法一：\n参考[pdfplumber](https://github.com/jsvine/pdfplumber)\n```shell \npip install pdfplumber\n```\n```python\nimport pdfplumber\ndef pdf2txt(input_file, output_file):\n    \"\"\"解析PDF到TEXT\"\"\"\n    with pdfplumber.open(input_file) as fp_r, open(output_file, 'w') as fp_w:\n        pages = fp_r.pages\n        for ix, page in enumerate(pages):\n            text = page.extract_text()\n            fp_w.write(text)\n```\n#### 方法二：\n```python\nimport os\ndef pdf2txt(input_file, output_file):\n    os.system(f'pdftotext -layout {input_file} {output_file}')\n```\n**备注**:pdftotext命令行工具转换txt时，不加参数时，字体大小不一致的同一行文本，会转成多行。因此，`pdftotext -layout　[source] [target]`。其中，pdftotext 工具效率高。\n## 4. pdf2image\n参考:[pdf2image](https://github.com/Belval/pdf2image)\n```shell \npip install pdf2image\n```\n```python\nfrom pdf2image import convert_from_path\nimport tempfile\ndef pdf2img(filename, output_dir):\n    with tempfile.TemporaryDirectory() as path:\n        images = convert_from_path(filename)\n        for index, img in enumerate(images):\n            img.save(f'{output_dir}/page_{index}.png')\n```\n**说明**：\nthread_count ：允许设置用于转换的线程数；\nfirst_page ：允许设置由pdftoppm处理的第一个页面；\nlast_page：允许设置最后一页由pdftoppm处理；\nfmt：允许指定输出格式。目前支持的格式是jpg、png和ppm；\n```python\nconvert_from_path(pdf_path, dpi=200, output_folder=None, first_page=None, last_page=None, fmt='ppm', use_cropbox=False)\nconvert_from_bytes(pdf_file, dpi=200, output_folder=None, first_page=None, last_page=None, fmt='ppm', use_cropbox=False)\n```\n## 5.pdf2xml\n```shell\npdftohtml -i -xml [source] [target]\n```","source":"_posts/20181203-文件格式的转换.md","raw":"---\ntitle: 文件格式的转换\ndate: 2018-12-05 16:45:17\ntags: [linux, python]\n---\n\n\n## 1. doc2docx\n&nbsp;&nbsp;对于doc文档转docx文档，依赖于操作系统。使用windows时，依赖office；使用ubuntu时，依赖libreoffice。\n#### linux版本\n```python\ndef doc2docx(doc_path, docx_path):\n    os.system(f'soffice --headless --convert-to docx --outdir {docx_path} {doc_path}')\n```\n#### windows版本\n```shell\npip install pywin32\n```\n```python\nfrom win32com import client as wc\ndef doc2docx(doc_path, docx_path):\n    # word = wc.Dispatch('Word.Application')\n    word = wc.DispatchEx('Word.Application')\n    # word.Visible=1\n    doc = word.Documents.Open(doc_path)\n    doc.SaveAs(docx_path, 16) # 16 docx ４转为txt\n    doc.Close()\n    word.Quit()\n```\n**备注** （widows下转换效率比ubuntu高）：\n\n|文件名|libreoffice|win32|\n| ------ | ------ | ------ |\n|长城电工 8M|36秒|8秒|\n|贝斯达 27.01M|2分钟|12秒|\n## 2. doc2pdf\n```python\ndef doc2pdf(doc_path, pdf_path):\n    os.system(f'soffice --headless --convert-to pdf --outdir {pdf_path} {doc_path}')\n```\n## 3. pdf2txt\n\n#### 方法一：\n参考[pdfplumber](https://github.com/jsvine/pdfplumber)\n```shell \npip install pdfplumber\n```\n```python\nimport pdfplumber\ndef pdf2txt(input_file, output_file):\n    \"\"\"解析PDF到TEXT\"\"\"\n    with pdfplumber.open(input_file) as fp_r, open(output_file, 'w') as fp_w:\n        pages = fp_r.pages\n        for ix, page in enumerate(pages):\n            text = page.extract_text()\n            fp_w.write(text)\n```\n#### 方法二：\n```python\nimport os\ndef pdf2txt(input_file, output_file):\n    os.system(f'pdftotext -layout {input_file} {output_file}')\n```\n**备注**:pdftotext命令行工具转换txt时，不加参数时，字体大小不一致的同一行文本，会转成多行。因此，`pdftotext -layout　[source] [target]`。其中，pdftotext 工具效率高。\n## 4. pdf2image\n参考:[pdf2image](https://github.com/Belval/pdf2image)\n```shell \npip install pdf2image\n```\n```python\nfrom pdf2image import convert_from_path\nimport tempfile\ndef pdf2img(filename, output_dir):\n    with tempfile.TemporaryDirectory() as path:\n        images = convert_from_path(filename)\n        for index, img in enumerate(images):\n            img.save(f'{output_dir}/page_{index}.png')\n```\n**说明**：\nthread_count ：允许设置用于转换的线程数；\nfirst_page ：允许设置由pdftoppm处理的第一个页面；\nlast_page：允许设置最后一页由pdftoppm处理；\nfmt：允许指定输出格式。目前支持的格式是jpg、png和ppm；\n```python\nconvert_from_path(pdf_path, dpi=200, output_folder=None, first_page=None, last_page=None, fmt='ppm', use_cropbox=False)\nconvert_from_bytes(pdf_file, dpi=200, output_folder=None, first_page=None, last_page=None, fmt='ppm', use_cropbox=False)\n```\n## 5.pdf2xml\n```shell\npdftohtml -i -xml [source] [target]\n```","slug":"20181203-文件格式的转换","published":1,"updated":"2019-01-07T08:58:15.904Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjttrlga4001fow6xak9fork8","content":"<h2 id=\"1-doc2docx\"><a href=\"#1-doc2docx\" class=\"headerlink\" title=\"1. doc2docx\"></a>1. doc2docx</h2><p>&nbsp;&nbsp;对于doc文档转docx文档，依赖于操作系统。使用windows时，依赖office；使用ubuntu时，依赖libreoffice。</p>\n<h4 id=\"linux版本\"><a href=\"#linux版本\" class=\"headerlink\" title=\"linux版本\"></a>linux版本</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">doc2docx</span><span class=\"params\">(doc_path, docx_path)</span>:</span></span><br><span class=\"line\">    os.system(<span class=\"string\">f'soffice --headless --convert-to docx --outdir <span class=\"subst\">&#123;docx_path&#125;</span> <span class=\"subst\">&#123;doc_path&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"windows版本\"><a href=\"#windows版本\" class=\"headerlink\" title=\"windows版本\"></a>windows版本</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pywin32</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> win32com <span class=\"keyword\">import</span> client <span class=\"keyword\">as</span> wc</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">doc2docx</span><span class=\"params\">(doc_path, docx_path)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># word = wc.Dispatch('Word.Application')</span></span><br><span class=\"line\">    word = wc.DispatchEx(<span class=\"string\">'Word.Application'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># word.Visible=1</span></span><br><span class=\"line\">    doc = word.Documents.Open(doc_path)</span><br><span class=\"line\">    doc.SaveAs(docx_path, <span class=\"number\">16</span>) <span class=\"comment\"># 16 docx ４转为txt</span></span><br><span class=\"line\">    doc.Close()</span><br><span class=\"line\">    word.Quit()</span><br></pre></td></tr></table></figure>\n<p><strong>备注</strong> （widows下转换效率比ubuntu高）：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>文件名</th>\n<th>libreoffice</th>\n<th>win32</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>长城电工 8M</td>\n<td>36秒</td>\n<td>8秒</td>\n</tr>\n<tr>\n<td>贝斯达 27.01M</td>\n<td>2分钟</td>\n<td>12秒</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"2-doc2pdf\"><a href=\"#2-doc2pdf\" class=\"headerlink\" title=\"2. doc2pdf\"></a>2. doc2pdf</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">doc2pdf</span><span class=\"params\">(doc_path, pdf_path)</span>:</span></span><br><span class=\"line\">    os.system(<span class=\"string\">f'soffice --headless --convert-to pdf --outdir <span class=\"subst\">&#123;pdf_path&#125;</span> <span class=\"subst\">&#123;doc_path&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-pdf2txt\"><a href=\"#3-pdf2txt\" class=\"headerlink\" title=\"3. pdf2txt\"></a>3. pdf2txt</h2><h4 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h4><p>参考<a href=\"https://github.com/jsvine/pdfplumber\" target=\"_blank\" rel=\"noopener\">pdfplumber</a><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pdfplumber</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pdfplumber</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pdf2txt</span><span class=\"params\">(input_file, output_file)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"解析PDF到TEXT\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pdfplumber.open(input_file) <span class=\"keyword\">as</span> fp_r, open(output_file, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> fp_w:</span><br><span class=\"line\">        pages = fp_r.pages</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ix, page <span class=\"keyword\">in</span> enumerate(pages):</span><br><span class=\"line\">            text = page.extract_text()</span><br><span class=\"line\">            fp_w.write(text)</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a>方法二：</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pdf2txt</span><span class=\"params\">(input_file, output_file)</span>:</span></span><br><span class=\"line\">    os.system(<span class=\"string\">f'pdftotext -layout <span class=\"subst\">&#123;input_file&#125;</span> <span class=\"subst\">&#123;output_file&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>备注</strong>:pdftotext命令行工具转换txt时，不加参数时，字体大小不一致的同一行文本，会转成多行。因此，<code>pdftotext -layout　[source] [target]</code>。其中，pdftotext 工具效率高。</p>\n<h2 id=\"4-pdf2image\"><a href=\"#4-pdf2image\" class=\"headerlink\" title=\"4. pdf2image\"></a>4. pdf2image</h2><p>参考:<a href=\"https://github.com/Belval/pdf2image\" target=\"_blank\" rel=\"noopener\">pdf2image</a><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pdf2image</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pdf2image <span class=\"keyword\">import</span> convert_from_path</span><br><span class=\"line\"><span class=\"keyword\">import</span> tempfile</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pdf2img</span><span class=\"params\">(filename, output_dir)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tempfile.TemporaryDirectory() <span class=\"keyword\">as</span> path:</span><br><span class=\"line\">        images = convert_from_path(filename)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> index, img <span class=\"keyword\">in</span> enumerate(images):</span><br><span class=\"line\">            img.save(<span class=\"string\">f'<span class=\"subst\">&#123;output_dir&#125;</span>/page_<span class=\"subst\">&#123;index&#125;</span>.png'</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>说明</strong>：<br>thread_count ：允许设置用于转换的线程数；<br>first_page ：允许设置由pdftoppm处理的第一个页面；<br>last_page：允许设置最后一页由pdftoppm处理；<br>fmt：允许指定输出格式。目前支持的格式是jpg、png和ppm；<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">convert_from_path(pdf_path, dpi=<span class=\"number\">200</span>, output_folder=<span class=\"keyword\">None</span>, first_page=<span class=\"keyword\">None</span>, last_page=<span class=\"keyword\">None</span>, fmt=<span class=\"string\">'ppm'</span>, use_cropbox=<span class=\"keyword\">False</span>)</span><br><span class=\"line\">convert_from_bytes(pdf_file, dpi=<span class=\"number\">200</span>, output_folder=<span class=\"keyword\">None</span>, first_page=<span class=\"keyword\">None</span>, last_page=<span class=\"keyword\">None</span>, fmt=<span class=\"string\">'ppm'</span>, use_cropbox=<span class=\"keyword\">False</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"5-pdf2xml\"><a href=\"#5-pdf2xml\" class=\"headerlink\" title=\"5.pdf2xml\"></a>5.pdf2xml</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pdftohtml -i -xml [source] [target]</span><br></pre></td></tr></table></figure>","site":{"data":{"projects":[{"name":"extract_news","url":"https://github.com/hee0624/extract_news","desc":"Python package to parse news from various news website"}]}},"excerpt":"","more":"<h2 id=\"1-doc2docx\"><a href=\"#1-doc2docx\" class=\"headerlink\" title=\"1. doc2docx\"></a>1. doc2docx</h2><p>&nbsp;&nbsp;对于doc文档转docx文档，依赖于操作系统。使用windows时，依赖office；使用ubuntu时，依赖libreoffice。</p>\n<h4 id=\"linux版本\"><a href=\"#linux版本\" class=\"headerlink\" title=\"linux版本\"></a>linux版本</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">doc2docx</span><span class=\"params\">(doc_path, docx_path)</span>:</span></span><br><span class=\"line\">    os.system(<span class=\"string\">f'soffice --headless --convert-to docx --outdir <span class=\"subst\">&#123;docx_path&#125;</span> <span class=\"subst\">&#123;doc_path&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"windows版本\"><a href=\"#windows版本\" class=\"headerlink\" title=\"windows版本\"></a>windows版本</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pywin32</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> win32com <span class=\"keyword\">import</span> client <span class=\"keyword\">as</span> wc</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">doc2docx</span><span class=\"params\">(doc_path, docx_path)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># word = wc.Dispatch('Word.Application')</span></span><br><span class=\"line\">    word = wc.DispatchEx(<span class=\"string\">'Word.Application'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># word.Visible=1</span></span><br><span class=\"line\">    doc = word.Documents.Open(doc_path)</span><br><span class=\"line\">    doc.SaveAs(docx_path, <span class=\"number\">16</span>) <span class=\"comment\"># 16 docx ４转为txt</span></span><br><span class=\"line\">    doc.Close()</span><br><span class=\"line\">    word.Quit()</span><br></pre></td></tr></table></figure>\n<p><strong>备注</strong> （widows下转换效率比ubuntu高）：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>文件名</th>\n<th>libreoffice</th>\n<th>win32</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>长城电工 8M</td>\n<td>36秒</td>\n<td>8秒</td>\n</tr>\n<tr>\n<td>贝斯达 27.01M</td>\n<td>2分钟</td>\n<td>12秒</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"2-doc2pdf\"><a href=\"#2-doc2pdf\" class=\"headerlink\" title=\"2. doc2pdf\"></a>2. doc2pdf</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">doc2pdf</span><span class=\"params\">(doc_path, pdf_path)</span>:</span></span><br><span class=\"line\">    os.system(<span class=\"string\">f'soffice --headless --convert-to pdf --outdir <span class=\"subst\">&#123;pdf_path&#125;</span> <span class=\"subst\">&#123;doc_path&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-pdf2txt\"><a href=\"#3-pdf2txt\" class=\"headerlink\" title=\"3. pdf2txt\"></a>3. pdf2txt</h2><h4 id=\"方法一：\"><a href=\"#方法一：\" class=\"headerlink\" title=\"方法一：\"></a>方法一：</h4><p>参考<a href=\"https://github.com/jsvine/pdfplumber\" target=\"_blank\" rel=\"noopener\">pdfplumber</a><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pdfplumber</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pdfplumber</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pdf2txt</span><span class=\"params\">(input_file, output_file)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"解析PDF到TEXT\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> pdfplumber.open(input_file) <span class=\"keyword\">as</span> fp_r, open(output_file, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> fp_w:</span><br><span class=\"line\">        pages = fp_r.pages</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ix, page <span class=\"keyword\">in</span> enumerate(pages):</span><br><span class=\"line\">            text = page.extract_text()</span><br><span class=\"line\">            fp_w.write(text)</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二：\"><a href=\"#方法二：\" class=\"headerlink\" title=\"方法二：\"></a>方法二：</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pdf2txt</span><span class=\"params\">(input_file, output_file)</span>:</span></span><br><span class=\"line\">    os.system(<span class=\"string\">f'pdftotext -layout <span class=\"subst\">&#123;input_file&#125;</span> <span class=\"subst\">&#123;output_file&#125;</span>'</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>备注</strong>:pdftotext命令行工具转换txt时，不加参数时，字体大小不一致的同一行文本，会转成多行。因此，<code>pdftotext -layout　[source] [target]</code>。其中，pdftotext 工具效率高。</p>\n<h2 id=\"4-pdf2image\"><a href=\"#4-pdf2image\" class=\"headerlink\" title=\"4. pdf2image\"></a>4. pdf2image</h2><p>参考:<a href=\"https://github.com/Belval/pdf2image\" target=\"_blank\" rel=\"noopener\">pdf2image</a><br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pdf2image</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pdf2image <span class=\"keyword\">import</span> convert_from_path</span><br><span class=\"line\"><span class=\"keyword\">import</span> tempfile</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pdf2img</span><span class=\"params\">(filename, output_dir)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> tempfile.TemporaryDirectory() <span class=\"keyword\">as</span> path:</span><br><span class=\"line\">        images = convert_from_path(filename)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> index, img <span class=\"keyword\">in</span> enumerate(images):</span><br><span class=\"line\">            img.save(<span class=\"string\">f'<span class=\"subst\">&#123;output_dir&#125;</span>/page_<span class=\"subst\">&#123;index&#125;</span>.png'</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>说明</strong>：<br>thread_count ：允许设置用于转换的线程数；<br>first_page ：允许设置由pdftoppm处理的第一个页面；<br>last_page：允许设置最后一页由pdftoppm处理；<br>fmt：允许指定输出格式。目前支持的格式是jpg、png和ppm；<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">convert_from_path(pdf_path, dpi=<span class=\"number\">200</span>, output_folder=<span class=\"keyword\">None</span>, first_page=<span class=\"keyword\">None</span>, last_page=<span class=\"keyword\">None</span>, fmt=<span class=\"string\">'ppm'</span>, use_cropbox=<span class=\"keyword\">False</span>)</span><br><span class=\"line\">convert_from_bytes(pdf_file, dpi=<span class=\"number\">200</span>, output_folder=<span class=\"keyword\">None</span>, first_page=<span class=\"keyword\">None</span>, last_page=<span class=\"keyword\">None</span>, fmt=<span class=\"string\">'ppm'</span>, use_cropbox=<span class=\"keyword\">False</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"5-pdf2xml\"><a href=\"#5-pdf2xml\" class=\"headerlink\" title=\"5.pdf2xml\"></a>5.pdf2xml</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pdftohtml -i -xml [source] [target]</span><br></pre></td></tr></table></figure>"},{"title":"docker基本命令","date":"2019-01-23T01:45:17.000Z","_content":"\n# docker 环境部署\n\n## 项目准备（centos版本）\n\n- **docker在线安装**\n  1. 安装一些必要的系统工具：`sudo yum install -y yum-utils device-mapper-persistent-data lvm2`\n  2. 添加软件源信息：`sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo`\n  3. 更新 yum 缓存：`sudo yum makecache fast`\n  4. 安装 Docker-ce：`sudo yum -y install docker-ce`\n  5. 启动 Docker 后台服务 `sudo systemctl start docker`\n- **docker离线安装**\n 1.  下载 Docker RPM 软件包[ 下载地址][https://yum.dockerproject.org/repo/main/centos/7/Packages/]\n      docker-engine-1.12.6-1.el7.centos.x86_64.rpm\n       docker-engine-selinux-1.12.6-1.el7.centos.noarch.rpm\n  2. 将软件包上传至服务器，执行安装命令\n 3. cd <你的软件包存放路径>\n 4. yum localinstall *.rpm\n 5. 设置开机自启动`systemctl enable docker`\n 6. 启动docker `systemctl start docker`\n 6. 验证 `docker version`\n\n## 载入镜像\n`sudo　docker load --input [镜像文件]`\n\n## 查看镜像\n`sudo docker images`\n\n## 启动容器\n`sudo docker run -p 9036:9009 -it ibtool_bank_server`\n\n## docker基础知识\n### docker基本命令\n- docker pull 获取image\n- docker build $IMAGENAME .创建image \n- docker images 列出image\n- docker run -it $IMAGE_NAME /bin/bash 运行容器\n- docker ps [-an] 列出容器\n- docker rm 删除容器\n- docker rmi 删除image\n- docker cp /data $CONTAINER_ID:/home/data 在host 和container 之间拷贝文件\n- docker commit -m 'message' $CONTAINER_ID $IMAGE_NAME:TAG保存改动为新的image\n- docker start $CONTAINER_ID 启动容器\n- docker stop $CONTAINER_ID 关闭容器（保存状态）\n- docker kill $CONTAINER_ID 杀死容器（直接杀死）\n-  docker exec -it $CONTAINER_ID /bin/bash  连接容器\n- docker restart $CONTAINER_ID 重启容器\n- docker logs $CONTAINER_ID 在容器外查看输出\n\n### Dockerfile 语法\n- FROM base image\n- RUN 执行命令\n- ADD 添加文件\n- COPY 拷贝文件\n- CMD 执行命令\n- EXPOSE 暴露端口\n- WORKDIR 指定路径\n- MAINTAINER 维护者\n- ENV 设定环境变量\n- ENTRYPOINT 容器入口\n- USER 指定用户\n\n### docker命令\n- `docker run -v $PWD/data:/var/mydata --name data_container ubuntu` \n- `docker load --input ibtool_bank.tar`\n- `docker save -o ibtool_bank.tar ibtool/bank`\n- `docker run -p 8080:8080 ibtool/bank`\n- `docker run -d -p 80:80 --name webserver nginx`\n\n\n### tips:\nDockerfile 加入\nENV LANG C.UTF-8","source":"_posts/20190123-docker基本命令.md","raw":"---\ntitle: docker基本命令\ndate: 2019-01-23 09:45:17\ntags: [linux, docker]\n---\n\n# docker 环境部署\n\n## 项目准备（centos版本）\n\n- **docker在线安装**\n  1. 安装一些必要的系统工具：`sudo yum install -y yum-utils device-mapper-persistent-data lvm2`\n  2. 添加软件源信息：`sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo`\n  3. 更新 yum 缓存：`sudo yum makecache fast`\n  4. 安装 Docker-ce：`sudo yum -y install docker-ce`\n  5. 启动 Docker 后台服务 `sudo systemctl start docker`\n- **docker离线安装**\n 1.  下载 Docker RPM 软件包[ 下载地址][https://yum.dockerproject.org/repo/main/centos/7/Packages/]\n      docker-engine-1.12.6-1.el7.centos.x86_64.rpm\n       docker-engine-selinux-1.12.6-1.el7.centos.noarch.rpm\n  2. 将软件包上传至服务器，执行安装命令\n 3. cd <你的软件包存放路径>\n 4. yum localinstall *.rpm\n 5. 设置开机自启动`systemctl enable docker`\n 6. 启动docker `systemctl start docker`\n 6. 验证 `docker version`\n\n## 载入镜像\n`sudo　docker load --input [镜像文件]`\n\n## 查看镜像\n`sudo docker images`\n\n## 启动容器\n`sudo docker run -p 9036:9009 -it ibtool_bank_server`\n\n## docker基础知识\n### docker基本命令\n- docker pull 获取image\n- docker build $IMAGENAME .创建image \n- docker images 列出image\n- docker run -it $IMAGE_NAME /bin/bash 运行容器\n- docker ps [-an] 列出容器\n- docker rm 删除容器\n- docker rmi 删除image\n- docker cp /data $CONTAINER_ID:/home/data 在host 和container 之间拷贝文件\n- docker commit -m 'message' $CONTAINER_ID $IMAGE_NAME:TAG保存改动为新的image\n- docker start $CONTAINER_ID 启动容器\n- docker stop $CONTAINER_ID 关闭容器（保存状态）\n- docker kill $CONTAINER_ID 杀死容器（直接杀死）\n-  docker exec -it $CONTAINER_ID /bin/bash  连接容器\n- docker restart $CONTAINER_ID 重启容器\n- docker logs $CONTAINER_ID 在容器外查看输出\n\n### Dockerfile 语法\n- FROM base image\n- RUN 执行命令\n- ADD 添加文件\n- COPY 拷贝文件\n- CMD 执行命令\n- EXPOSE 暴露端口\n- WORKDIR 指定路径\n- MAINTAINER 维护者\n- ENV 设定环境变量\n- ENTRYPOINT 容器入口\n- USER 指定用户\n\n### docker命令\n- `docker run -v $PWD/data:/var/mydata --name data_container ubuntu` \n- `docker load --input ibtool_bank.tar`\n- `docker save -o ibtool_bank.tar ibtool/bank`\n- `docker run -p 8080:8080 ibtool/bank`\n- `docker run -d -p 80:80 --name webserver nginx`\n\n\n### tips:\nDockerfile 加入\nENV LANG C.UTF-8","slug":"20190123-docker基本命令","published":1,"updated":"2019-03-11T02:54:03.791Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjttrlga5001how6xkjohyikk","content":"<h1 id=\"docker-环境部署\"><a href=\"#docker-环境部署\" class=\"headerlink\" title=\"docker 环境部署\"></a>docker 环境部署</h1><h2 id=\"项目准备（centos版本）\"><a href=\"#项目准备（centos版本）\" class=\"headerlink\" title=\"项目准备（centos版本）\"></a>项目准备（centos版本）</h2><ul>\n<li><strong>docker在线安装</strong><ol>\n<li>安装一些必要的系统工具：<code>sudo yum install -y yum-utils device-mapper-persistent-data lvm2</code></li>\n<li>添加软件源信息：<code>sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></li>\n<li>更新 yum 缓存：<code>sudo yum makecache fast</code></li>\n<li>安装 Docker-ce：<code>sudo yum -y install docker-ce</code></li>\n<li>启动 Docker 后台服务 <code>sudo systemctl start docker</code></li>\n</ol>\n</li>\n<li><strong>docker离线安装</strong><ol>\n<li>下载 Docker RPM 软件包[ 下载地址][<a href=\"https://yum.dockerproject.org/repo/main/centos/7/Packages/\" target=\"_blank\" rel=\"noopener\">https://yum.dockerproject.org/repo/main/centos/7/Packages/</a>]<br>docker-engine-1.12.6-1.el7.centos.x86_64.rpm<br> docker-engine-selinux-1.12.6-1.el7.centos.noarch.rpm</li>\n<li>将软件包上传至服务器，执行安装命令</li>\n<li>cd &lt;你的软件包存放路径&gt;</li>\n<li>yum localinstall *.rpm</li>\n<li>设置开机自启动<code>systemctl enable docker</code></li>\n<li>启动docker <code>systemctl start docker</code></li>\n<li>验证 <code>docker version</code></li>\n</ol>\n</li>\n</ul>\n<h2 id=\"载入镜像\"><a href=\"#载入镜像\" class=\"headerlink\" title=\"载入镜像\"></a>载入镜像</h2><p><code>sudo　docker load --input [镜像文件]</code></p>\n<h2 id=\"查看镜像\"><a href=\"#查看镜像\" class=\"headerlink\" title=\"查看镜像\"></a>查看镜像</h2><p><code>sudo docker images</code></p>\n<h2 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h2><p><code>sudo docker run -p 9036:9009 -it ibtool_bank_server</code></p>\n<h2 id=\"docker基础知识\"><a href=\"#docker基础知识\" class=\"headerlink\" title=\"docker基础知识\"></a>docker基础知识</h2><h3 id=\"docker基本命令\"><a href=\"#docker基本命令\" class=\"headerlink\" title=\"docker基本命令\"></a>docker基本命令</h3><ul>\n<li>docker pull 获取image</li>\n<li>docker build $IMAGENAME .创建image </li>\n<li>docker images 列出image</li>\n<li>docker run -it $IMAGE_NAME /bin/bash 运行容器</li>\n<li>docker ps [-an] 列出容器</li>\n<li>docker rm 删除容器</li>\n<li>docker rmi 删除image</li>\n<li>docker cp /data $CONTAINER_ID:/home/data 在host 和container 之间拷贝文件</li>\n<li>docker commit -m ‘message’ $CONTAINER_ID $IMAGE_NAME:TAG保存改动为新的image</li>\n<li>docker start $CONTAINER_ID 启动容器</li>\n<li>docker stop $CONTAINER_ID 关闭容器（保存状态）</li>\n<li>docker kill $CONTAINER_ID 杀死容器（直接杀死）</li>\n<li>docker exec -it $CONTAINER_ID /bin/bash  连接容器</li>\n<li>docker restart $CONTAINER_ID 重启容器</li>\n<li>docker logs $CONTAINER_ID 在容器外查看输出</li>\n</ul>\n<h3 id=\"Dockerfile-语法\"><a href=\"#Dockerfile-语法\" class=\"headerlink\" title=\"Dockerfile 语法\"></a>Dockerfile 语法</h3><ul>\n<li>FROM base image</li>\n<li>RUN 执行命令</li>\n<li>ADD 添加文件</li>\n<li>COPY 拷贝文件</li>\n<li>CMD 执行命令</li>\n<li>EXPOSE 暴露端口</li>\n<li>WORKDIR 指定路径</li>\n<li>MAINTAINER 维护者</li>\n<li>ENV 设定环境变量</li>\n<li>ENTRYPOINT 容器入口</li>\n<li>USER 指定用户</li>\n</ul>\n<h3 id=\"docker命令\"><a href=\"#docker命令\" class=\"headerlink\" title=\"docker命令\"></a>docker命令</h3><ul>\n<li><code>docker run -v $PWD/data:/var/mydata --name data_container ubuntu</code> </li>\n<li><code>docker load --input ibtool_bank.tar</code></li>\n<li><code>docker save -o ibtool_bank.tar ibtool/bank</code></li>\n<li><code>docker run -p 8080:8080 ibtool/bank</code></li>\n<li><code>docker run -d -p 80:80 --name webserver nginx</code></li>\n</ul>\n<h3 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips:\"></a>tips:</h3><p>Dockerfile 加入<br>ENV LANG C.UTF-8</p>\n","site":{"data":{"projects":[{"name":"extract_news","url":"https://github.com/hee0624/extract_news","desc":"Python package to parse news from various news website"}]}},"excerpt":"","more":"<h1 id=\"docker-环境部署\"><a href=\"#docker-环境部署\" class=\"headerlink\" title=\"docker 环境部署\"></a>docker 环境部署</h1><h2 id=\"项目准备（centos版本）\"><a href=\"#项目准备（centos版本）\" class=\"headerlink\" title=\"项目准备（centos版本）\"></a>项目准备（centos版本）</h2><ul>\n<li><strong>docker在线安装</strong><ol>\n<li>安装一些必要的系统工具：<code>sudo yum install -y yum-utils device-mapper-persistent-data lvm2</code></li>\n<li>添加软件源信息：<code>sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></li>\n<li>更新 yum 缓存：<code>sudo yum makecache fast</code></li>\n<li>安装 Docker-ce：<code>sudo yum -y install docker-ce</code></li>\n<li>启动 Docker 后台服务 <code>sudo systemctl start docker</code></li>\n</ol>\n</li>\n<li><strong>docker离线安装</strong><ol>\n<li>下载 Docker RPM 软件包[ 下载地址][<a href=\"https://yum.dockerproject.org/repo/main/centos/7/Packages/\" target=\"_blank\" rel=\"noopener\">https://yum.dockerproject.org/repo/main/centos/7/Packages/</a>]<br>docker-engine-1.12.6-1.el7.centos.x86_64.rpm<br> docker-engine-selinux-1.12.6-1.el7.centos.noarch.rpm</li>\n<li>将软件包上传至服务器，执行安装命令</li>\n<li>cd &lt;你的软件包存放路径&gt;</li>\n<li>yum localinstall *.rpm</li>\n<li>设置开机自启动<code>systemctl enable docker</code></li>\n<li>启动docker <code>systemctl start docker</code></li>\n<li>验证 <code>docker version</code></li>\n</ol>\n</li>\n</ul>\n<h2 id=\"载入镜像\"><a href=\"#载入镜像\" class=\"headerlink\" title=\"载入镜像\"></a>载入镜像</h2><p><code>sudo　docker load --input [镜像文件]</code></p>\n<h2 id=\"查看镜像\"><a href=\"#查看镜像\" class=\"headerlink\" title=\"查看镜像\"></a>查看镜像</h2><p><code>sudo docker images</code></p>\n<h2 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h2><p><code>sudo docker run -p 9036:9009 -it ibtool_bank_server</code></p>\n<h2 id=\"docker基础知识\"><a href=\"#docker基础知识\" class=\"headerlink\" title=\"docker基础知识\"></a>docker基础知识</h2><h3 id=\"docker基本命令\"><a href=\"#docker基本命令\" class=\"headerlink\" title=\"docker基本命令\"></a>docker基本命令</h3><ul>\n<li>docker pull 获取image</li>\n<li>docker build $IMAGENAME .创建image </li>\n<li>docker images 列出image</li>\n<li>docker run -it $IMAGE_NAME /bin/bash 运行容器</li>\n<li>docker ps [-an] 列出容器</li>\n<li>docker rm 删除容器</li>\n<li>docker rmi 删除image</li>\n<li>docker cp /data $CONTAINER_ID:/home/data 在host 和container 之间拷贝文件</li>\n<li>docker commit -m ‘message’ $CONTAINER_ID $IMAGE_NAME:TAG保存改动为新的image</li>\n<li>docker start $CONTAINER_ID 启动容器</li>\n<li>docker stop $CONTAINER_ID 关闭容器（保存状态）</li>\n<li>docker kill $CONTAINER_ID 杀死容器（直接杀死）</li>\n<li>docker exec -it $CONTAINER_ID /bin/bash  连接容器</li>\n<li>docker restart $CONTAINER_ID 重启容器</li>\n<li>docker logs $CONTAINER_ID 在容器外查看输出</li>\n</ul>\n<h3 id=\"Dockerfile-语法\"><a href=\"#Dockerfile-语法\" class=\"headerlink\" title=\"Dockerfile 语法\"></a>Dockerfile 语法</h3><ul>\n<li>FROM base image</li>\n<li>RUN 执行命令</li>\n<li>ADD 添加文件</li>\n<li>COPY 拷贝文件</li>\n<li>CMD 执行命令</li>\n<li>EXPOSE 暴露端口</li>\n<li>WORKDIR 指定路径</li>\n<li>MAINTAINER 维护者</li>\n<li>ENV 设定环境变量</li>\n<li>ENTRYPOINT 容器入口</li>\n<li>USER 指定用户</li>\n</ul>\n<h3 id=\"docker命令\"><a href=\"#docker命令\" class=\"headerlink\" title=\"docker命令\"></a>docker命令</h3><ul>\n<li><code>docker run -v $PWD/data:/var/mydata --name data_container ubuntu</code> </li>\n<li><code>docker load --input ibtool_bank.tar</code></li>\n<li><code>docker save -o ibtool_bank.tar ibtool/bank</code></li>\n<li><code>docker run -p 8080:8080 ibtool/bank</code></li>\n<li><code>docker run -d -p 80:80 --name webserver nginx</code></li>\n</ul>\n<h3 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips:\"></a>tips:</h3><p>Dockerfile 加入<br>ENV LANG C.UTF-8</p>\n"},{"title":"机器license控制","date":"2019-02-26T05:17:56.000Z","_content":"\n### 直接部署\n1. 客户端采集机器信息,生成client.dat二进制文件（运行client_license.so）发送给服务端。\n2. 服务端利用client.dat导出LICENSE文件（运行server_licese.so）发送给客户端。\n3. 启动运行脚本（读取LICENSE）与机器信息验证，如果一致进行启动，不一致直接返回错误信息。（运行脚本用cython编译成so文件）\n\n\n### docker部署\n1. 客户端采集机器信息,生成client.dat二进制文件（运行client_license.so）发送给服务端。\n2. 服务端利用client.dat生成LICENSE，提前写入docker文件的启动脚本中。\n3. 利用cython编译启动脚本（已编译），通过so文件将主机信息传入docker容器。\n4. docker容器的里的程序启动脚本与传入的环境变量进行验证，如果一致进行启动，不一致直接返回错误信息。","source":"_posts/20190226-机器license控制.md","raw":"---\ntitle: 机器license控制\ndate: 2019-02-26 13:17:56\ntags: [docker, licesne]\n---\n\n### 直接部署\n1. 客户端采集机器信息,生成client.dat二进制文件（运行client_license.so）发送给服务端。\n2. 服务端利用client.dat导出LICENSE文件（运行server_licese.so）发送给客户端。\n3. 启动运行脚本（读取LICENSE）与机器信息验证，如果一致进行启动，不一致直接返回错误信息。（运行脚本用cython编译成so文件）\n\n\n### docker部署\n1. 客户端采集机器信息,生成client.dat二进制文件（运行client_license.so）发送给服务端。\n2. 服务端利用client.dat生成LICENSE，提前写入docker文件的启动脚本中。\n3. 利用cython编译启动脚本（已编译），通过so文件将主机信息传入docker容器。\n4. docker容器的里的程序启动脚本与传入的环境变量进行验证，如果一致进行启动，不一致直接返回错误信息。","slug":"20190226-机器license控制","published":1,"updated":"2019-02-26T06:13:09.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjttrlga7001jow6xy7yexuhk","content":"<h3 id=\"直接部署\"><a href=\"#直接部署\" class=\"headerlink\" title=\"直接部署\"></a>直接部署</h3><ol>\n<li>客户端采集机器信息,生成client.dat二进制文件（运行client_license.so）发送给服务端。</li>\n<li>服务端利用client.dat导出LICENSE文件（运行server_licese.so）发送给客户端。</li>\n<li>启动运行脚本（读取LICENSE）与机器信息验证，如果一致进行启动，不一致直接返回错误信息。（运行脚本用cython编译成so文件）</li>\n</ol>\n<h3 id=\"docker部署\"><a href=\"#docker部署\" class=\"headerlink\" title=\"docker部署\"></a>docker部署</h3><ol>\n<li>客户端采集机器信息,生成client.dat二进制文件（运行client_license.so）发送给服务端。</li>\n<li>服务端利用client.dat生成LICENSE，提前写入docker文件的启动脚本中。</li>\n<li>利用cython编译启动脚本（已编译），通过so文件将主机信息传入docker容器。</li>\n<li>docker容器的里的程序启动脚本与传入的环境变量进行验证，如果一致进行启动，不一致直接返回错误信息。</li>\n</ol>\n","site":{"data":{"projects":[{"name":"extract_news","url":"https://github.com/hee0624/extract_news","desc":"Python package to parse news from various news website"}]}},"excerpt":"","more":"<h3 id=\"直接部署\"><a href=\"#直接部署\" class=\"headerlink\" title=\"直接部署\"></a>直接部署</h3><ol>\n<li>客户端采集机器信息,生成client.dat二进制文件（运行client_license.so）发送给服务端。</li>\n<li>服务端利用client.dat导出LICENSE文件（运行server_licese.so）发送给客户端。</li>\n<li>启动运行脚本（读取LICENSE）与机器信息验证，如果一致进行启动，不一致直接返回错误信息。（运行脚本用cython编译成so文件）</li>\n</ol>\n<h3 id=\"docker部署\"><a href=\"#docker部署\" class=\"headerlink\" title=\"docker部署\"></a>docker部署</h3><ol>\n<li>客户端采集机器信息,生成client.dat二进制文件（运行client_license.so）发送给服务端。</li>\n<li>服务端利用client.dat生成LICENSE，提前写入docker文件的启动脚本中。</li>\n<li>利用cython编译启动脚本（已编译），通过so文件将主机信息传入docker容器。</li>\n<li>docker容器的里的程序启动脚本与传入的环境变量进行验证，如果一致进行启动，不一致直接返回错误信息。</li>\n</ol>\n"},{"title":"线性与非线性总结与思考","date":"2018-11-19T02:50:11.000Z","_content":"\n\n## 机器学习中的线性模型与非线性模型\n\n1. **线性模型**\n    &nbsp;&nbsp;在统计意义上，如果一个回归等式是线性的，那么它的相对于参数就必须也是线性的。如果相对于参数是线性，那么即使性对于样本变量的特征是二次方或者多次方，这个回归模型也是线性的 (例如下面的公式)。\n    $Y=w_0+w_1x_1+w_2+x_2^2 $\n    甚至可以使用log或者指数取形式化特征：\n    $Y=w_0+w_1exp(-x_1)+w_2exp(-x_2^2)$\n\n2. ** 非线性模型**\n     &nbsp;&nbsp;最简单的判断一个模型是不是非线性，就是关注非线性本身，判断它的参数是不是非线性的。非线性有很多种形象，这也是为什么非线性模型能够那么好的拟合那些曲折的函数曲线的原因。比如下面这个：\n     $ Y = \\theta  _1 * x ^ { \\theta  _2 } $\n\n\t&nbsp;&nbsp;与线性模型不一样的是，这些非线性模型的特征因子对应的参数不止一个。\n3. **总结**\n\t1. 线性模型可以是用曲线拟合样本，但是分类的决策边界一定是直线的，例如$logistic$模型；\n\t2. 区分是否为线性模型，主要是看一个乘法式子中自变量 $x$ 前的系数 $\\omega$ ，应该是说$x$只被一个$\\omega$影响，那么此模型为线性模型。或者判断决策边界是否是线性的；\n\t3. 举例： $y=\\frac{1}{1+exp(\\omega_0+\\omega_1x_1+\\omega_2x_2)} $，画出 $y $和 $x$ 是曲线关系，但是它是线性模型，因为$ \\omega_1x_1$ 中可以观察到$ x_1$ 只被一个 $\\omega _1$ 影响；$y=\\frac{1}{1+\\omega_5exp(\\omega_0+\\omega_1x_1+\\omega_2x_2)}$此模型是非线性模型，观察到 $x_1$ 不仅仅被参数 $\\omega_1$ 影响，还被$ \\omega_5 $影响，如果自变量x被两个以上的参数影响，那么此模型是非线性的；\n\t4. 其实最简单判别一个模型是否为线性的，只需要判别决策边界是否是直线，也就是是否能用一条直线来划分；\n\n## 线性代数中的线性变换与非线性变换\n\n1. **线性变换**\n\t(1) 两个基本性质\n\t可加性：两个向量的和经过变换等于两个向量变换的和；$f(x+y)=f(x)+f(y)$\n\t齐次性：一个向量缩放一个倍数变换等于先变换再缩放一个倍数；$f(ax)=af(x)$\n2. **非线性变换**\n\t不满足线性变换的两个性质\n\t\n\n## 参考文献\n\n[机器学习中线性模型和非线性的区别](https://zhuanlan.zhihu.com/p/37866896)\n[线性变换和非线性变换](https://blog.csdn.net/vivizhangyan/article/details/81009344)\n","source":"_posts/20181119-线性与非线性总结.md","raw":"---\ntitle: 线性与非线性总结与思考\ndate: 2018-11-19 10:50:11\ntags: [机器学习, 数学]\n---\n\n\n## 机器学习中的线性模型与非线性模型\n\n1. **线性模型**\n    &nbsp;&nbsp;在统计意义上，如果一个回归等式是线性的，那么它的相对于参数就必须也是线性的。如果相对于参数是线性，那么即使性对于样本变量的特征是二次方或者多次方，这个回归模型也是线性的 (例如下面的公式)。\n    $Y=w_0+w_1x_1+w_2+x_2^2 $\n    甚至可以使用log或者指数取形式化特征：\n    $Y=w_0+w_1exp(-x_1)+w_2exp(-x_2^2)$\n\n2. ** 非线性模型**\n     &nbsp;&nbsp;最简单的判断一个模型是不是非线性，就是关注非线性本身，判断它的参数是不是非线性的。非线性有很多种形象，这也是为什么非线性模型能够那么好的拟合那些曲折的函数曲线的原因。比如下面这个：\n     $ Y = \\theta  _1 * x ^ { \\theta  _2 } $\n\n\t&nbsp;&nbsp;与线性模型不一样的是，这些非线性模型的特征因子对应的参数不止一个。\n3. **总结**\n\t1. 线性模型可以是用曲线拟合样本，但是分类的决策边界一定是直线的，例如$logistic$模型；\n\t2. 区分是否为线性模型，主要是看一个乘法式子中自变量 $x$ 前的系数 $\\omega$ ，应该是说$x$只被一个$\\omega$影响，那么此模型为线性模型。或者判断决策边界是否是线性的；\n\t3. 举例： $y=\\frac{1}{1+exp(\\omega_0+\\omega_1x_1+\\omega_2x_2)} $，画出 $y $和 $x$ 是曲线关系，但是它是线性模型，因为$ \\omega_1x_1$ 中可以观察到$ x_1$ 只被一个 $\\omega _1$ 影响；$y=\\frac{1}{1+\\omega_5exp(\\omega_0+\\omega_1x_1+\\omega_2x_2)}$此模型是非线性模型，观察到 $x_1$ 不仅仅被参数 $\\omega_1$ 影响，还被$ \\omega_5 $影响，如果自变量x被两个以上的参数影响，那么此模型是非线性的；\n\t4. 其实最简单判别一个模型是否为线性的，只需要判别决策边界是否是直线，也就是是否能用一条直线来划分；\n\n## 线性代数中的线性变换与非线性变换\n\n1. **线性变换**\n\t(1) 两个基本性质\n\t可加性：两个向量的和经过变换等于两个向量变换的和；$f(x+y)=f(x)+f(y)$\n\t齐次性：一个向量缩放一个倍数变换等于先变换再缩放一个倍数；$f(ax)=af(x)$\n2. **非线性变换**\n\t不满足线性变换的两个性质\n\t\n\n## 参考文献\n\n[机器学习中线性模型和非线性的区别](https://zhuanlan.zhihu.com/p/37866896)\n[线性变换和非线性变换](https://blog.csdn.net/vivizhangyan/article/details/81009344)\n","slug":"20181119-线性与非线性总结","published":1,"updated":"2018-11-27T08:27:17.983Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjttrlgbp0023ow6xg708eo20","content":"<h2 id=\"机器学习中的线性模型与非线性模型\"><a href=\"#机器学习中的线性模型与非线性模型\" class=\"headerlink\" title=\"机器学习中的线性模型与非线性模型\"></a>机器学习中的线性模型与非线性模型</h2><ol>\n<li><p><strong>线性模型</strong><br> &nbsp;&nbsp;在统计意义上，如果一个回归等式是线性的，那么它的相对于参数就必须也是线性的。如果相对于参数是线性，那么即使性对于样本变量的特征是二次方或者多次方，这个回归模型也是线性的 (例如下面的公式)。<br> $Y=w_0+w_1x_1+w_2+x_2^2 $<br> 甚至可以使用log或者指数取形式化特征：<br> $Y=w_0+w_1exp(-x_1)+w_2exp(-x_2^2)$</p>\n</li>\n<li><p><strong> 非线性模型</strong><br>  &nbsp;&nbsp;最简单的判断一个模型是不是非线性，就是关注非线性本身，判断它的参数是不是非线性的。非线性有很多种形象，这也是为什么非线性模型能够那么好的拟合那些曲折的函数曲线的原因。比如下面这个：<br>  $ Y = \\theta  _1 * x ^ { \\theta  _2 } $</p>\n<p> &nbsp;&nbsp;与线性模型不一样的是，这些非线性模型的特征因子对应的参数不止一个。</p>\n</li>\n<li><strong>总结</strong><ol>\n<li>线性模型可以是用曲线拟合样本，但是分类的决策边界一定是直线的，例如$logistic$模型；</li>\n<li>区分是否为线性模型，主要是看一个乘法式子中自变量 $x$ 前的系数 $\\omega$ ，应该是说$x$只被一个$\\omega$影响，那么此模型为线性模型。或者判断决策边界是否是线性的；</li>\n<li>举例： $y=\\frac{1}{1+exp(\\omega_0+\\omega_1x_1+\\omega_2x_2)} $，画出 $y $和 $x$ 是曲线关系，但是它是线性模型，因为$ \\omega_1x_1$ 中可以观察到$ x_1$ 只被一个 $\\omega _1$ 影响；$y=\\frac{1}{1+\\omega_5exp(\\omega_0+\\omega_1x_1+\\omega_2x_2)}$此模型是非线性模型，观察到 $x_1$ 不仅仅被参数 $\\omega_1$ 影响，还被$ \\omega_5 $影响，如果自变量x被两个以上的参数影响，那么此模型是非线性的；</li>\n<li>其实最简单判别一个模型是否为线性的，只需要判别决策边界是否是直线，也就是是否能用一条直线来划分；</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"线性代数中的线性变换与非线性变换\"><a href=\"#线性代数中的线性变换与非线性变换\" class=\"headerlink\" title=\"线性代数中的线性变换与非线性变换\"></a>线性代数中的线性变换与非线性变换</h2><ol>\n<li><strong>线性变换</strong><br> (1) 两个基本性质<br> 可加性：两个向量的和经过变换等于两个向量变换的和；$f(x+y)=f(x)+f(y)$<br> 齐次性：一个向量缩放一个倍数变换等于先变换再缩放一个倍数；$f(ax)=af(x)$</li>\n<li><strong>非线性变换</strong><br> 不满足线性变换的两个性质</li>\n</ol>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p><a href=\"https://zhuanlan.zhihu.com/p/37866896\" target=\"_blank\" rel=\"noopener\">机器学习中线性模型和非线性的区别</a><br><a href=\"https://blog.csdn.net/vivizhangyan/article/details/81009344\" target=\"_blank\" rel=\"noopener\">线性变换和非线性变换</a></p>\n","site":{"data":{"projects":[{"name":"extract_news","url":"https://github.com/hee0624/extract_news","desc":"Python package to parse news from various news website"}]}},"excerpt":"","more":"<h2 id=\"机器学习中的线性模型与非线性模型\"><a href=\"#机器学习中的线性模型与非线性模型\" class=\"headerlink\" title=\"机器学习中的线性模型与非线性模型\"></a>机器学习中的线性模型与非线性模型</h2><ol>\n<li><p><strong>线性模型</strong><br> &nbsp;&nbsp;在统计意义上，如果一个回归等式是线性的，那么它的相对于参数就必须也是线性的。如果相对于参数是线性，那么即使性对于样本变量的特征是二次方或者多次方，这个回归模型也是线性的 (例如下面的公式)。<br> $Y=w_0+w_1x_1+w_2+x_2^2 $<br> 甚至可以使用log或者指数取形式化特征：<br> $Y=w_0+w_1exp(-x_1)+w_2exp(-x_2^2)$</p>\n</li>\n<li><p><strong> 非线性模型</strong><br>  &nbsp;&nbsp;最简单的判断一个模型是不是非线性，就是关注非线性本身，判断它的参数是不是非线性的。非线性有很多种形象，这也是为什么非线性模型能够那么好的拟合那些曲折的函数曲线的原因。比如下面这个：<br>  $ Y = \\theta  _1 * x ^ { \\theta  _2 } $</p>\n<p> &nbsp;&nbsp;与线性模型不一样的是，这些非线性模型的特征因子对应的参数不止一个。</p>\n</li>\n<li><strong>总结</strong><ol>\n<li>线性模型可以是用曲线拟合样本，但是分类的决策边界一定是直线的，例如$logistic$模型；</li>\n<li>区分是否为线性模型，主要是看一个乘法式子中自变量 $x$ 前的系数 $\\omega$ ，应该是说$x$只被一个$\\omega$影响，那么此模型为线性模型。或者判断决策边界是否是线性的；</li>\n<li>举例： $y=\\frac{1}{1+exp(\\omega_0+\\omega_1x_1+\\omega_2x_2)} $，画出 $y $和 $x$ 是曲线关系，但是它是线性模型，因为$ \\omega_1x_1$ 中可以观察到$ x_1$ 只被一个 $\\omega _1$ 影响；$y=\\frac{1}{1+\\omega_5exp(\\omega_0+\\omega_1x_1+\\omega_2x_2)}$此模型是非线性模型，观察到 $x_1$ 不仅仅被参数 $\\omega_1$ 影响，还被$ \\omega_5 $影响，如果自变量x被两个以上的参数影响，那么此模型是非线性的；</li>\n<li>其实最简单判别一个模型是否为线性的，只需要判别决策边界是否是直线，也就是是否能用一条直线来划分；</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"线性代数中的线性变换与非线性变换\"><a href=\"#线性代数中的线性变换与非线性变换\" class=\"headerlink\" title=\"线性代数中的线性变换与非线性变换\"></a>线性代数中的线性变换与非线性变换</h2><ol>\n<li><strong>线性变换</strong><br> (1) 两个基本性质<br> 可加性：两个向量的和经过变换等于两个向量变换的和；$f(x+y)=f(x)+f(y)$<br> 齐次性：一个向量缩放一个倍数变换等于先变换再缩放一个倍数；$f(ax)=af(x)$</li>\n<li><strong>非线性变换</strong><br> 不满足线性变换的两个性质</li>\n</ol>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p><a href=\"https://zhuanlan.zhihu.com/p/37866896\" target=\"_blank\" rel=\"noopener\">机器学习中线性模型和非线性的区别</a><br><a href=\"https://blog.csdn.net/vivizhangyan/article/details/81009344\" target=\"_blank\" rel=\"noopener\">线性变换和非线性变换</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/20181031-vim笔记/3","slug":"3","post":"cjttrlg9z0016ow6xrhnrz007","modified":0,"renderable":0},{"_id":"source/_posts/20180927-Python的实用的小技巧/f16935ad62e7db9560a61f4242ca212f.jpeg","slug":"f16935ad62e7db9560a61f4242ca212f.jpeg","post":"cjttrlg9l000wow6x6w68xuyi","modified":0,"renderable":0},{"_id":"source/_posts/20181101-git学习笔记/0.jpeg","slug":"0.jpeg","post":"cjttrlga00019ow6xkpmgeif5","modified":0,"renderable":0},{"_id":"source/_posts/20181031-vim笔记/1","slug":"1","post":"cjttrlg9z0016ow6xrhnrz007","modified":0,"renderable":0},{"_id":"source/_posts/20181031-vim笔记/2","slug":"2","post":"cjttrlg9z0016ow6xrhnrz007","modified":0,"renderable":0},{"_id":"source/_posts/20181031-vim笔记/4","slug":"4","post":"cjttrlg9z0016ow6xrhnrz007","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cjttrlg7m0000ow6x2y1598ev","tag_id":"cjttrlg7w0002ow6xkbf1vc1z","_id":"cjttrlg8a0007ow6xdqm5v1x6"},{"post_id":"cjttrlg7t0001ow6x73i2jh6r","tag_id":"cjttrlg890006ow6xgyn5os7n","_id":"cjttrlg8i000cow6x7t9ca3yr"},{"post_id":"cjttrlg800003ow6xll3hel2q","tag_id":"cjttrlg8f000aow6xgezrsdz6","_id":"cjttrlg8p000gow6xyyccvhir"},{"post_id":"cjttrlg8i000dow6xmpbsezv1","tag_id":"cjttrlg8f000aow6xgezrsdz6","_id":"cjttrlg8r000iow6x4kryrg54"},{"post_id":"cjttrlg820004ow6xw4mjab20","tag_id":"cjttrlg8l000eow6xs2wiwrn4","_id":"cjttrlg8t000kow6xksz20mby"},{"post_id":"cjttrlg870005ow6xk1kpl315","tag_id":"cjttrlg8s000jow6xkwy9n97l","_id":"cjttrlg8t000mow6xwt4d375p"},{"post_id":"cjttrlg8b0008ow6xd0plugam","tag_id":"cjttrlg8t000low6xvgx22v5q","_id":"cjttrlg8u000oow6x7yvtbjri"},{"post_id":"cjttrlg8d0009ow6x4ikbz80q","tag_id":"cjttrlg8t000now6xwo673qt4","_id":"cjttrlg8u000qow6x1ge4m3fy"},{"post_id":"cjttrlg8g000bow6xxe1p0pzy","tag_id":"cjttrlg8u000pow6x3nepg098","_id":"cjttrlg8v000sow6xv1zw2mll"},{"post_id":"cjttrlg8m000fow6xagy49a7d","tag_id":"cjttrlg8u000row6xf2ilc3j9","_id":"cjttrlg8v000uow6xqmj4iy3e"},{"post_id":"cjttrlg8q000how6x8ay9tj90","tag_id":"cjttrlg8v000tow6xx56hxwuv","_id":"cjttrlg8w000vow6xdi0b8hzf"},{"post_id":"cjttrlg9l000wow6x6w68xuyi","tag_id":"cjttrlg8s000jow6xkwy9n97l","_id":"cjttrlg9r0010ow6x8rjdk8w2"},{"post_id":"cjttrlg9s0011ow6x4p72ekqr","tag_id":"cjttrlg8s000jow6xkwy9n97l","_id":"cjttrlg9x0014ow6xmcvmk985"},{"post_id":"cjttrlg9p000yow6xe9iruv0h","tag_id":"cjttrlg9w0012ow6xduqndj31","_id":"cjttrlga00018ow6x2qvosct7"},{"post_id":"cjttrlga00019ow6xkpmgeif5","tag_id":"cjttrlg8u000row6xf2ilc3j9","_id":"cjttrlga2001cow6xre53l9tp"},{"post_id":"cjttrlga1001aow6x5vi1f9tp","tag_id":"cjttrlg8u000row6xf2ilc3j9","_id":"cjttrlga4001eow6xsnnt4dz5"},{"post_id":"cjttrlg9w0013ow6xy7zwgqeg","tag_id":"cjttrlg9z0017ow6xmydemdaj","_id":"cjttrlga6001iow6x5md32i94"},{"post_id":"cjttrlg9w0013ow6xy7zwgqeg","tag_id":"cjttrlga2001bow6xw2v6fdtl","_id":"cjttrlga8001kow6x2et6l19k"},{"post_id":"cjttrlg9x0015ow6x0ltwvfcs","tag_id":"cjttrlga5001gow6x8qnnpupg","_id":"cjttrlgab001now6xhd1uzsp8"},{"post_id":"cjttrlg9x0015ow6x0ltwvfcs","tag_id":"cjttrlga9001low6xbzu8wy41","_id":"cjttrlgac001oow6xmvld7a96"},{"post_id":"cjttrlg9z0016ow6xrhnrz007","tag_id":"cjttrlgab001mow6x96muirmq","_id":"cjttrlgad001qow6xihtqzrki"},{"post_id":"cjttrlga3001dow6xemts7x5y","tag_id":"cjttrlgac001pow6xugbpwu55","_id":"cjttrlgaf001sow6xe7oelq21"},{"post_id":"cjttrlga4001fow6xak9fork8","tag_id":"cjttrlgae001row6x38348tgb","_id":"cjttrlgah001uow6xuja9v8oc"},{"post_id":"cjttrlga4001fow6xak9fork8","tag_id":"cjttrlg8s000jow6xkwy9n97l","_id":"cjttrlgah001vow6x8m6i0h8x"},{"post_id":"cjttrlga5001how6xkjohyikk","tag_id":"cjttrlgae001row6x38348tgb","_id":"cjttrlgaj001yow6x5eq26110"},{"post_id":"cjttrlga5001how6xkjohyikk","tag_id":"cjttrlgah001wow6xjin9fy3s","_id":"cjttrlgaj001zow6xjfp4vgaa"},{"post_id":"cjttrlga7001jow6xy7yexuhk","tag_id":"cjttrlgah001wow6xjin9fy3s","_id":"cjttrlgaj0021ow6xmy5gpprd"},{"post_id":"cjttrlga7001jow6xy7yexuhk","tag_id":"cjttrlgaj0020ow6xicbecdty","_id":"cjttrlgaj0022ow6xcdgh5vv1"},{"post_id":"cjttrlgbp0023ow6xg708eo20","tag_id":"cjttrlg9z0017ow6xmydemdaj","_id":"cjttrlgbw0025ow6x8kpmhjot"},{"post_id":"cjttrlgbp0023ow6xg708eo20","tag_id":"cjttrlgbr0024ow6x45o6bgjv","_id":"cjttrlgbw0026ow6xgbip7ahk"}],"Tag":[{"name":"python 环境配置","_id":"cjttrlg7w0002ow6xkbf1vc1z"},{"name":"验证码","_id":"cjttrlg890006ow6xgyn5os7n"},{"name":"爬虫","_id":"cjttrlg8f000aow6xgezrsdz6"},{"name":"mysql database","_id":"cjttrlg8l000eow6xs2wiwrn4"},{"name":"python","_id":"cjttrlg8s000jow6xkwy9n97l"},{"name":"database","_id":"cjttrlg8t000low6xvgx22v5q"},{"name":"flume","_id":"cjttrlg8t000now6xwo673qt4"},{"name":"rpc","_id":"cjttrlg8u000pow6x3nepg098"},{"name":"git","_id":"cjttrlg8u000row6xf2ilc3j9"},{"name":"代码审核","_id":"cjttrlg8v000tow6xx56hxwuv"},{"name":"chrome","_id":"cjttrlg9w0012ow6xduqndj31"},{"name":"机器学习","_id":"cjttrlg9z0017ow6xmydemdaj"},{"name":"损失函数","_id":"cjttrlga2001bow6xw2v6fdtl"},{"name":"CNN","_id":"cjttrlga5001gow6x8qnnpupg"},{"name":"深度学习","_id":"cjttrlga9001low6xbzu8wy41"},{"name":"vim","_id":"cjttrlgab001mow6x96muirmq"},{"name":"ocr","_id":"cjttrlgac001pow6xugbpwu55"},{"name":"linux","_id":"cjttrlgae001row6x38348tgb"},{"name":"docker","_id":"cjttrlgah001wow6xjin9fy3s"},{"name":"licesne","_id":"cjttrlgaj0020ow6xicbecdty"},{"name":"数学","_id":"cjttrlgbr0024ow6x45o6bgjv"}]}}